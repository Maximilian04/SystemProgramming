push 100
pop rfx
call :::readFactors
call :::calcDiscr
push 0
je :IveGotNoRootsButMyHomeWasNeverOnTheGround
dump
push rex
out
hlt
:IveGotNoRootsButMyHomeWasNeverOnTheGround
push 0
out
push 0
out
push 0
out
hlt
::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::
:::::::::::calcDiscr calcs discriminant from rbx, rcx, rdx & write to rex in stack zero, or one-zero, or one-one about roots number (ruin rax)
::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::
:::calcDiscr
push rcx
push rcx
call :::multiply
push rbx
push rdx
call :::multiply
push 4
mul
pop rex
pop rax
::::::: now in rax b^2, in rex 4*a*c
push rax
push rex
jne :discrIsntZero
push 0
push 1
push 0
pop rex
ret
:discrIsntZero
push rax
push rex
jb :discrIsNegative
push 1
push 1
push rax
push rex
sub
pop rex
push rex
push rfx
mul
call :::sqrt
pop rex
ret
:discrIsNegative
push 0
push 0
pop rex
ret
:
::::::::::::::::::::::::::::::::::::::::
:::multiply
mul
push rfx
div
ret
::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::
:::::::::::readFactors use rfx as point-factor & write it to rbx, rcx, rdx
::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::
:::readFactors
in
push rfx
mul
pop rbx
in
push rfx
mul
pop rcx
in
push rfx
mul
pop rdx
ret
:
::::::::::::::::::::::::::::::::::::::::
:::writeRDX
push rdx
out
ret
::::::::::::::::::::::::::::::::::::::::
:::writeRAX
push rax
out
ret
::::::::::::::::::::::::::::::::::::::::
:::writeRBX
push rbx
out
ret
::::::::::::::::::::::::::::::::::::::::
:::writeRCX
push rcx
out
ret
::::::::::::::::::::::::::::::::::::::::
:::backupRegsExceptA
push rbx
push rcx
push rdx
push rex
push rfx
ret
:
:::restoreRegsExceptA
push rfx
push rex
pop rdx
pop rcx
pop rbx
ret
::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::
:::::::::::SQRT function (ruin rax)
::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::
:::sqrt
pop rax
call :::backupRegsExceptA
push rax
push 0
push rax
call :::regress
pop rax
pop
call :::restoreRegsExceptA
push rax
ret
::::::::::::::::::::::::::::::::::::::::
:::regress
pop rbx
pop rax
::::::call :::writeRAX
::::::call :::writeRBX
:::::::::::
push rbx
push rax
sub
push 1
ja :else
push rax
ret
:else
:::::::::::
:::::::::::
push rbx
push rax
sub
push 3
jae :alternative
push rax
push 1
add
jmp :alternativeEnd
:alternative
push rax
push 2
div
push rbx
push 2
div
add
:alternativeEnd
pop rcx
:::::::
pop rdx
push rdx
:::::::
push rcx
push rcx
mul
push rdx
ja ::newElse
push rcx
push rbx
call :::regress
ret
::newElse
push rax
push rcx
call :::regress
ret
::::::::::::::::::::::::::::::::::::::::
