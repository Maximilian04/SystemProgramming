in
push 1
pop rfx
call :::sqrt
out
hlt
::::::::::::::::::::::::::::::::::::::::
:::writeRDX
push rdx
out
ret
::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::
:::::::::::
::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::
:
::::::::::::::::::::::::::::::::::::::::
:::writeRAX
push rax
out
ret
::::::::::::::::::::::::::::::::::::::::
:::writeRBX
push rbx
out
ret
::::::::::::::::::::::::::::::::::::::::
:::writeRCX
push rcx
out
ret
::::::::::::::::::::::::::::::::::::::::
:::backupRegsExceptA
push rbx
push rcx
push rdx
push rex
push rfx
ret
:
:::restoreRegsExceptA
push rfx
push rex
pop rdx
pop rcx
pop rbx
ret
::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::
:::::::::::SQRT function (ruin rax) use rfx as accuracy
::::::::::::::::::::::::::::::::::::::::
::::::::::::::::::::::::::::::::::::::::
:::sqrt
pop rax
call :::backupRegsExceptA
push rax
push 0
push rax
call :::regress
pop rax
pop
call :::restoreRegsExceptA
push rax
ret
::::::::::::::::::::::::::::::::::::::::
:::regress
pop rbx
pop rax
::::::call :::writeRAX
::::::call :::writeRBX
:::::::::::
push rbx
push rax
sub
push rfx
ja :else
push rax
ret
:else
:::::::::::
:::::::::::
push rbx
push rax
sub
push 3
jae :alternative
push rax
push 1
add
jmp :alternativeEnd
:alternative
push rax
push 2
div
push rbx
push 2
div
add
:alternativeEnd
pop rcx
:::::::
pop rdx
push rdx
:::::::
push rcx
push rcx
mul
push rdx
ja ::newElse
push rcx
push rbx
call :::regress
ret
::newElse
push rax
push rcx
call :::regress
ret
::::::::::::::::::::::::::::::::::::::::
