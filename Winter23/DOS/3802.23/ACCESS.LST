Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 1
access.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     .286
      4				     locals @@
      5
      6				     org 80h
      7	0080  ??		     ArgCount:	     db	?
      8	0081  ??		     Args:	     db	?
      9
     10				     org 100h
     11
     12				     ; probox.com 8 21 3 2 F 19	C 1A 15	10 9 7 8 3 12
     13				     ; probox.com 8 21 9 10 E 15 15 15 15 15 15	15 15 3	D E We Qqerreqwerq
     14
     15	0100			     Start:
     16
     17	0100  B8 B800				     mov ax, 0b800h		     ; адрес сегмента с		    +
     18				     видеопамятью -> es
     19	0103  8E C0				     mov es, ax			     ;
     20	0105  8C D0				     mov ax, ss			     ; Segment with stack, code, etc.
     21	0107  8E D8				     mov ds, ax			     ;
     22
     23	0109  E8 0218				     call ScanPassword
     24	010C  E8 023F				     call CheckPassword
     25
     26	010F  85 C0				     test ax, ax
     27	0111  74 56				     jz	ReturnProgram		     ; >>>>>>>>>>>>>>
     28
     29	0113  B7 00				     mov bh, 0
     30	0115  8A 1E 003Er			     mov bl, byte ptr [boxTheme]
     31	0119  8A 26 003Fr			     mov ah, byte ptr [boxColor]
     32
     33	011D  8A 87 0016r			     mov al, byte ptr [BoxAssetLU + bx]
     34	0121  50				     push ax
     35	0122  8A 87 001Ar			     mov al, byte ptr [BoxAsset_U + bx]
     36	0126  50				     push ax
     37	0127  8A 87 001Er			     mov al, byte ptr [BoxAssetRU + bx]
     38	012B  50				     push ax
     39	012C  8A 87 0022r			     mov al, byte ptr [BoxAssetR_ + bx]
     40	0130  50				     push ax
     41	0131  8A 87 0026r			     mov al, byte ptr [BoxAssetRB + bx]
     42	0135  50				     push ax
     43	0136  8A 87 002Ar			     mov al, byte ptr [BoxAsset_B + bx]
     44	013A  50				     push ax
     45	013B  8A 87 002Er			     mov al, byte ptr [BoxAssetLB + bx]
     46	013F  50				     push ax
     47	0140  8A 87 0032r			     mov al, byte ptr [BoxAssetL_ + bx]
     48	0144  50				     push ax
     49	0145  8A 87 0036r			     mov al, byte ptr [BoxAssetFI + bx]
     50	0149  50				     push ax
     51	014A  8A 2E 003Ar			     mov ch, byte ptr [boxHeightPos]
     52	014E  8A 0E 003Br			     mov cl, byte ptr [boxWidthPos]
     53	0152  E8 01E1				     call CalculateVidMemPos
     54	0155  8A 2E 003Cr			     mov ch, byte ptr [boxHeight]
     55	0159  8A 0E 003Dr			     mov cl, byte ptr [boxWidth]
     56	015D  E8 0308				     call DrawBox
     57	0160  83 C4 12				     add sp, 2*9d
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 2
access.asm



     58
     59	0163  BE 0260r				     mov si, offset TextOK
     60	0166  E8 0005				     call PrintText
     61
     62	0169			     ReturnProgram:				     ; <<<<<<<<<<<<<<
     63	0169  B8 4C00				     mov ax, 4c00h		     ; exit(0)
     64	016C  CD 21				     int 21h
     65
     66
     67
     68				     ;------------------------------------------------
     69				     ; Prints text into	the box
     70				     ;------------------------------------------------
     71				     ; Entry:	     None
     72				     ;
     73				     ; Expects:	     DS:SI -> text
     74				     ;
     75				     ; Exit:	     None
     76				     ;
     77				     ; Destroys:     AX	BX CX DX SI DI
     78				     ;------------------------------------------------
     79				     ; Stack frame:
     80				     ;		     ...
     81				     ;		     retAddr	 [bp + 2]
     82				     ;		     stored BP	 [bp]
     83				     ;		     text ptr	 [bp - 2]
     84				     ;		     ...
     85				     ;------------------------------------------------
     86
     87	016E			     PrintText	     proc
     88	016E  55				     push bp
     89	016F  8B EC				     mov bp, sp			     ; Complete	stack frame
     90	0171  56				     push si
     91
     92
     93	0172  06				     push es
     94						     ; mov di, ds		       ; ds -> es
     95						     ; mov es, di		       ;
     96	0173  8C CF				     mov di, cs			     ; cs -> es
     97	0175  8E C7				     mov es, di			     ;
     98	0177  8B FE				     mov di, si			     ; si -> di
     99	0179  E8 01C8				     call StrLen
    100	017C  07				     pop es			     ; restore es -> vidmem
    101	017D  8B D1				     mov dx, cx			     ; dx = text length
    102
    103	017F  8A 2E 003Ar			     mov ch, byte ptr boxHeightPos
    104	0183  80 C5 01				     add ch, 1d
    105	0186  8A 0E 003Br			     mov cl, byte ptr boxWidthPos
    106	018A  80 C1 01				     add cl, 1d
    107	018D  E8 01A6				     call CalculateVidMemPos
    108
    109	0190  8B CA				     mov cx, dx			     ; cx = text length
    110	0192  8A 36 003Cr			     mov dh, byte ptr boxHeight
    111	0196  8A 16 003Dr			     mov dl, byte ptr boxWidth
    112
    113	019A  3A CA				     cmp cl, dl
    114	019C  7D 0D				     jge @@OneChar		     ; >>====\\
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 3
access.asm



    115										     ;	     ||
    116	019E  B6 00				     mov dh, 0			     ;	     ||
    117	01A0  2A D1				     sub dl, cl			     ;	     ||
    118	01A2  D0 EA				     shr dl, 1			     ; Center offset
    119	01A4  D0 E2				     shl dl, 1			     ;	     ||
    120	01A6  03 DA				     add bx, dx			     ;	     ||
    121	01A8  EB 01 90				     jmp @@OneChar		     ; >>====\\
    122										     ;	     ||
    123										     ; <<====//
    124	01AB				 @@OneChar:				     ; <-------------------------\
    125	01AB  84 F6				     test dh, dh		     ;				 |
    126	01AD  74 18				     jz	@@LastLine		     ; >>====\\			 |
    127										     ;	     ||			 |
    128	01AF  84 D2				     test dl, dl		     ;	     ||			 |
    129	01B1  75 12				     jnz @@noLineBreak		     ;	     ||			 |
    130										     ;	     ||			 |
    131	01B3  8A 16 003Dr			     mov dl, byte ptr boxWidth	     ;	     ||			 |
    132	01B7  FE CE				     dec dh			     ;	     ||			 |
    133										     ;	     ||			 |
    134	01B9  81 C3 00A0			     add bx, 160d		     ; Next Line		 |
    135	01BD  B4 00				     mov ah, 0			     ;	     ||			 |
    136	01BF  8A C2				     mov al, dl			     ;	     ||			 |
    137	01C1  D1 E0				     shl ax, 1			     ;	     ||			 |
    138	01C3  2B D8				     sub bx, ax			     ;	     ||			 |
    139										     ;	     ||			 |
    140	01C5					 @@noLineBreak:			     ;	     ||			 |
    141	01C5  FE CA				     dec dl			     ;	     ||			 |
    142										     ;	     ||			 |
    143	01C7					 @@LastLine:			     ; <<====//			 |
    144	01C7  8A 04				     mov al, byte ptr [si]	     ;				 |
    145	01C9  26: 88 07				     mov es:[bx], al		     ;				 |
    146										     ;				 |
    147	01CC  46				     inc si			     ;				 |
    148	01CD  43				     inc bx			     ;				 |
    149										     ;				 |
    150	01CE  A0 0040r				     mov al, byte ptr [boxTextColor] ;				 |
    151	01D1  26: 88 07				     mov es:[bx], al		     ;				 |
    152	01D4  43				     inc bx			     ;				 |
    153										     ;				 |
    154	01D5  E2 D4				     loop @@OneChar		     ; >-------------------------/
    155
    156
    157
    158	01D7  5D				     pop bp
    159	01D8  5D				     pop bp			     ; Stack frame
    160	01D9  C3				     ret
    161	01DA			     PrintText	     endp
    162
    163				     ;------------------------------------------------
    164				     ;------------------------------------------------
    165
    166
    167				     ;------------------------------------------------
    168				     ; Gets information	from cmd argument
    169				     ;------------------------------------------------
    170				     ; Entry:	     None
    171				     ;
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 4
access.asm



    172				     ; Expects:	     None
    173				     ;
    174				     ; Exit:	     AX	= 0 if no errors, 1 contrary
    175				     ;		     textFlag =	1 if DS:SI -> box text,	0 if no	text
    176				     ;
    177				     ; Destroys:     BX	CX SI DI (DH if	error)
    178				     ;------------------------------------------------
    179				     ; Stack frame:
    180				     ;		     ...
    181				     ;		     textFlag	 [bp + 4]
    182				     ;		     retAddr	 [bp + 2]
    183				     ;		     stored BP	 [bp]
    184				     ;		     ...
    185				     ;------------------------------------------------
    186
    187	01DA			     GetArgs	     proc
    188	01DA  55				     push bp
    189	01DB  8B EC				     mov bp, sp			     ; Complete	stack frame
    190
    191
    192	01DD  B4 00				     mov ah, 0			     ; At least	one argument!
    193	01DF  A0 0080r				     mov al, byte ptr [ArgCount]     ;
    194	01E2  BB 0002				     mov bx, 2d			     ;
    195	01E5  3B C3				     cmp ax, bx			     ;
    196	01E7  7D 03				     jnl @@ContinueHere1	     ;
    197	01E9  E9 0117				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    198	01EC					     @@ContinueHere1:		     ;
    199
    200								 ; ONE STEP:
    201								 ; arg -> bx
    202								 ; if the last 1 -> ax
    203								 ; DS:SI -> next
    204	01EC  B2 20				     mov dl, 020h		     ; 20h Terminator
    205	01EE  B6 0D				     mov dh, 00Dh		     ; 0Dh TerminatorEnd
    206	01F0  BE 0082r				     mov si, offset Args + 1	     ; First argument
    207
    208	01F3  BB 0000				     mov bx, 0
    209	01F6  E8 01F5				     call MScnNDec
    210	01F9  88 1E 003Ar			     mov byte ptr [boxHeightPos], bl
    211	01FD  85 C0				     test ax, ax
    212	01FF  74 03				     jz	@@ContinueHere2
    213	0201  E9 00FF				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    214	0204					     @@ContinueHere2:
    215
    216
    217	0204  BB 0000				     mov bx, 0
    218	0207  E8 01E4				     call MScnNDec
    219	020A  88 1E 003Br			     mov byte ptr [boxWidthPos], bl
    220	020E  85 C0				     test ax, ax
    221	0210  74 03				     jz	@@ContinueHere3
    222	0212  E9 00EE				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    223	0215					     @@ContinueHere3:
    224
    225	0215  BB 0000				     mov bx, 0
    226	0218  E8 01D3				     call MScnNDec
    227	021B  88 1E 003Cr			     mov byte ptr [boxHeight], bl
    228	021F  85 C0				     test ax, ax
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 5
access.asm



    229	0221  74 03				     jz	@@ContinueHere4
    230	0223  E9 00DD				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    231	0226					     @@ContinueHere4:
    232
    233	0226  BB 0000				     mov bx, 0
    234	0229  E8 01C2				     call MScnNDec
    235	022C  88 1E 003Dr			     mov byte ptr [boxWidth], bl
    236	0230  85 C0				     test ax, ax
    237	0232  74 03				     jz	@@ContinueHere5
    238	0234  E9 00CC				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    239	0237					     @@ContinueHere5:
    240
    241	0237  BB 0000				     mov bx, 0
    242	023A  E8 01D9				     call MScnNHex
    243	023D  88 1E 003Er			     mov byte ptr [boxTheme], bl
    244
    245	0241  B9 0002				     mov cx, 02h
    246	0244  3B D9				     cmp bx, cx
    247	0246  7E 27				     jle @@Theme02		     ; ---->
    248	0248  B9 000E				     mov cx, 0Eh
    249	024B  3B D9				     cmp bx, cx
    250	024D  74 28				     je	@@ThemeE		     ; ---->
    251	024F  B9 000F				     mov cx, 0Fh
    252	0252  3B D9				     cmp bx, cx
    253	0254  74 1C				     je	@@ThemeF		     ; ---->
    254	0256  B9 00C0				     mov cx, 0C0h
    255	0259  3B D9				     cmp bx, cx
    256	025B  7D 3F				     jge @@ThemeC		     ; ---->
    257
    258	025D  E9 00B4				     jmp @@SetErrorBadTheme
    259	0260  41 63 63 65 73 73	20+  TextOK:	     db	"Access	granted"
    260	      67 72 61 6E 74 65	64
    261	026E  90				     db	090h
    262
    263				     ;	  0,  1,  2 - standart box	   & text
    264				     ;	 C0, C1, C2 - standart box & color & text
    265				     ;	 F	 - various symbols & color & text
    266				     ;	 E	 - various symbols & color & text & textColor
    267
    268	026F			     @@Theme02:					     ; <----
    269	026F  EB 78 90				     jmp @@LastArg		     ; ->>>>>>>>>>>>>
    270
    271	0272			     @@ThemeF:					     ; <----
    272	0272  C6 06 003Er 03			     mov byte ptr [boxTheme], 03d
    273	0277			     @@ThemeE:					     ; <----
    274
    275	0277  BF 0019r				     mov di, offset BoxAssetStart + 3
    276	027A  B9 001Ar				     mov cx, offset BoxAssetStep     ; cx = step
    277	027D  81 E9 0016r			     sub cx, offset BoxAssetStart    ;
    278
    279	0281				 @@OneStep:				     ; <-------------------------\
    280	0281  85 C0				     test ax, ax		     ;				 |
    281	0283  74 03				     jz	@@ContinueHere6		     ;				 |
    282	0285  EB 7C 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>		 |>>>
    283	0288					     @@ContinueHere6:		     ;				 |
    284										     ;				 |
    285	0288  BB 0000				     mov bx, 0			     ;				 |
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 6
access.asm



    286	028B  E8 0160				     call MScnNDec		     ;				 |
    287	028E  88 1D				     mov [di], bl		     ;				 |
    288										     ;				 |
    289	0290  03 F9				     add di, cx			     ;				 |
    290										     ;				 |
    291	0292  BB 003Ar				     mov bx, offset BoxAssetEnd	     ;				 |
    292	0295  3B FB				     cmp di, bx			     ;				 |
    293	0297  7C E8				     jl	@@OneStep		     ; >-------------------------/
    294
    295	0299  EB 10 90				     jmp @@SetColor		     ; >>====\\
    296										     ;	     ||
    297	029C			     @@ThemeC:					     ; <-----||--
    298	029C  B9 00C2				     mov cx, 0C2h		     ;	     ||
    299	029F  3B D9				     cmp bx, cx			     ;	     ||
    300	02A1  7E 03				     jng @@ContinueHere10	     ;	     ||
    301	02A3  EB 6F 90				     jmp @@SetErrorBadTheme	     ; >>>>>>||>>>>>>
    302	02A6					     @@ContinueHere10:		     ;	     ||
    303										     ;	     ||
    304	02A6  80 2E 003Er C0			     sub byte ptr [boxTheme], 0C0h   ;	     ||
    305										     ;	     ||
    306	02AB			     @@SetColor:				     ; <<====//
    307	02AB  85 C0				     test ax, ax
    308	02AD  74 03				     jz	@@ContinueHere11
    309	02AF  EB 52 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    310	02B2					     @@ContinueHere11:
    311
    312	02B2  BB 0000				     mov bx, 0
    313	02B5  E8 015E				     call MScnNHex
    314	02B8  88 1E 003Fr			     mov byte ptr [boxColor], bl
    315	02BC  88 1E 0040r			     mov byte ptr [boxTextColor], bl
    316
    317
    318	02C0  B7 00				     mov bh, 0
    319	02C2  8A 1E 003Er			     mov bl, byte ptr [boxTheme]
    320	02C6  B9 000E				     mov cx, 0Eh
    321	02C9  3B D9				     cmp bx, cx
    322	02CB  74 03				     je	@@ThemeEColor
    323	02CD  EB 1A 90				     jmp @@LastArg		     ; ->>>>>>>>>>>>>
    324	02D0			     @@ThemeEColor:
    325	02D0  C6 06 003Er 03			     mov byte ptr [boxTheme], 03d
    326
    327	02D5  85 C0				     test ax, ax
    328	02D7  74 03				     jz	@@ContinueHere12
    329	02D9  EB 28 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    330	02DC					     @@ContinueHere12:
    331
    332	02DC  BB 0000				     mov bx, 0
    333	02DF  E8 0134				     call MScnNHex
    334	02E2  88 1E 0040r			     mov byte ptr [boxTextColor], bl
    335	02E6  EB 01 90				     jmp @@LastArg		     ; ->>>>>>>>>>>>>
    336
    337
    338	02E9			     @@LastArg:					     ; <<<<<<<<<<<<<-
    339	02E9  85 C0				     test ax, ax
    340	02EB  74 0B				     jz	@@hasText		     ; >>====\\
    341										     ;	     ||
    342	02ED  C7 46 04 0000			     mov word ptr ss:[bp + 4], 0     ;	     ||
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 7
access.asm



    343										     ;	     ||
    344	02F2  B8 0000				     mov ax, 0			     ;	     ||
    345	02F5  EB 2B 90				     jmp @@ProcEnd		     ; >-\   ||
    346	02F8					     @@hasText:			     ; <<|===//
    347	02F8				 PasswordCode:				     ;	 |
    348	02F8  C7 46 04 0001			     mov word ptr ss:[bp + 4], 1     ;	 |	     ;!!! C746040100
    349						     ; db 07				    ;	|
    350						     ; db 07				    ;	|
    351						     ; db 07				    ;	|
    352						     ; db 07				    ;	|
    353						     ; db 07				    ;	|
    354						     ; db 07				    ;	|
    355						     ; db 07				    ;	|
    356						     ; db 07				    ;	|
    357						     ; db 07				    ;	|
    358						     ; db 07				    ;	|
    359						     ; db 07				    ;	|
    360						     ; db 07				    ;	|
    361						     ; db 07				    ;	|
    362						     ; db 07				    ;	|
    363						     ; db 07				    ;	|
    364						     ; db 07				    ;	|
    365						     ; db 07				    ;	|
    366						     ; db 07				    ;	|
    367										     ;	 |
    368	02FD  B8 0000				     mov ax, 0			     ;	 |
    369	0300  EB 20 90				     jmp @@ProcEnd		     ; >-\
    370	0303			     @@SetErrorNoArg:				     ; <<|<<<<<<<<<<<
    371	0303  B8 0239				     mov ax, 0239h		     ; Error code: No argument (more expected) : 239
    372	0306  B6 0C				     mov dh, 00Ch		     ;	 |
    373	0308  BB 0286				     mov bx, 160d*4+3d*2	     ;	 |
    374	030B  E8 00A6				     call PrintNHex		     ;	 |
    375	030E  B8 0239				     mov ax, 0239h		     ;	 |
    376										     ;	 |
    377										     ;	 |
    378	0311  EB 0F 90				     jmp @@ProcEnd		     ; >-\
    379	0314			     @@SetErrorBadTheme:			     ; <<|<<<<<<<<<<<
    380	0314  B8 0240				     mov ax, 0240h		     ; Error code: No argument (more expected) : 240
    381	0317  B6 0C				     mov dh, 00Ch		     ;	 |
    382	0319  BB 0286				     mov bx, 160d*4+3d*2	     ;	 |
    383	031C  E8 0095				     call PrintNHex		     ;	 |
    384	031F  B8 0240				     mov ax, 0240h		     ;	 |
    385										     ;	 |
    386										     ;	 |
    387	0322			     @@ProcEnd:					     ; <-/
    388	0322  5D				     pop bp			     ; Stack frame
    389	0323  C3				     ret
    390	0324			     GetArgs	     endp
    391
    392				     ;------------------------------------------------
    393				     ;------------------------------------------------
    394
    395
    396				     ;------------------------------------------------
    397				     ; Scans the password
    398				     ;------------------------------------------------
    399				     ; Entry:	     none
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 8
access.asm



    400				     ;
    401				     ; Expects:
    402				     ;
    403				     ; Exit:
    404				     ;
    405				     ; Destroys:     AX	CL Si
    406				     ;------------------------------------------------
    407				     ;------------------------------------------------
    408	0324			     ScanPassword    proc
    409
    410	0324  BF 0375r				     mov di, offset PasswordBuffer
    411
    412	0327			     @@ScanDigit:				     ; <-------------------------\
    413										     ;				 |
    414	0327  B4 01				     mov ah, 01h		     ; getc -> al		 |
    415	0329  CD 21				     int 21h			     ; ^			 |
    416										     ;				 |
    417	032B  3C 0D				     cmp al, 13d		     ; Stop scan if enter	 |
    418	032D  74 06				     je	@@EndScanDigit		     ; >>========================|=======\\
    419										     ;				 |	 ||
    420	032F  2E: 88 05				     mov byte ptr cs:[di], al	     ;				 |	 ||
    421	0332  47				     inc di			     ;				 |	 ||
    422										     ;				 |	 ||
    423						     ; mov cl, al		       ; Store al to cl		   |	   ||
    424										     ;				 |	 ||
    425						     ; mov ax, bx		       ; bx *= 10		   |	   ||
    426						     ; mov si, 10d		       ; ^			   |	   ||
    427						     ; mul si			       ; ^			   |	   ||
    428						     ; mov bx, ax		       ; ^			   |	   ||
    429										     ;				 |	 ||
    430						     ; mov al, cl		       ; Retore	al from	cl	   |	   ||
    431										     ;				 |	 ||
    432						     ; sub al, "0"		       ; ASCII "0" offset	   |	   ||
    433										     ;				 |	 ||
    434						     ; mov ah, 0d		       ; bx += al		   |	   ||
    435						     ; add bx, ax		       ; ^			   |	   ||
    436										     ;				 |	 ||
    437	0333  EB F2				     jmp @@ScanDigit		     ; >-------------------------/	 ||
    438										     ;					 ||
    439	0335			     @@EndScanDigit:				     ; <<================================//
    440	0335  C3				     ret
    441
    442	0336			     ScanPassword    endp
    443
    444				     ;------------------------------------------------
    445				     ;------------------------------------------------
    446
    447
    448				     ;------------------------------------------------
    449				     ; Calculate video mem offset by position
    450				     ;------------------------------------------------
    451				     ; Entry:	     CH	= heightPosition
    452				     ;		     CL	= widthPosition
    453				     ;
    454				     ; Expects:	     None
    455				     ;
    456				     ; Exit:	     BX	= start	addr to	draw
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 9
access.asm



    457				     ;
    458				     ; Destroys:     AX
    459				     ;------------------------------------------------
    460				     ; Stack frame:
    461				     ;		     ...
    462				     ;		     retAddr	 []
    463				     ;		     ...
    464				     ;------------------------------------------------
    465
    466	0336			     CalculateVidMemPos	 proc
    467						     ; push bp
    468						     ; mov bp, sp		       ; Complete stack	frame
    469
    470
    471						     ; bx = 160d * ch +	2 * cl
    472	0336  B7 00				     mov bh, 0
    473	0338  8A D9				     mov bl, cl
    474	033A  D1 E3				     sal bx, 1
    475
    476	033C  B8 00A0				     mov ax, 160d
    477	033F  F6 E5				     mul ch
    478	0341  03 D8				     add bx, ax
    479
    480						     ; mov ax, bx
    481						     ; mov bx, 80d
    482						     ; call PrintNDec
    483
    484
    485						     ; pop bp			       ; Stack frame
    486	0343  C3				     ret
    487	0344			     CalculateVidMemPos	 endp
    488
    489				     ;------------------------------------------------
    490				     ;------------------------------------------------
    491
    492
    493				     ;------------------------------------------------
    494				     ; Count the length	of the 0Dh-terminated string (str)
    495				     ;------------------------------------------------
    496				     ; Entry:	     ES:DI = str
    497				     ;
    498				     ; Expects:	     DF	= 0 (CLD)
    499				     ;
    500				     ; Exit:	     CX	= length
    501				     ;
    502				     ; Destroys:     AL	DI
    503				     ;------------------------------------------------
    504				     ; Stack frame:
    505				     ;		     ...
    506				     ;		     retAddr	 []
    507				     ;		     ...
    508				     ;------------------------------------------------
    509				     ;Направление просмотра	 зависит	 от флага		    +
    510				     направления DF,	значение  которого  можно	менять  с    +
    511				     помощью команд CLD (DF:=0) и	STD (DF:=1).
    512
    513	0344			     StrLen	     proc
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 10
access.asm



    514						     ; push bp
    515						     ; mov bp, sp		       ; Complete stack	frame
    516
    517						     ; mov al, 00Dh		       ; AL = terminator
    518	0344  B0 90				     mov al, 090h		     ; AL = terminator
    519	0346  33 C9				     xor cx, cx			     ; CX = 0
    520
    521	0348			     @@CountStep:				     ; <-------------------------\
    522	0348  41				     inc cx			     ;				 |
    523	0349  AE				     scasb			     ;				 |
    524	034A  75 FC				     jne @@CountStep		     ; >-------------------------/
    525
    526	034C  49				     dec cx
    527
    528						     ; pop bp			       ; Stack frame
    529	034D  C3				     ret
    530	034E			     StrLen	     endp
    531
    532				     ;------------------------------------------------
    533				     ;------------------------------------------------
    534
    535
    536				     ;------------------------------------------------
    537				     ; Checks password correctness
    538				     ;------------------------------------------------
    539				     ; Entry:	     None
    540				     ;
    541				     ; Expects:	     cs:si -> password
    542				     ;
    543				     ; Exit:	     AX	= 1 if correct
    544				     ;
    545				     ; Destroys:     BX	SI DI
    546				     ;------------------------------------------------
    547				     ; Stack frame:
    548				     ;		     ...
    549				     ;		     retAddr	 []
    550				     ;		     ...
    551				     ;------------------------------------------------
    552				     ;Направление просмотра	 зависит	 от флага		    +
    553				     направления DF,	значение  которого  можно	менять  с    +
    554				     помощью команд CLD (DF:=0) и	STD (DF:=1).
    555	      =0004		     PasswordLength = 4				     ; C746
    556	      =0006		     PasswordBufLength = 6
    557
    558	034E			     CheckPassword   proc
    559						     ; push bp
    560						     ; mov bp, sp		       ; Complete stack	frame
    561
    562
    563	034E  BF 0375r				     mov di, offset PasswordBuffer
    564						     ; mov si, cs:[0239h]; ~~ 2E8B36 3902
    565						     ; db 02Eh,	08Bh, 036h
    566				     ; PasswordAddr:   dw offset PasswordTray
    567
    568						     ; mov si, 0239h; ~~ BE 3902
    569	0351  BE				     db	0BEh
    570	0352  037Br		     PasswordAddr:   dw	offset PasswordTray
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 11
access.asm



    571
    572
    573	0354  B9 0004				     mov cx, PasswordLength
    574	0357  B8 0001				     mov ax, 1
    575	035A				 @@Step:				     ; <-------------------------\
    576										     ;				 |
    577										     ;				 |
    578	035A  2E: 80 3D	90			     cmp byte ptr cs:[di], 090h	     ;				 |
    579	035E  74 21				     je	@@PasswordEnd		     ; >---------\		 |
    580	0360  2E: 8A 1D				     mov bl, byte ptr cs:[di]	     ;		  \		 |
    581	0363  2E: 38 1C				     cmp byte ptr cs:[si], bl	     ;		   \		 |
    582	0366  75 07				     jne @@WrongPassword	     ; >>====\\	    \		 |
    583										     ;	     ||	     \		 |
    584	0368  47				     inc di			     ;	     ||	      \		 |
    585	0369  46				     inc si			     ;	     ||	       \	 |
    586	036A  E2 EE				     loop @@Step		     ; >-----++---------\--------/
    587										     ;	     ||		 \
    588	036C  EB 13 90				     jmp @@PasswordEnd		     ; >-----++----------->------\
    589	036F					 @@WrongPassword:		     ; <<====//			 |
    590	036F  B8 0000				     mov ax, 0			     ;				 |
    591										     ;				 |
    592	0372  EB 0D 90				     jmp @@PasswordEnd		     ; >-------------------------\
    593	0375					 PasswordBuffer:		     ;				 |
    594	0375  06*(90)				     db	PasswordBufLength DUP(90h)   ;				 |
    595	037B					 PasswordTray:			     ;				 |
    596	037B  41 64 6D 69 6E			     db	"Admin"			     ;				 |
    597	0380  01*(90)				     db	(PasswordBufLength - 5)	DUP(90h);			 |
    598	0381					 @@PasswordEnd:			     ; <-------------------------/
    599
    600						     ; pop bp			       ; Stack frame
    601	0381  C3				     ret
    602	0382			     CheckPassword   endp
    603
    604				     ;------------------------------------------------
    605				     ;------------------------------------------------
    606
    607
    608				     include ..\LianLib\ScanNDec.asm
1   609				     ;------------------------------------------------
1   610				     ; Scans number as decimal
1   611				     ;------------------------------------------------
1   612				     ; Entry:	     none
1   613				     ;
1   614				     ; Expects:	     BX	= 0
1   615				     ;
1   616				     ; Exit:	     BX	= number to print
1   617				     ;
1   618				     ; Destroys:     AX	CL Si
1   619				     ;------------------------------------------------
1   620				     ;------------------------------------------------
1   621	0382			     ScanNDec	     proc
1   622
1   623	0382			     @@ScanDigit:				     ; <-------------------------\
1   624										     ;				 |
1   625	0382  B4 01				     mov ah, 01h		     ; getc -> al		 |
1   626	0384  CD 21				     int 21h			     ; ^			 |
1   627										     ;				 |
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 12
access.asm



1   628	0386  3C 0D				     cmp al, 13d		     ; Stop scan if enter	 |
1   629	0388  74 15				     je	@@EndScanDigit		     ; >>========================|=======\\
1   630										     ;				 |	 ||
1   631	038A  8A C8				     mov cl, al			     ; Store al	to cl		 |	 ||
1   632										     ;				 |	 ||
1   633	038C  8B C3				     mov ax, bx			     ; bx *= 10			 |	 ||
1   634	038E  BE 000A				     mov si, 10d		     ; ^			 |	 ||
1   635	0391  F7 E6				     mul si			     ; ^			 |	 ||
1   636	0393  8B D8				     mov bx, ax			     ; ^			 |	 ||
1   637										     ;				 |	 ||
1   638	0395  8A C1				     mov al, cl			     ; Retore al from cl	 |	 ||
1   639										     ;				 |	 ||
1   640	0397  2C 30				     sub al, "0"		     ; ASCII "0" offset		 |	 ||
1   641										     ;				 |	 ||
1   642	0399  B4 00				     mov ah, 0d			     ; bx += al			 |	 ||
1   643	039B  03 D8				     add bx, ax			     ; ^			 |	 ||
1   644										     ;				 |	 ||
1   645	039D  EB E3				     jmp @@ScanDigit		     ; >-------------------------/	 ||
1   646										     ;					 ||
1   647	039F			     @@EndScanDigit:				     ; <<================================//
1   648	039F  C3				     ret
1   649
1   650	03A0			     ScanNDec	     endp
1   651
1   652				     ;------------------------------------------------
1   653				     ;------------------------------------------------
1   654
    655				     include ..\LianLib\PrntNBin.asm
1   656				     ;------------------------------------------------
1   657				     ; Prints number as	binary to vidmem
1   658				     ;------------------------------------------------
1   659				     ; Entry:	     AX	= number to print
1   660				     ;		     BX	= start	addr to	print
1   661				     ;
1   662				     ; Expects:	     ES	-> Video segment
1   663				     ;		     DH	= color	code
1   664				     ;
1   665				     ; Exit:	     None
1   666				     ;
1   667				     ; Destroys:     AX	BX CX DL
1   668				     ;------------------------------------------------
1   669				     ;------------------------------------------------
1   670	03A0			     PrintNBin	     proc
1   671
1   672	03A0  B9 0010				     mov cx, 16d		     ; 16 bit in 2 byte	in ax
1   673
1   674	03A3			     @@PrintDigit:				     ; <-------------------------\
1   675										     ;				 |
1   676	03A3  B2 01				     mov dl, 00000001b		     ; Mask			 |
1   677	03A5  22 D0				     and dl, al			     ;				 |
1   678	03A7  80 C2 30				     add dl, 30h		     ; ASCII "0" offset		 |
1   679										     ;				 |
1   680	03AA  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   681										     ;				 |
1   682	03AD  4B				     dec bx			     ; Next digit		 |
1   683	03AE  4B				     dec bx			     ; ^			 |
1   684										     ;				 |
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 13
access.asm



1   685	03AF  D1 E8				     shr ax, 1d			     ; ax >> 1			 |
1   686										     ;				 |
1   687	03B1  E2 F0				     loop @@PrintDigit		     ; >-------------------------/
1   688
1   689	03B3  C3				     ret
1   690
1   691	03B4			     PrintNBin	     endp
1   692
1   693				     ;------------------------------------------------
1   694				     ;------------------------------------------------
1   695
    696				     include ..\LianLib\PrntNHex.asm
1   697				     ;------------------------------------------------
1   698				     ; Prints number as	hexagen	to vidmem
1   699				     ;------------------------------------------------
1   700				     ; Entry:	     AX	= number to print
1   701				     ;		     BX	= start	addr to	print
1   702				     ;
1   703				     ; Expects:	     ES	-> Video segment
1   704				     ;		     DH	= color	code
1   705				     ;
1   706				     ; Exit:	     None
1   707				     ;
1   708				     ; Destroys:     AX	BX CX DL Si
1   709				     ;------------------------------------------------
1   710				     ;------------------------------------------------
1   711	03B4			     PrintNHex	     proc
1   712
1   713	03B4  B9 0004				     mov cx, 4d			     ; 4 digits	in 2 byte in ax
1   714
1   715	03B7			     @@PrintDigit:				     ; <-------------------------\
1   716										     ;				 |
1   717	03B7  B2 0F				     mov dl, 00001111b		     ; Mask			 |
1   718	03B9  22 D0				     and dl, al			     ;				 |
1   719										     ;				 |
1   720	03BB  8B F2				     mov si, dx			     ; dl -> si			 |
1   721	03BD  83 E6 0F				     and si, 0Fh		     ;				 |
1   722										     ;				 |
1   723	03C0  8A 94 0000r			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
1   724										     ;				 |
1   725	03C4  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   726										     ;				 |
1   727	03C7  4B				     dec bx			     ; Next digit		 |
1   728	03C8  4B				     dec bx			     ; ^			 |
1   729										     ;				 |
1   730	03C9  C1 E8 04				     shr ax, 4d			     ; ax >> 4			 |
1   731										     ;				 |
1   732	03CC  E2 E9				     loop @@PrintDigit		     ; >-------------------------/
1   733
1   734	03CE  C3				     ret
1   735
1   736	03CF			     PrintNHex	     endp
1   737
1   738				     ;------------------------------------------------
1   739				     ;------------------------------------------------
1   740
    741				     include ..\LianLib\PrntNDec.asm
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 14
access.asm



1   742				     ;------------------------------------------------
1   743				     ; Prints number as	decimal	to vidmem
1   744				     ;------------------------------------------------
1   745				     ; Entry:	     AX	= number to print
1   746				     ;		     BX	= start	addr to	print
1   747				     ;
1   748				     ; Expects:	     ES	-> Video segment
1   749				     ;		     DH	= color	code
1   750				     ;
1   751				     ; Exit:	     None
1   752				     ;
1   753				     ; Destroys:     AX	BX CX DL Si
1   754				     ;------------------------------------------------
1   755				     ;------------------------------------------------
1   756	03CF			     PrintNDec	     proc
1   757
1   758	03CF  B9 0005				     mov cx, 5d			     ; 5 digits	in 2 byte in ax
1   759
1   760	03D2			     @@PrintDigit:				     ; <-------------------------\
1   761	03D2  8A EE				     mov ch, dh			     ; Store dh	to ch		 |
1   762										     ;				 |
1   763	03D4  BA 0000				     mov dx, 0d			     ; for division		 |
1   764	03D7  BE 000A				     mov si, 10d		     ; ax/10 ->	ax &		 |
1   765	03DA  F7 F6				     div si			     ; & ax%10 -> dx		 | !!! dx < 10
1   766										     ;				 |
1   767	03DC  8B F2				     mov si, dx			     ; dl -> si			 |
1   768										     ;				 |
1   769	03DE  8A 94 0000r			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
1   770										     ;				 |
1   771	03E2  8A F5				     mov dh, ch			     ; Restore dh from ch	 |
1   772	03E4  B5 00				     mov ch, 0			     ; ^			 |
1   773										     ;				 |
1   774	03E6  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   775										     ;				 |
1   776	03E9  4B				     dec bx			     ; Next digit		 |
1   777	03EA  4B				     dec bx			     ; ^			 |
1   778										     ;				 |
1   779										     ;				 |
1   780	03EB  E2 E5				     loop @@PrintDigit		     ; >-------------------------/
1   781
1   782	03ED  C3				     ret
1   783
1   784	03EE			     PrintNDec	     endp
1   785
1   786				     ;------------------------------------------------
1   787				     ;------------------------------------------------
1   788
    789				     include ..\LianLib\MScnNDec.asm
1   790				     ;------------------------------------------------
1   791				     ; Scans number as decimal from string in memory
1   792				     ;------------------------------------------------
1   793				     ; Entry:	     DS:SI = memory ptr
1   794				     ;
1   795				     ; Expects:	     BX	= 0
1   796				     ;		     DL	= terminator char 1
1   797				     ;		     DH	= terminator char 2 (TerminatorEnd)
1   798				     ;		     DF	= 0 (CLD) [or backward]
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 15
access.asm



1   799				     ;
1   800				     ; Exit:	     BX	= scanned number
1   801				     ;		     SI	to next	word
1   802				     ;		     AX	= 0 if terminator, 1 if	TerminatorEnd
1   803				     ;
1   804				     ; Destroys:     None
1   805				     ;------------------------------------------------
1   806				     ;------------------------------------------------
1   807	03EE			     MScnNDec	     proc
1   808
1   809	03EE			     @@ScanDigit:				     ; <-------------------------\
1   810										     ;				 |
1   811						     ; mov ah, 01h		     ; getc -> al		 |
1   812						     ; int 21h			     ; ^			 |
1   813	03EE  AC				     lodsb			     ; char -> al		 |
1   814										     ;				 |
1   815						     ; cmp al, 13d		     ; Stop scan if enter	 |
1   816	03EF  3A C2				     cmp al, dl			     ; Stop scan if terminator	 |
1   817	03F1  74 19				     je	@@TermScanDigit		     ; >>========================|=======\\
1   818	03F3  3A C6				     cmp al, dh			     ;				 |	 ||
1   819	03F5  74 1B				     je	@@TerminatorEndScanDigit     ; >>========================|===========\\
1   820										     ;				 |	 ||  ||
1   821						     ; mov cl, al		     ; Store al	to cl		 |	 ||  ||
1   822	03F7  50				     push ax			     ; Store ax			 |	 ||  ||
1   823	03F8  52				     push dx			     ; Store dx			 |	 ||  ||
1   824										     ;				 |	 ||  ||
1   825	03F9  8B C3				     mov ax, bx			     ; bx *= 10			 |	 ||  ||
1   826	03FB  BA 000A				     mov dx, 10d		     ; ^			 |	 ||  ||
1   827	03FE  F7 E2				     mul dx			     ; ^			 |	 ||  ||
1   828	0400  8B D8				     mov bx, ax			     ; ^			 |	 ||  ||
1   829										     ;				 |	 ||  ||
1   830	0402  5A				     pop dx			     ; Restore dx		 |	 ||  ||
1   831	0403  58				     pop ax			     ; Restore ax		 |	 ||  ||
1   832						     ; mov al, cl		     ; Restore al from cl	 |	 ||  ||
1   833										     ;				 |	 ||  ||
1   834	0404  2C 30				     sub al, "0"		     ; ASCII "0" offset		 |	 ||  ||
1   835										     ;				 |	 ||  ||
1   836	0406  B4 00				     mov ah, 0d			     ; bx += al			 |	 ||  ||
1   837	0408  03 D8				     add bx, ax			     ; ^			 |	 ||  ||
1   838										     ;				 |	 ||  ||
1   839	040A  EB E2				     jmp @@ScanDigit		     ; >-------------------------/	 ||  ||
1   840										     ;					 ||  ||
1   841	040C			     @@TermScanDigit:				     ; <<================================//  ||
1   842	040C  B8 0000				     mov ax, 0			     ;					     ||
1   843	040F  EB 04 90				     jmp @@EndProc		     ; >-----\				     ||
1   844	0412			     @@TerminatorEndScanDigit:			     ; <<====|===============================//
1   845	0412  B8 0001				     mov ax, 1			     ;	     |
1   846	0415			     @@EndProc:					     ; <-----/
1   847	0415  C3				     ret
1   848
1   849	0416			     MScnNDec	     endp
1   850
1   851				     ;------------------------------------------------
1   852				     ;------------------------------------------------
1   853
    854				     include ..\LianLib\MScnNHex.asm
1   855				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 16
access.asm



1   856				     ; Scans number as hexagen from string in memory
1   857				     ;------------------------------------------------
1   858				     ; Entry:	     DS:SI = memory ptr
1   859				     ;
1   860				     ; Expects:	     BX	= 0
1   861				     ;		     DL	= terminator char 1
1   862				     ;		     DH	= terminator char 2 (TerminatorEnd)
1   863				     ;		     DF	= 0 (CLD) [or backward]
1   864				     ;
1   865				     ; Exit:	     BX	= scanned number
1   866				     ;		     SI	to next	word
1   867				     ;		     AX	= 0 if terminator, 1 if	TerminatorEnd
1   868				     ;
1   869				     ; Destroys:     None
1   870				     ;------------------------------------------------
1   871				     ;------------------------------------------------
1   872	0416			     MScnNHex	     proc
1   873
1   874	0416			     @@ScanDigit:				     ; <-------------------------\
1   875										     ;				 |
1   876						     ; mov ah, 01h		     ; getc -> al		 |
1   877						     ; int 21h			     ; ^			 |
1   878	0416  AC				     lodsb			     ; char -> al		 |
1   879										     ;				 |
1   880						     ; cmp al, 13d		     ; Stop scan if enter	 |
1   881	0417  3A C2				     cmp al, dl			     ; Stop scan if terminator	 |
1   882	0419  74 43				     je	@@TermScanDigit		     ; >>========================|=======\\
1   883	041B  3A C6				     cmp al, dh			     ;				 |	 ||
1   884	041D  74 45				     je	@@TerminatorEndScanDigit     ; >>========================|===========\\
1   885										     ;				 |	 ||  ||
1   886										     ;				 |	 ||  ||
1   887	041F  C1 E3 04				     shl bx, 4d			     ; bx *= 16			 |	 ||  ||
1   888										     ;				 |	 ||  ||
1   889										     ;				 |	 ||  ||
1   890	0422  53				     push bx			     ; Store bx			 |	 ||  ||
1   891										     ;				 |	 ||  ||
1   892	0423  BB 0061				     mov bx, "a"		     ;				 |	 ||  ||
1   893	0426  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   894	0428  7C 0B				     jl	@@Nextaf		     ;				 |	 ||  ||
1   895	042A  BB 0066				     mov bx, "f"		     ;				 |	 ||  ||
1   896	042D  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   897	042F  7F 04				     jg	@@Nextaf		     ;				 |	 ||  ||
1   898	0431  2C 61				     sub al, "a"		     ; ASCII "0" offset		 |	 ||  ||
1   899	0433  04 0A				     add al, 0ah		     ; ^			 |	 ||  ||
1   900	0435			     @@Nextaf:					     ;				 |	 ||  ||
1   901	0435  BB 0041				     mov bx, "A"		     ;				 |	 ||  ||
1   902	0438  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   903	043A  7C 0B				     jl	@@NextAFCAPS		     ;				 |	 ||  ||
1   904	043C  BB 0046				     mov bx, "F"		     ;				 |	 ||  ||
1   905	043F  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   906	0441  7F 04				     jg	@@NextAFCAPS		     ;				 |	 ||  ||
1   907	0443  2C 41				     sub al, "A"		     ; ASCII "0" offset		 |	 ||  ||
1   908	0445  04 0A				     add al, 0Ah		     ; ^			 |	 ||  ||
1   909	0447			     @@NextAFCAPS:				     ;				 |	 ||  ||
1   910	0447  BB 0030				     mov bx, "0"		     ;				 |	 ||  ||
1   911	044A  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   912	044C  7C 09				     jl	@@Next09		     ;				 |	 ||  ||
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 17
access.asm



1   913	044E  BB 0039				     mov bx, "9"		     ;				 |	 ||  ||
1   914	0451  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   915	0453  7F 02				     jg	@@Next09		     ;				 |	 ||  ||
1   916	0455  2C 30				     sub al, "0"		     ; ASCII "0" offset		 |	 ||  ||
1   917						     ; add al, 0		     ; ^			 |	 ||  ||
1   918	0457			     @@Next09:					     ;				 |	 ||  ||
1   919										     ;				 |	 ||  ||
1   920	0457  5B				     pop bx			     ; Restore bx		 |	 ||  ||
1   921										     ;				 |	 ||  ||
1   922	0458  B4 00				     mov ah, 0d			     ; bx += al			 |	 ||  ||
1   923	045A  03 D8				     add bx, ax			     ; ^			 |	 ||  ||
1   924										     ;				 |	 ||  ||
1   925	045C  EB B8				     jmp @@ScanDigit		     ; >-------------------------/	 ||  ||
1   926										     ;					 ||  ||
1   927	045E			     @@TermScanDigit:				     ; <<================================//  ||
1   928	045E  B8 0000				     mov ax, 0			     ;					     ||
1   929	0461  EB 04 90				     jmp @@EndProc		     ; >-----\				     ||
1   930	0464			     @@TerminatorEndScanDigit:			     ; <<====|===============================//
1   931	0464  B8 0001				     mov ax, 1			     ;	     |
1   932	0467			     @@EndProc:					     ; <-----/
1   933	0467  C3				     ret
1   934
1   935	0468			     MScnNHex	     endp
1   936
1   937				     ;------------------------------------------------
1   938				     ;------------------------------------------------
1   939
    940
    941				     include ..\LianLib\ProBox.asm
1   942				     ;------------------------------------------------
1   943				     ; Draws cool box on the screen
1   944				     ;------------------------------------------------
1   945				     ; Entry:	     BX	= start	addr to	draw
1   946				     ;		     CH	= height of box	(without frame)
1   947				     ;		     CL	= width	of box (without	frame)
1   948				     ;
1   949				     ; Expects:	     ES	-> Video segment
1   950				     ;		     DS	-> Data	segment
1   951				     ;
1   952				     ; Exit:	     None
1   953				     ;
1   954				     ; Destroys:     AX	BX (CX)	DX DI
1   955				     ;------------------------------------------------
1   956				     ; Stack frame:
1   957				     ;		     ...
1   958				     ;		     LU	char	 [bp + 20]   //	H - color attr
1   959				     ;		     _U	char	 [bp + 18]   //	L - symb attr
1   960				     ;		     RU	char	 [bp + 16]   //
1   961				     ;		     R_	char	 [bp + 14]   //
1   962				     ;		     RB	char	 [bp + 12]   //
1   963				     ;		     _B	char	 [bp + 10]   //
1   964				     ;		     LB	char	 [bp + 8]    //
1   965				     ;		     L_	char	 [bp + 6]    //
1   966				     ;		     FI	char	 [bp + 4]    //
1   967				     ;		     retAddr	 [bp + 2]
1   968				     ;		     stored BP	 [bp]
1   969				     ;		     stored CX	 [bp - 2]    //	size
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 18
access.asm



1   970				     ;		     ...
1   971				     ;------------------------------------------------
1   972
1   973	0468			     DrawBox	     proc
1   974	0468  55				     push bp
1   975	0469  8B EC				     mov bp, sp			     ; Complete	stack frame
1   976	046B  51				     push cx
1   977
1   978										     ;-------------------------------------------
1   979										     ; Upper line
1   980	046C  8B FB				     mov di, bx
1   981	046E  8B 4E FE				     mov cx, [bp - 2]
1   982	0471  B5 00				     mov ch, 0
1   983	0473  FF 76 14				     push [bp +	20]
1   984	0476  FF 76 12				     push [bp +	18]
1   985	0479  FF 76 10				     push [bp +	16]
1   986	047C  E8 0044				     call DrawLine
1   987	047F  83 C4 06				     add sp, 2*3d
1   988										     ;-------------------------------------------
1   989										     ; Middle line
1   990	0482  8B 4E FE				     mov cx, [bp - 2]
1   991	0485  B6 00				     mov dh, 0
1   992	0487  8A D5				     mov dl, ch
1   993	0489			     @@MiddleStep:				     ; <-----------------\
1   994										     ;			 |
1   995	0489  81 C3 00A0			     add bx, 160d		     ;			 |
1   996	048D  8B FB				     mov di, bx			     ;			 |
1   997	048F  8B 4E FE				     mov cx, [bp - 2]		     ;			 |
1   998	0492  B5 00				     mov ch, 0			     ;			 |
1   999	0494  FF 76 06				     push [bp +	6]		     ;			 |
1  1000	0497  FF 76 04				     push [bp +	4]		     ;			 |
1  1001	049A  FF 76 0E				     push [bp +	14]		     ;			 |
1  1002	049D  E8 0023				     call DrawLine		     ;			 |
1  1003	04A0  83 C4 06				     add sp, 2*3d		     ;			 |
1  1004	04A3  4A				     dec dx			     ;			 |
1  1005	04A4  75 E3				     jnz @@MiddleStep		     ; >-----------------/
1  1006										     ;-------------------------------------------
1  1007										     ; Bottom line
1  1008	04A6  81 C3 00A0			     add bx, 160d
1  1009	04AA  8B FB				     mov di, bx
1  1010	04AC  8B 4E FE				     mov cx, [bp - 2]
1  1011	04AF  B5 00				     mov ch, 0
1  1012	04B1  FF 76 08				     push [bp +	8]
1  1013	04B4  FF 76 0A				     push [bp +	10]
1  1014	04B7  FF 76 0C				     push [bp +	12]
1  1015	04BA  E8 0006				     call DrawLine
1  1016	04BD  83 C4 06				     add sp, 2*3d
1  1017										     ;-------------------------------------------
1  1018
1  1019	04C0  59				     pop cx
1  1020	04C1  5D				     pop bp			     ; Stack frame
1  1021	04C2  C3				     ret
1  1022	04C3			     DrawBox	     endp
1  1023
1  1024				     ;------------------------------------------------
1  1025				     ;------------------------------------------------
1  1026
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 19
access.asm



1  1027				     ; needs <include ?\LianLib\DrawLine.asm>
1  1028
   1029				     include ..\LianLib\DrawLine.asm
1  1030				     ;------------------------------------------------
1  1031				     ; Draws line on the screen	(Pattern ABB~BBC)
1  1032				     ;------------------------------------------------
1  1033				     ; Entry:	     DI	= start	addr to	draw
1  1034				     ;		     CX	= width	of line	(without A&C)
1  1035				     ;
1  1036				     ; Expects:	     ES	-> Video segment
1  1037				     ;		     DF	= 0 (CLD)
1  1038				     ;
1  1039				     ; Exit:	     None
1  1040				     ;
1  1041				     ; Destroys:     AX	CX DI
1  1042				     ;------------------------------------------------
1  1043				     ; Stack frame:
1  1044				     ;		     ...
1  1045				     ;		     'A' char	 [bp + 8]    //	H - color attr
1  1046				     ;		     'B' char	 [bp + 6]    //	L - symb attr
1  1047				     ;		     'C' char	 [bp + 4]    //
1  1048				     ;		     retAddr	 [bp + 2]
1  1049				     ;		     stored BP	 [bp]
1  1050				     ;		     ...
1  1051				     ;------------------------------------------------
1  1052				     ;Направление просмотра	 зависит	 от флага		    +
   1053				     направления DF,	значение  которого  можно	менять  с    +
   1054				     помощью команд CLD (DF:=0) и	STD (DF:=1).
1  1055
1  1056	04C3			     DrawLine	     proc
1  1057	04C3  55				     push bp
1  1058	04C4  8B EC				     mov bp, sp			     ; Complete	stack frame
1  1059
1  1060	04C6  8B 46 08				     mov ax, [bp + 8]
1  1061	04C9  AB				     stosw
1  1062
1  1063	04CA  8B 46 06				     mov ax, [bp + 6]
1  1064	04CD  F3> AB				     rep stosw
1  1065
1  1066	04CF  8B 46 04				     mov ax, [bp + 4]
1  1067	04D2  AB				     stosw
1  1068
1  1069	04D3  5D				     pop bp			     ; Stack frame
1  1070	04D4  C3				     ret
1  1071	04D5			     DrawLine	     endp
1  1072
1  1073				     ;------------------------------------------------
1  1074				     ;------------------------------------------------
1  1075
   1076
   1077	04D5			     .data
   1078				     include ..\LianLib\Alphabet.asm
1  1079	0000  30 31 32 33 34 35	36+  Alphabet:	     db	"0123456789ABCDEF"	     ; Alphabet	for printing (Thanks Ilya)
   1080	      37 38 39 41 42 43	44+
   1081	      45 46
1  1082	0010  C9 CD BB BA BC C8	     BoxSymbols:     db	0c9h, 0cdh, 0bbh, 0bah,	0bch, 0c8h ; "╔═╗║╝╚"
1  1083
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 20
access.asm



1  1084	0016			     BoxAssetStart:
1  1085	0016  20 DA C9 00	     BoxAssetLU:     db	020h, 0dah, 0c9h, 000h
1  1086	001A			     BoxAssetStep:
1  1087	001A  20 C4 CD 00	     BoxAsset_U:     db	020h, 0c4h, 0cdh, 000h
1  1088	001E  20 BF BB 00	     BoxAssetRU:     db	020h, 0bfh, 0bbh, 000h
1  1089	0022  20 B3 BA 00	     BoxAssetR_:     db	020h, 0b3h, 0bah, 000h
1  1090	0026  20 D9 BC 00	     BoxAssetRB:     db	020h, 0d9h, 0bch, 000h
1  1091	002A  20 C4 CD 00	     BoxAsset_B:     db	020h, 0c4h, 0cdh, 000h
1  1092	002E  20 C0 C8 00	     BoxAssetLB:     db	020h, 0c0h, 0c8h, 000h
1  1093	0032  20 B3 BA 00	     BoxAssetL_:     db	020h, 0b3h, 0bah, 000h
1  1094	0036  20 20 20 00	     BoxAssetFI:     db	020h, 020h, 020h, 000h
1  1095	003A			     BoxAssetEnd:
1  1096
1  1097				     ; 0:    1:┌─┐ 2:╔═╗ 3:usr
1  1098				     ;	       │ │	 ║ ║   chr
1  1099				     ;	       └─┘   ╚═╝
1  1100
   1101
   1102	003A  14		     boxHeightPos:   db	20
   1103	003B  1E		     boxWidthPos:    db	30
   1104	003C  03		     boxHeight:	     db	3
   1105	003D  14		     boxWidth:	     db	20
   1106	003E  02		     boxTheme:	     db	2
   1107	003F  0A		     boxColor:	     db	00Ah
   1108	0040  0A		     boxTextColor:   db	00Ah
   1109
   1110				     end	     Start
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 21
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/13/23"
??FILENAME			  Text	 "access  "
??TIME				  Text	 "13:57:33"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CONTINUEHERE1			  Near	 DGROUP:01EC
@@CONTINUEHERE10		  Near	 DGROUP:02A6
@@CONTINUEHERE11		  Near	 DGROUP:02B2
@@CONTINUEHERE12		  Near	 DGROUP:02DC
@@CONTINUEHERE2			  Near	 DGROUP:0204
@@CONTINUEHERE3			  Near	 DGROUP:0215
@@CONTINUEHERE4			  Near	 DGROUP:0226
@@CONTINUEHERE5			  Near	 DGROUP:0237
@@CONTINUEHERE6			  Near	 DGROUP:0288
@@COUNTSTEP			  Near	 DGROUP:0348
@@ENDPROC			  Near	 DGROUP:0415
@@ENDPROC			  Near	 DGROUP:0467
@@ENDSCANDIGIT			  Near	 DGROUP:0335
@@ENDSCANDIGIT			  Near	 DGROUP:039F
@@HASTEXT			  Near	 DGROUP:02F8
@@LASTARG			  Near	 DGROUP:02E9
@@LASTLINE			  Near	 DGROUP:01C7
@@MIDDLESTEP			  Near	 DGROUP:0489
@@NEXT09			  Near	 DGROUP:0457
@@NEXTAF			  Near	 DGROUP:0435
@@NEXTAFCAPS			  Near	 DGROUP:0447
@@NOLINEBREAK			  Near	 DGROUP:01C5
@@ONECHAR			  Near	 DGROUP:01AB
@@ONESTEP			  Near	 DGROUP:0281
@@PASSWORDEND			  Near	 DGROUP:0381
@@PRINTDIGIT			  Near	 DGROUP:03A3
@@PRINTDIGIT			  Near	 DGROUP:03B7
@@PRINTDIGIT			  Near	 DGROUP:03D2
@@PROCEND			  Near	 DGROUP:0322
@@SCANDIGIT			  Near	 DGROUP:0327
@@SCANDIGIT			  Near	 DGROUP:0382
@@SCANDIGIT			  Near	 DGROUP:03EE
@@SCANDIGIT			  Near	 DGROUP:0416
@@SETCOLOR			  Near	 DGROUP:02AB
@@SETERRORBADTHEME		  Near	 DGROUP:0314
@@SETERRORNOARG			  Near	 DGROUP:0303
@@STEP				  Near	 DGROUP:035A
@@TERMINATORENDSCANDIGIT	  Near	 DGROUP:0412
@@TERMINATORENDSCANDIGIT	  Near	 DGROUP:0464
@@TERMSCANDIGIT			  Near	 DGROUP:040C
@@TERMSCANDIGIT			  Near	 DGROUP:045E
@@THEME02			  Near	 DGROUP:026F
@@THEMEC			  Near	 DGROUP:029C
@@THEMEE			  Near	 DGROUP:0277
@@THEMEECOLOR			  Near	 DGROUP:02D0
@@THEMEF			  Near	 DGROUP:0272
@@WRONGPASSWORD			  Near	 DGROUP:036F
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 22
Symbol Table



@CPU				  Text	 0707H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 ACCESS
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ALPHABET			  Near	 DGROUP:0000
ARGCOUNT			  Near	 DGROUP:0080
ARGS				  Near	 DGROUP:0081
BOXASSETEND			  Near	 DGROUP:003A
BOXASSETFI			  Near	 DGROUP:0036
BOXASSETLB			  Near	 DGROUP:002E
BOXASSETLU			  Near	 DGROUP:0016
BOXASSETL_			  Near	 DGROUP:0032
BOXASSETRB			  Near	 DGROUP:0026
BOXASSETRU			  Near	 DGROUP:001E
BOXASSETR_			  Near	 DGROUP:0022
BOXASSETSTART			  Near	 DGROUP:0016
BOXASSETSTEP			  Near	 DGROUP:001A
BOXASSET_B			  Near	 DGROUP:002A
BOXASSET_U			  Near	 DGROUP:001A
BOXCOLOR			  Near	 DGROUP:003F
BOXHEIGHT			  Near	 DGROUP:003C
BOXHEIGHTPOS			  Near	 DGROUP:003A
BOXSYMBOLS			  Near	 DGROUP:0010
BOXTEXTCOLOR			  Near	 DGROUP:0040
BOXTHEME			  Near	 DGROUP:003E
BOXWIDTH			  Near	 DGROUP:003D
BOXWIDTHPOS			  Near	 DGROUP:003B
CALCULATEVIDMEMPOS		  Near	 DGROUP:0336
CHECKPASSWORD			  Near	 DGROUP:034E
DRAWBOX				  Near	 DGROUP:0468
DRAWLINE			  Near	 DGROUP:04C3
GETARGS				  Near	 DGROUP:01DA
MSCNNDEC			  Near	 DGROUP:03EE
MSCNNHEX			  Near	 DGROUP:0416
PASSWORDADDR			  Near	 DGROUP:0352
PASSWORDBUFFER			  Near	 DGROUP:0375
PASSWORDBUFLENGTH		  Number 0006
PASSWORDCODE			  Near	 DGROUP:02F8
PASSWORDLENGTH			  Number 0004
PASSWORDTRAY			  Near	 DGROUP:037B
PRINTNBIN			  Near	 DGROUP:03A0
PRINTNDEC			  Near	 DGROUP:03CF
PRINTNHEX			  Near	 DGROUP:03B4
PRINTTEXT			  Near	 DGROUP:016E
RETURNPROGRAM			  Near	 DGROUP:0169
SCANNDEC			  Near	 DGROUP:0382
SCANPASSWORD			  Near	 DGROUP:0324
START				  Near	 DGROUP:0100
STRLEN				  Near	 DGROUP:0344
TEXTOK				  Near	 DGROUP:0260
Turbo Assembler	 Version 4.1	    03/13/23 13:57:34	    Page 23
Symbol Table




Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0041 Word	  Public  DATA
  _TEXT				  16  04D5 Word	  Public  CODE
