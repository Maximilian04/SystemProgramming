Turbo Assembler	 Version 4.1	    03/03/23 25:47:45	    Page 1
probox.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     .286
      4				     locals @@
      5
      6				     org 80h
      7	0080  ??		     ArgCount:	     db	?
      8	0081  ??		     Args:	     db	?
      9
     10				     org 100h
     11
     12				     ; probox.com 8 21 3 2 F 19	C 1A 15	10 9 7 8 3 12
     13
     14	0100			     Start:
     15
     16	0100  B8 B800				     mov ax, 0b800h		     ; адрес сегмента с		    +
     17				     видеопамятью -> es
     18	0103  8E C0				     mov es, ax			     ;
     19	0105  8C D0				     mov ax, ss			     ; Segment with stack, code, etc.
     20	0107  8E D8				     mov ds, ax			     ;
     21
     22	0109  6A 00				     push 0h			     ; textFlag
     23	010B  E8 00D0				     call GetArgs
     24	010E  85 C0				     test ax, ax
     25	0110  74 03				     jz	@@ContinueHere1
     26	0112  EB 59 90				     jmp ReturnProgram		     ; >>>>>>>>>>>>>>
     27	0115					     @@ContinueHere1:
     28						     ; push si
     29
     30						     ; mov dh, 01Ah
     31						     ; mov ah, 0
     32						     ; mov al, byte ptr	[ArgCount]
     33						     ; mov bx, 160d*17 + 160d/2	- 18d +	4d; Середина строчки
     34						     ; call PrintNDec
     35
     36	0115  B7 00				     mov bh, 0
     37	0117  8A 1E 003Er			     mov bl, byte ptr [boxTheme]
     38	011B  8A 26 003Fr			     mov ah, byte ptr [boxColor]
     39
     40	011F  8A 87 0016r			     mov al, byte ptr [BoxAssetLU + bx]
     41	0123  50				     push ax
     42	0124  8A 87 001Ar			     mov al, byte ptr [BoxAsset_U + bx]
     43	0128  50				     push ax
     44	0129  8A 87 001Er			     mov al, byte ptr [BoxAssetRU + bx]
     45	012D  50				     push ax
     46	012E  8A 87 0022r			     mov al, byte ptr [BoxAssetR_ + bx]
     47	0132  50				     push ax
     48	0133  8A 87 0026r			     mov al, byte ptr [BoxAssetRB + bx]
     49	0137  50				     push ax
     50	0138  8A 87 002Ar			     mov al, byte ptr [BoxAsset_B + bx]
     51	013C  50				     push ax
     52	013D  8A 87 002Er			     mov al, byte ptr [BoxAssetLB + bx]
     53	0141  50				     push ax
     54	0142  8A 87 0032r			     mov al, byte ptr [BoxAssetL_ + bx]
     55	0146  50				     push ax
     56	0147  8A 87 0036r			     mov al, byte ptr [BoxAssetFI + bx]
     57	014B  50				     push ax
Turbo Assembler	 Version 4.1	    03/03/23 25:47:45	    Page 2
probox.asm



     58	014C  8A 2E 003Ar			     mov ch, byte ptr [boxHeightPos]
     59	0150  8A 0E 003Br			     mov cl, byte ptr [boxWidthPos]
     60	0154  E8 01C2				     call CalculateVidMemPos
     61	0157  8A 2E 003Cr			     mov ch, byte ptr [boxHeight]
     62	015B  8A 0E 003Dr			     mov cl, byte ptr [boxWidth]
     63	015F  E8 02B5				     call DrawBox
     64	0162  83 C4 12				     add sp, 2*9d
     65
     66						     ; pop si
     67	0165  58				     pop ax			     ; textFlag
     68	0166  85 C0				     test ax, ax
     69	0168  74 03				     jz	ReturnProgram		     ; >>>>>>>>>>>>>>
     70
     71
     72	016A  E8 0005				     call PrintText
     73
     74						     ; mov dh, 00000010b	       ; Dark green on black
     75						     ; pop ax			       ; Scanned number
     76						     ; push ax			       ;
     77
     78						     ; call PrintNBin
     79
     80	016D			     ReturnProgram:				     ; <<<<<<<<<<<<<<
     81	016D  B8 4C00				     mov ax, 4c00h		     ; exit(0)
     82	0170  CD 21				     int 21h
     83
     84
     85
     86				     ;------------------------------------------------
     87				     ; Prints text into	the box
     88				     ;------------------------------------------------
     89				     ; Entry:	     None
     90				     ;
     91				     ; Expects:	     DS:SI -> text
     92				     ;
     93				     ; Exit:	     None
     94				     ;
     95				     ; Destroys:     AX	BX CX DX SI DI
     96				     ;------------------------------------------------
     97				     ; Stack frame:
     98				     ;		     ...
     99				     ;		     retAddr	 [bp + 2]
    100				     ;		     stored BP	 [bp]
    101				     ;		     text ptr	 [bp - 2]
    102				     ;		     ...
    103				     ;------------------------------------------------
    104
    105	0172			     PrintText	     proc
    106	0172  55				     push bp
    107	0173  8B EC				     mov bp, sp			     ; Complete	stack frame
    108	0175  56				     push si
    109
    110
    111	0176  06				     push es
    112	0177  8C DF				     mov di, ds			     ; ds -> es
    113	0179  8E C7				     mov es, di			     ;
    114	017B  8B FE				     mov di, si			     ; si -> di
Turbo Assembler	 Version 4.1	    03/03/23 25:47:45	    Page 3
probox.asm



    115	017D  E8 01A7				     call StrLen
    116	0180  07				     pop es			     ; restore es -> vidmem
    117	0181  8B D1				     mov dx, cx			     ; dx = text length
    118
    119	0183  8A 2E 003Ar			     mov ch, byte ptr boxHeightPos
    120	0187  80 C5 01				     add ch, 1d
    121	018A  8A 0E 003Br			     mov cl, byte ptr boxWidthPos
    122	018E  80 C1 01				     add cl, 1d
    123	0191  E8 0185				     call CalculateVidMemPos
    124
    125	0194  8B CA				     mov cx, dx			     ; cx = text length
    126	0196  8A 36 003Cr			     mov dh, byte ptr boxHeight
    127	019A  8A 16 003Dr			     mov dl, byte ptr boxWidth
    128
    129	019E  3A CA				     cmp cl, dl
    130	01A0  7D 0D				     jge @@OneChar		     ; >>====\\
    131										     ;	     ||
    132	01A2  B6 00				     mov dh, 0			     ;	     ||
    133	01A4  2A D1				     sub dl, cl			     ;	     ||
    134	01A6  D0 EA				     shr dl, 1			     ; Center offset
    135	01A8  D0 E2				     shl dl, 1			     ;	     ||
    136	01AA  03 DA				     add bx, dx			     ;	     ||
    137	01AC  EB 01 90				     jmp @@OneChar		     ; >>====\\
    138										     ;	     ||
    139										     ; <<====//
    140	01AF				 @@OneChar:				     ; <-------------------------\
    141	01AF  84 F6				     test dh, dh		     ;				 |
    142	01B1  74 18				     jz	@@LastLine		     ; >>====\\			 |
    143										     ;	     ||			 |
    144	01B3  84 D2				     test dl, dl		     ;	     ||			 |
    145	01B5  75 12				     jnz @@noLineBreak		     ;	     ||			 |
    146										     ;	     ||			 |
    147	01B7  8A 16 003Dr			     mov dl, byte ptr boxWidth	     ;	     ||			 |
    148	01BB  FE CE				     dec dh			     ;	     ||			 |
    149										     ;	     ||			 |
    150	01BD  81 C3 00A0			     add bx, 160d		     ; Next Line		 |
    151	01C1  B4 00				     mov ah, 0			     ;	     ||			 |
    152	01C3  8A C2				     mov al, dl			     ;	     ||			 |
    153	01C5  D1 E0				     shl ax, 1			     ;	     ||			 |
    154	01C7  2B D8				     sub bx, ax			     ;	     ||			 |
    155										     ;	     ||			 |
    156	01C9					 @@noLineBreak:			     ;	     ||			 |
    157	01C9  FE CA				     dec dl			     ;	     ||			 |
    158										     ;	     ||			 |
    159	01CB					 @@LastLine:			     ; <<====//			 |
    160	01CB  8A 04				     mov al, byte ptr [si]	     ;				 |
    161	01CD  26: 88 07				     mov es:[bx], al		     ;				 |
    162										     ;				 |
    163	01D0  46				     inc si			     ;				 |
    164	01D1  43				     inc bx			     ;				 |
    165										     ;				 |
    166	01D2  A0 0040r				     mov al, byte ptr [boxTextColor] ;				 |
    167	01D5  26: 88 07				     mov es:[bx], al		     ;				 |
    168	01D8  43				     inc bx			     ;				 |
    169										     ;				 |
    170	01D9  E2 D4				     loop @@OneChar		     ; >-------------------------/
    171
Turbo Assembler	 Version 4.1	    03/03/23 25:47:45	    Page 4
probox.asm



    172
    173
    174	01DB  5D				     pop bp
    175	01DC  5D				     pop bp			     ; Stack frame
    176	01DD  C3				     ret
    177	01DE			     PrintText	     endp
    178
    179				     ;------------------------------------------------
    180				     ;------------------------------------------------
    181
    182
    183				     ;------------------------------------------------
    184				     ; Gets information	from cmd argument
    185				     ;------------------------------------------------
    186				     ; Entry:	     None
    187				     ;
    188				     ; Expects:	     None
    189				     ;
    190				     ; Exit:	     AX	= 0 if no errors, 1 contrary
    191				     ;		     textFlag =	1 if DS:SI -> box text,	0 if no	text
    192				     ;
    193				     ; Destroys:     BX	CX SI DI (DH if	error)
    194				     ;------------------------------------------------
    195				     ; Stack frame:
    196				     ;		     ...
    197				     ;		     textFlag	 [bp + 4]
    198				     ;		     retAddr	 [bp + 2]
    199				     ;		     stored BP	 [bp]
    200				     ;		     ...
    201				     ;------------------------------------------------
    202
    203	01DE			     GetArgs	     proc
    204	01DE  55				     push bp
    205	01DF  8B EC				     mov bp, sp			     ; Complete	stack frame
    206
    207
    208	01E1  B4 00				     mov ah, 0			     ; At least	one argument!
    209	01E3  A0 0080r				     mov al, byte ptr [ArgCount]     ;
    210	01E6  BB 0002				     mov bx, 2d			     ;
    211	01E9  3B C3				     cmp ax, bx			     ;
    212	01EB  7D 03				     jnl @@ContinueHere1	     ;
    213	01ED  E9 0108				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    214	01F0					     @@ContinueHere1:		     ;
    215
    216								 ; ONE STEP:
    217								 ; arg -> bx
    218								 ; if the last 1 -> ax
    219								 ; DS:SI -> next
    220	01F0  B2 20				     mov dl, 020h		     ; 20h Terminator
    221	01F2  B6 0D				     mov dh, 00Dh		     ; 0Dh TerminatorEnd
    222	01F4  BE 0082r				     mov si, offset Args + 1	     ; First argument
    223
    224	01F7  BB 0000				     mov bx, 0
    225	01FA  E8 01A0				     call MScnNDec
    226	01FD  88 1E 003Ar			     mov byte ptr [boxHeightPos], bl
    227	0201  85 C0				     test ax, ax
    228	0203  74 03				     jz	@@ContinueHere2
Turbo Assembler	 Version 4.1	    03/03/23 25:47:45	    Page 5
probox.asm



    229	0205  E9 00F0				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    230	0208					     @@ContinueHere2:
    231
    232
    233	0208  BB 0000				     mov bx, 0
    234	020B  E8 018F				     call MScnNDec
    235	020E  88 1E 003Br			     mov byte ptr [boxWidthPos], bl
    236	0212  85 C0				     test ax, ax
    237	0214  74 03				     jz	@@ContinueHere3
    238	0216  E9 00DF				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    239	0219					     @@ContinueHere3:
    240
    241	0219  BB 0000				     mov bx, 0
    242	021C  E8 017E				     call MScnNDec
    243	021F  88 1E 003Cr			     mov byte ptr [boxHeight], bl
    244	0223  85 C0				     test ax, ax
    245	0225  74 03				     jz	@@ContinueHere4
    246	0227  E9 00CE				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    247	022A					     @@ContinueHere4:
    248
    249	022A  BB 0000				     mov bx, 0
    250	022D  E8 016D				     call MScnNDec
    251	0230  88 1E 003Dr			     mov byte ptr [boxWidth], bl
    252	0234  85 C0				     test ax, ax
    253	0236  74 03				     jz	@@ContinueHere5
    254	0238  E9 00BD				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    255	023B					     @@ContinueHere5:
    256
    257	023B  BB 0000				     mov bx, 0
    258	023E  E8 0184				     call MScnNHex
    259	0241  88 1E 003Er			     mov byte ptr [boxTheme], bl
    260
    261	0245  B9 0002				     mov cx, 02h
    262	0248  3B D9				     cmp bx, cx
    263	024A  7E 18				     jle @@Theme02		     ; ---->
    264	024C  B9 000E				     mov cx, 0Eh
    265	024F  3B D9				     cmp bx, cx
    266	0251  74 19				     je	@@ThemeE		     ; ---->
    267	0253  B9 000F				     mov cx, 0Fh
    268	0256  3B D9				     cmp bx, cx
    269	0258  74 0D				     je	@@ThemeF		     ; ---->
    270	025A  B9 00C0				     mov cx, 0C0h
    271	025D  3B D9				     cmp bx, cx
    272	025F  7D 30				     jge @@ThemeC		     ; ---->
    273
    274	0261  E9 00A5				     jmp @@SetErrorBadTheme
    275
    276				     ;	  0,  1,  2 - standart box	   & text
    277				     ;	 C0, C1, C2 - standart box & color & text
    278				     ;	 F	 - various symbols & color & text
    279				     ;	 E	 - various symbols & color & text & textColor
    280
    281	0264			     @@Theme02:					     ; <----
    282	0264  EB 78 90				     jmp @@LastArg		     ; ->>>>>>>>>>>>>
    283
    284	0267			     @@ThemeF:					     ; <----
    285	0267  C6 06 003Er 03			     mov byte ptr [boxTheme], 03d
Turbo Assembler	 Version 4.1	    03/03/23 25:47:45	    Page 6
probox.asm



    286	026C			     @@ThemeE:					     ; <----
    287
    288	026C  BF 0019r				     mov di, offset BoxAssetStart + 3
    289	026F  B9 001Ar				     mov cx, offset BoxAssetStep     ; cx = step
    290	0272  81 E9 0016r			     sub cx, offset BoxAssetStart    ;
    291
    292	0276				 @@OneStep:				     ; <-------------------------\
    293	0276  85 C0				     test ax, ax		     ;				 |
    294	0278  74 03				     jz	@@ContinueHere6		     ;				 |
    295	027A  EB 7C 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>		 |>>>
    296	027D					     @@ContinueHere6:		     ;				 |
    297										     ;				 |
    298	027D  BB 0000				     mov bx, 0			     ;				 |
    299	0280  E8 011A				     call MScnNDec		     ;				 |
    300	0283  88 1D				     mov [di], bl		     ;				 |
    301										     ;				 |
    302	0285  03 F9				     add di, cx			     ;				 |
    303										     ;				 |
    304	0287  BB 003Ar				     mov bx, offset BoxAssetEnd	     ;				 |
    305	028A  3B FB				     cmp di, bx			     ;				 |
    306	028C  7C E8				     jl	@@OneStep		     ; >-------------------------/
    307
    308	028E  EB 10 90				     jmp @@SetColor		     ; >>====\\
    309										     ;	     ||
    310	0291			     @@ThemeC:					     ; <-----||--
    311	0291  B9 00C2				     mov cx, 0C2h		     ;	     ||
    312	0294  3B D9				     cmp bx, cx			     ;	     ||
    313	0296  7E 03				     jng @@ContinueHere10	     ;	     ||
    314	0298  EB 6F 90				     jmp @@SetErrorBadTheme	     ; >>>>>>||>>>>>>
    315	029B					     @@ContinueHere10:		     ;	     ||
    316										     ;	     ||
    317	029B  80 2E 003Er C0			     sub byte ptr [boxTheme], 0C0h   ;	     ||
    318										     ;	     ||
    319	02A0			     @@SetColor:				     ; <<====//
    320	02A0  85 C0				     test ax, ax
    321	02A2  74 03				     jz	@@ContinueHere11
    322	02A4  EB 52 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    323	02A7					     @@ContinueHere11:
    324
    325	02A7  BB 0000				     mov bx, 0
    326	02AA  E8 0118				     call MScnNHex
    327	02AD  88 1E 003Fr			     mov byte ptr [boxColor], bl
    328	02B1  88 1E 0040r			     mov byte ptr [boxTextColor], bl
    329
    330
    331	02B5  B7 00				     mov bh, 0
    332	02B7  8A 1E 003Er			     mov bl, byte ptr [boxTheme]
    333	02BB  B9 000E				     mov cx, 0Eh
    334	02BE  3B D9				     cmp bx, cx
    335	02C0  74 03				     je	@@ThemeEColor
    336	02C2  EB 1A 90				     jmp @@LastArg		     ; ->>>>>>>>>>>>>
    337	02C5			     @@ThemeEColor:
    338	02C5  C6 06 003Er 03			     mov byte ptr [boxTheme], 03d
    339
    340	02CA  85 C0				     test ax, ax
    341	02CC  74 03				     jz	@@ContinueHere12
    342	02CE  EB 28 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
Turbo Assembler	 Version 4.1	    03/03/23 25:47:45	    Page 7
probox.asm



    343	02D1					     @@ContinueHere12:
    344
    345	02D1  BB 0000				     mov bx, 0
    346	02D4  E8 00EE				     call MScnNHex
    347	02D7  88 1E 0040r			     mov byte ptr [boxTextColor], bl
    348	02DB  EB 01 90				     jmp @@LastArg		     ; ->>>>>>>>>>>>>
    349
    350
    351	02DE			     @@LastArg:					     ; <<<<<<<<<<<<<-
    352	02DE  85 C0				     test ax, ax
    353	02E0  74 0B				     jz	@@hasText		     ; >>====\\
    354										     ;	     ||
    355	02E2  C7 46 04 0000			     mov word ptr ss:[bp + 4], 0     ;	     ||
    356										     ;	     ||
    357	02E7  B8 0000				     mov ax, 0			     ;	     ||
    358	02EA  EB 2B 90				     jmp @@ProcEnd		     ; >-\   ||
    359	02ED					     @@hasText:			     ; <<|===//
    360										     ;	 |
    361	02ED  C7 46 04 0001			     mov word ptr ss:[bp + 4], 1     ;	 |
    362										     ;	 |
    363	02F2  B8 0000				     mov ax, 0			     ;	 |
    364	02F5  EB 20 90				     jmp @@ProcEnd		     ; >-\
    365	02F8			     @@SetErrorNoArg:				     ; <<|<<<<<<<<<<<
    366	02F8  B8 0239				     mov ax, 0239h		     ; Error code: No argument (more expected) : 239
    367	02FB  B6 0C				     mov dh, 00Ch		     ;	 |
    368	02FD  BB 0286				     mov bx, 160d*4+3d*2	     ;	 |
    369	0300  E8 0060				     call PrintNHex		     ;	 |
    370	0303  B8 0239				     mov ax, 0239h		     ;	 |
    371										     ;	 |
    372										     ;	 |
    373	0306  EB 0F 90				     jmp @@ProcEnd		     ; >-\
    374	0309			     @@SetErrorBadTheme:			     ; <<|<<<<<<<<<<<
    375	0309  B8 0240				     mov ax, 0240h		     ; Error code: No argument (more expected) : 240
    376	030C  B6 0C				     mov dh, 00Ch		     ;	 |
    377	030E  BB 0286				     mov bx, 160d*4+3d*2	     ;	 |
    378	0311  E8 004F				     call PrintNHex		     ;	 |
    379	0314  B8 0240				     mov ax, 0240h		     ;	 |
    380										     ;	 |
    381										     ;	 |
    382	0317			     @@ProcEnd:					     ; <-/
    383	0317  5D				     pop bp			     ; Stack frame
    384	0318  C3				     ret
    385	0319			     GetArgs	     endp
    386
    387				     ;------------------------------------------------
    388				     ;------------------------------------------------
    389
    390
    391				     ;------------------------------------------------
    392				     ; Calculate video mem offset by position
    393				     ;------------------------------------------------
    394				     ; Entry:	     CH	= heightPosition
    395				     ;		     CL	= widthPosition
    396				     ;
    397				     ; Expects:	     None
    398				     ;
    399				     ; Exit:	     BX	= start	addr to	draw
Turbo Assembler	 Version 4.1	    03/03/23 25:47:45	    Page 8
probox.asm



    400				     ;
    401				     ; Destroys:     AX
    402				     ;------------------------------------------------
    403				     ; Stack frame:
    404				     ;		     ...
    405				     ;		     retAddr	 []
    406				     ;		     ...
    407				     ;------------------------------------------------
    408
    409	0319			     CalculateVidMemPos	 proc
    410						     ; push bp
    411						     ; mov bp, sp		       ; Complete stack	frame
    412
    413
    414						     ; bx = 160d * ch +	2 * cl
    415	0319  B7 00				     mov bh, 0
    416	031B  8A D9				     mov bl, cl
    417	031D  D1 E3				     sal bx, 1
    418
    419	031F  B8 00A0				     mov ax, 160d
    420	0322  F6 E5				     mul ch
    421	0324  03 D8				     add bx, ax
    422
    423						     ; mov ax, bx
    424						     ; mov bx, 80d
    425						     ; call PrintNDec
    426
    427
    428						     ; pop bp			       ; Stack frame
    429	0326  C3				     ret
    430	0327			     CalculateVidMemPos	 endp
    431
    432				     ;------------------------------------------------
    433				     ;------------------------------------------------
    434
    435
    436				     ;------------------------------------------------
    437				     ; Count the length	of the 0Dh-terminated string (str)
    438				     ;------------------------------------------------
    439				     ; Entry:	     ES:DI = str
    440				     ;
    441				     ; Expects:	     DF	= 0 (CLD)
    442				     ;
    443				     ; Exit:	     CX	= length
    444				     ;
    445				     ; Destroys:     AL	DI
    446				     ;------------------------------------------------
    447				     ; Stack frame:
    448				     ;		     ...
    449				     ;		     retAddr	 []
    450				     ;		     ...
    451				     ;------------------------------------------------
    452				     ;Направление просмотра	 зависит	 от флага		    +
    453				     направления DF,	значение  которого  можно	менять  с    +
    454				     помощью команд CLD (DF:=0) и	STD (DF:=1).
    455
    456	0327			     StrLen	     proc
Turbo Assembler	 Version 4.1	    03/03/23 25:47:45	    Page 9
probox.asm



    457						     ; push bp
    458						     ; mov bp, sp		       ; Complete stack	frame
    459
    460	0327  B0 0D				     mov al, 00Dh		     ; AL = terminator
    461	0329  33 C9				     xor cx, cx			     ; CX = 0
    462
    463	032B			     @@CountStep:				     ; <-------------------------\
    464	032B  41				     inc cx			     ;				 |
    465	032C  AE				     scasb			     ;				 |
    466	032D  75 FC				     jne @@CountStep		     ; >-------------------------/
    467
    468	032F  49				     dec cx
    469
    470						     ; pop bp			       ; Stack frame
    471	0330  C3				     ret
    472	0331			     StrLen	     endp
    473
    474				     ;------------------------------------------------
    475				     ;------------------------------------------------
    476
    477
    478				     include ..\LianLib\ScanNDec.asm
1   479				     ;------------------------------------------------
1   480				     ; Scans number as decimal
1   481				     ;------------------------------------------------
1   482				     ; Entry:	     none
1   483				     ;
1   484				     ; Expects:	     BX	= 0
1   485				     ;
1   486				     ; Exit:	     BX	= number to print
1   487				     ;
1   488				     ; Destroys:     AX	CL Si
1   489				     ;------------------------------------------------
1   490				     ;------------------------------------------------
1   491	0331			     ScanNDec	     proc
1   492
1   493	0331			     @@ScanDigit:				     ; <-------------------------\
1   494										     ;				 |
1   495	0331  B4 01				     mov ah, 01h		     ; getc -> al		 |
1   496	0333  CD 21				     int 21h			     ; ^			 |
1   497										     ;				 |
1   498	0335  3C 0D				     cmp al, 13d		     ; Stop scan if enter	 |
1   499	0337  74 15				     je	@@EndScanDigit		     ; >>========================|=======\\
1   500										     ;				 |	 ||
1   501	0339  8A C8				     mov cl, al			     ; Store al	to cl		 |	 ||
1   502										     ;				 |	 ||
1   503	033B  8B C3				     mov ax, bx			     ; bx *= 10			 |	 ||
1   504	033D  BE 000A				     mov si, 10d		     ; ^			 |	 ||
1   505	0340  F7 E6				     mul si			     ; ^			 |	 ||
1   506	0342  8B D8				     mov bx, ax			     ; ^			 |	 ||
1   507										     ;				 |	 ||
1   508	0344  8A C1				     mov al, cl			     ; Retore al from cl	 |	 ||
1   509										     ;				 |	 ||
1   510	0346  2C 30				     sub al, "0"		     ; ASCII "0" offset		 |	 ||
1   511										     ;				 |	 ||
1   512	0348  B4 00				     mov ah, 0d			     ; bx += al			 |	 ||
1   513	034A  03 D8				     add bx, ax			     ; ^			 |	 ||
Turbo Assembler	 Version 4.1	    03/03/23 25:47:45	    Page 10
probox.asm



1   514										     ;				 |	 ||
1   515	034C  EB E3				     jmp @@ScanDigit		     ; >-------------------------/	 ||
1   516										     ;					 ||
1   517	034E			     @@EndScanDigit:				     ; <<================================//
1   518	034E  C3				     ret
1   519
1   520	034F			     ScanNDec	     endp
1   521
1   522				     ;------------------------------------------------
1   523				     ;------------------------------------------------
1   524
    525				     include ..\LianLib\PrntNBin.asm
1   526				     ;------------------------------------------------
1   527				     ; Prints number as	binary to vidmem
1   528				     ;------------------------------------------------
1   529				     ; Entry:	     AX	= number to print
1   530				     ;		     BX	= start	addr to	print
1   531				     ;
1   532				     ; Expects:	     ES	-> Video segment
1   533				     ;		     DH	= color	code
1   534				     ;
1   535				     ; Exit:	     None
1   536				     ;
1   537				     ; Destroys:     AX	BX CX DL
1   538				     ;------------------------------------------------
1   539				     ;------------------------------------------------
1   540	034F			     PrintNBin	     proc
1   541
1   542	034F  B9 0010				     mov cx, 16d		     ; 16 bit in 2 byte	in ax
1   543
1   544	0352			     @@PrintDigit:				     ; <-------------------------\
1   545										     ;				 |
1   546	0352  B2 01				     mov dl, 00000001b		     ; Mask			 |
1   547	0354  22 D0				     and dl, al			     ;				 |
1   548	0356  80 C2 30				     add dl, 30h		     ; ASCII "0" offset		 |
1   549										     ;				 |
1   550	0359  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   551										     ;				 |
1   552	035C  4B				     dec bx			     ; Next digit		 |
1   553	035D  4B				     dec bx			     ; ^			 |
1   554										     ;				 |
1   555	035E  D1 E8				     shr ax, 1d			     ; ax >> 1			 |
1   556										     ;				 |
1   557	0360  E2 F0				     loop @@PrintDigit		     ; >-------------------------/
1   558
1   559	0362  C3				     ret
1   560
1   561	0363			     PrintNBin	     endp
1   562
1   563				     ;------------------------------------------------
1   564				     ;------------------------------------------------
1   565
    566				     include ..\LianLib\PrntNHex.asm
1   567				     ;------------------------------------------------
1   568				     ; Prints number as	hexagen	to vidmem
1   569				     ;------------------------------------------------
1   570				     ; Entry:	     AX	= number to print
Turbo Assembler	 Version 4.1	    03/03/23 25:47:45	    Page 11
probox.asm



1   571				     ;		     BX	= start	addr to	print
1   572				     ;
1   573				     ; Expects:	     ES	-> Video segment
1   574				     ;		     DH	= color	code
1   575				     ;
1   576				     ; Exit:	     None
1   577				     ;
1   578				     ; Destroys:     AX	BX CX DL Si
1   579				     ;------------------------------------------------
1   580				     ;------------------------------------------------
1   581	0363			     PrintNHex	     proc
1   582
1   583	0363  B9 0004				     mov cx, 4d			     ; 4 digits	in 2 byte in ax
1   584
1   585	0366			     @@PrintDigit:				     ; <-------------------------\
1   586										     ;				 |
1   587	0366  B2 0F				     mov dl, 00001111b		     ; Mask			 |
1   588	0368  22 D0				     and dl, al			     ;				 |
1   589										     ;				 |
1   590	036A  8B F2				     mov si, dx			     ; dl -> si			 |
1   591	036C  83 E6 0F				     and si, 0Fh		     ;				 |
1   592										     ;				 |
1   593	036F  8A 94 0000r			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
1   594										     ;				 |
1   595	0373  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   596										     ;				 |
1   597	0376  4B				     dec bx			     ; Next digit		 |
1   598	0377  4B				     dec bx			     ; ^			 |
1   599										     ;				 |
1   600	0378  C1 E8 04				     shr ax, 4d			     ; ax >> 4			 |
1   601										     ;				 |
1   602	037B  E2 E9				     loop @@PrintDigit		     ; >-------------------------/
1   603
1   604	037D  C3				     ret
1   605
1   606	037E			     PrintNHex	     endp
1   607
1   608				     ;------------------------------------------------
1   609				     ;------------------------------------------------
1   610
    611				     include ..\LianLib\PrntNDec.asm
1   612				     ;------------------------------------------------
1   613				     ; Prints number as	decimal	to vidmem
1   614				     ;------------------------------------------------
1   615				     ; Entry:	     AX	= number to print
1   616				     ;		     BX	= start	addr to	print
1   617				     ;
1   618				     ; Expects:	     ES	-> Video segment
1   619				     ;		     DH	= color	code
1   620				     ;
1   621				     ; Exit:	     None
1   622				     ;
1   623				     ; Destroys:     AX	BX CX DL Si
1   624				     ;------------------------------------------------
1   625				     ;------------------------------------------------
1   626	037E			     PrintNDec	     proc
1   627
Turbo Assembler	 Version 4.1	    03/03/23 25:47:45	    Page 12
probox.asm



1   628	037E  B9 0005				     mov cx, 5d			     ; 5 digits	in 2 byte in ax
1   629
1   630	0381			     @@PrintDigit:				     ; <-------------------------\
1   631	0381  8A EE				     mov ch, dh			     ; Store dh	to ch		 |
1   632										     ;				 |
1   633	0383  BA 0000				     mov dx, 0d			     ; for division		 |
1   634	0386  BE 000A				     mov si, 10d		     ; ax/10 ->	ax &		 |
1   635	0389  F7 F6				     div si			     ; & ax%10 -> dx		 | !!! dx < 10
1   636										     ;				 |
1   637	038B  8B F2				     mov si, dx			     ; dl -> si			 |
1   638										     ;				 |
1   639	038D  8A 94 0000r			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
1   640										     ;				 |
1   641	0391  8A F5				     mov dh, ch			     ; Restore dh from ch	 |
1   642	0393  B5 00				     mov ch, 0			     ; ^			 |
1   643										     ;				 |
1   644	0395  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   645										     ;				 |
1   646	0398  4B				     dec bx			     ; Next digit		 |
1   647	0399  4B				     dec bx			     ; ^			 |
1   648										     ;				 |
1   649										     ;				 |
1   650	039A  E2 E5				     loop @@PrintDigit		     ; >-------------------------/
1   651
1   652	039C  C3				     ret
1   653
1   654	039D			     PrintNDec	     endp
1   655
1   656				     ;------------------------------------------------
1   657				     ;------------------------------------------------
1   658
    659				     include ..\LianLib\MScnNDec.asm
1   660				     ;------------------------------------------------
1   661				     ; Scans number as decimal from string in memory
1   662				     ;------------------------------------------------
1   663				     ; Entry:	     DS:SI = memory ptr
1   664				     ;
1   665				     ; Expects:	     BX	= 0
1   666				     ;		     DL	= terminator char 1
1   667				     ;		     DH	= terminator char 2 (TerminatorEnd)
1   668				     ;		     DF	= 0 (CLD) [or backward]
1   669				     ;
1   670				     ; Exit:	     BX	= scanned number
1   671				     ;		     SI	to next	word
1   672				     ;		     AX	= 0 if terminator, 1 if	TerminatorEnd
1   673				     ;
1   674				     ; Destroys:     None
1   675				     ;------------------------------------------------
1   676				     ;------------------------------------------------
1   677	039D			     MScnNDec	     proc
1   678
1   679	039D			     @@ScanDigit:				     ; <-------------------------\
1   680										     ;				 |
1   681						     ; mov ah, 01h		     ; getc -> al		 |
1   682						     ; int 21h			     ; ^			 |
1   683	039D  AC				     lodsb			     ; char -> al		 |
1   684										     ;				 |
Turbo Assembler	 Version 4.1	    03/03/23 25:47:45	    Page 13
probox.asm



1   685						     ; cmp al, 13d		     ; Stop scan if enter	 |
1   686	039E  3A C2				     cmp al, dl			     ; Stop scan if terminator	 |
1   687	03A0  74 19				     je	@@TermScanDigit		     ; >>========================|=======\\
1   688	03A2  3A C6				     cmp al, dh			     ;				 |	 ||
1   689	03A4  74 1B				     je	@@TerminatorEndScanDigit     ; >>========================|===========\\
1   690										     ;				 |	 ||  ||
1   691						     ; mov cl, al		     ; Store al	to cl		 |	 ||  ||
1   692	03A6  50				     push ax			     ; Store ax			 |	 ||  ||
1   693	03A7  52				     push dx			     ; Store dx			 |	 ||  ||
1   694										     ;				 |	 ||  ||
1   695	03A8  8B C3				     mov ax, bx			     ; bx *= 10			 |	 ||  ||
1   696	03AA  BA 000A				     mov dx, 10d		     ; ^			 |	 ||  ||
1   697	03AD  F7 E2				     mul dx			     ; ^			 |	 ||  ||
1   698	03AF  8B D8				     mov bx, ax			     ; ^			 |	 ||  ||
1   699										     ;				 |	 ||  ||
1   700	03B1  5A				     pop dx			     ; Restore dx		 |	 ||  ||
1   701	03B2  58				     pop ax			     ; Restore ax		 |	 ||  ||
1   702						     ; mov al, cl		     ; Restore al from cl	 |	 ||  ||
1   703										     ;				 |	 ||  ||
1   704	03B3  2C 30				     sub al, "0"		     ; ASCII "0" offset		 |	 ||  ||
1   705										     ;				 |	 ||  ||
1   706	03B5  B4 00				     mov ah, 0d			     ; bx += al			 |	 ||  ||
1   707	03B7  03 D8				     add bx, ax			     ; ^			 |	 ||  ||
1   708										     ;				 |	 ||  ||
1   709	03B9  EB E2				     jmp @@ScanDigit		     ; >-------------------------/	 ||  ||
1   710										     ;					 ||  ||
1   711	03BB			     @@TermScanDigit:				     ; <<================================//  ||
1   712	03BB  B8 0000				     mov ax, 0			     ;					     ||
1   713	03BE  EB 04 90				     jmp @@EndProc		     ; >-----\				     ||
1   714	03C1			     @@TerminatorEndScanDigit:			     ; <<====|===============================//
1   715	03C1  B8 0001				     mov ax, 1			     ;	     |
1   716	03C4			     @@EndProc:					     ; <-----/
1   717	03C4  C3				     ret
1   718
1   719	03C5			     MScnNDec	     endp
1   720
1   721				     ;------------------------------------------------
1   722				     ;------------------------------------------------
1   723
    724				     include ..\LianLib\MScnNHex.asm
1   725				     ;------------------------------------------------
1   726				     ; Scans number as hexagen from string in memory
1   727				     ;------------------------------------------------
1   728				     ; Entry:	     DS:SI = memory ptr
1   729				     ;
1   730				     ; Expects:	     BX	= 0
1   731				     ;		     DL	= terminator char 1
1   732				     ;		     DH	= terminator char 2 (TerminatorEnd)
1   733				     ;		     DF	= 0 (CLD) [or backward]
1   734				     ;
1   735				     ; Exit:	     BX	= scanned number
1   736				     ;		     SI	to next	word
1   737				     ;		     AX	= 0 if terminator, 1 if	TerminatorEnd
1   738				     ;
1   739				     ; Destroys:     None
1   740				     ;------------------------------------------------
1   741				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    03/03/23 25:47:45	    Page 14
probox.asm



1   742	03C5			     MScnNHex	     proc
1   743
1   744	03C5			     @@ScanDigit:				     ; <-------------------------\
1   745										     ;				 |
1   746						     ; mov ah, 01h		     ; getc -> al		 |
1   747						     ; int 21h			     ; ^			 |
1   748	03C5  AC				     lodsb			     ; char -> al		 |
1   749										     ;				 |
1   750						     ; cmp al, 13d		     ; Stop scan if enter	 |
1   751	03C6  3A C2				     cmp al, dl			     ; Stop scan if terminator	 |
1   752	03C8  74 43				     je	@@TermScanDigit		     ; >>========================|=======\\
1   753	03CA  3A C6				     cmp al, dh			     ;				 |	 ||
1   754	03CC  74 45				     je	@@TerminatorEndScanDigit     ; >>========================|===========\\
1   755										     ;				 |	 ||  ||
1   756										     ;				 |	 ||  ||
1   757	03CE  C1 E3 04				     shl bx, 4d			     ; bx *= 16			 |	 ||  ||
1   758										     ;				 |	 ||  ||
1   759										     ;				 |	 ||  ||
1   760	03D1  53				     push bx			     ; Store bx			 |	 ||  ||
1   761										     ;				 |	 ||  ||
1   762	03D2  BB 0061				     mov bx, "a"		     ;				 |	 ||  ||
1   763	03D5  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   764	03D7  7C 0B				     jl	@@Nextaf		     ;				 |	 ||  ||
1   765	03D9  BB 0066				     mov bx, "f"		     ;				 |	 ||  ||
1   766	03DC  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   767	03DE  7F 04				     jg	@@Nextaf		     ;				 |	 ||  ||
1   768	03E0  2C 61				     sub al, "a"		     ; ASCII "0" offset		 |	 ||  ||
1   769	03E2  04 0A				     add al, 0ah		     ; ^			 |	 ||  ||
1   770	03E4			     @@Nextaf:					     ;				 |	 ||  ||
1   771	03E4  BB 0041				     mov bx, "A"		     ;				 |	 ||  ||
1   772	03E7  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   773	03E9  7C 0B				     jl	@@NextAFCAPS		     ;				 |	 ||  ||
1   774	03EB  BB 0046				     mov bx, "F"		     ;				 |	 ||  ||
1   775	03EE  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   776	03F0  7F 04				     jg	@@NextAFCAPS		     ;				 |	 ||  ||
1   777	03F2  2C 41				     sub al, "A"		     ; ASCII "0" offset		 |	 ||  ||
1   778	03F4  04 0A				     add al, 0Ah		     ; ^			 |	 ||  ||
1   779	03F6			     @@NextAFCAPS:				     ;				 |	 ||  ||
1   780	03F6  BB 0030				     mov bx, "0"		     ;				 |	 ||  ||
1   781	03F9  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   782	03FB  7C 09				     jl	@@Next09		     ;				 |	 ||  ||
1   783	03FD  BB 0039				     mov bx, "9"		     ;				 |	 ||  ||
1   784	0400  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   785	0402  7F 02				     jg	@@Next09		     ;				 |	 ||  ||
1   786	0404  2C 30				     sub al, "0"		     ; ASCII "0" offset		 |	 ||  ||
1   787						     ; add al, 0		     ; ^			 |	 ||  ||
1   788	0406			     @@Next09:					     ;				 |	 ||  ||
1   789										     ;				 |	 ||  ||
1   790	0406  5B				     pop bx			     ; Restore bx		 |	 ||  ||
1   791										     ;				 |	 ||  ||
1   792	0407  B4 00				     mov ah, 0d			     ; bx += al			 |	 ||  ||
1   793	0409  03 D8				     add bx, ax			     ; ^			 |	 ||  ||
1   794										     ;				 |	 ||  ||
1   795	040B  EB B8				     jmp @@ScanDigit		     ; >-------------------------/	 ||  ||
1   796										     ;					 ||  ||
1   797	040D			     @@TermScanDigit:				     ; <<================================//  ||
1   798	040D  B8 0000				     mov ax, 0			     ;					     ||
Turbo Assembler	 Version 4.1	    03/03/23 25:47:45	    Page 15
probox.asm



1   799	0410  EB 04 90				     jmp @@EndProc		     ; >-----\				     ||
1   800	0413			     @@TerminatorEndScanDigit:			     ; <<====|===============================//
1   801	0413  B8 0001				     mov ax, 1			     ;	     |
1   802	0416			     @@EndProc:					     ; <-----/
1   803	0416  C3				     ret
1   804
1   805	0417			     MScnNHex	     endp
1   806
1   807				     ;------------------------------------------------
1   808				     ;------------------------------------------------
1   809
    810
    811				     include ..\LianLib\ProBox.asm
1   812				     ;------------------------------------------------
1   813				     ; Draws cool box on the screen
1   814				     ;------------------------------------------------
1   815				     ; Entry:	     BX	= start	addr to	draw
1   816				     ;		     CH	= height of box	(without frame)
1   817				     ;		     CL	= width	of box (without	frame)
1   818				     ;
1   819				     ; Expects:	     ES	-> Video segment
1   820				     ;
1   821				     ; Exit:	     None
1   822				     ;
1   823				     ; Destroys:     AX	BX (CX)	DX DI
1   824				     ;------------------------------------------------
1   825				     ; Stack frame:
1   826				     ;		     ...
1   827				     ;		     LU	char	 [bp + 20]   //	H - color attr
1   828				     ;		     _U	char	 [bp + 18]   //	L - symb attr
1   829				     ;		     RU	char	 [bp + 16]   //
1   830				     ;		     R_	char	 [bp + 14]   //
1   831				     ;		     RB	char	 [bp + 12]   //
1   832				     ;		     _B	char	 [bp + 10]   //
1   833				     ;		     LB	char	 [bp + 8]    //
1   834				     ;		     L_	char	 [bp + 6]    //
1   835				     ;		     FI	char	 [bp + 4]    //
1   836				     ;		     retAddr	 [bp + 2]
1   837				     ;		     stored BP	 [bp]
1   838				     ;		     stored CX	 [bp - 2]    //	size
1   839				     ;		     ...
1   840				     ;------------------------------------------------
1   841
1   842	0417			     DrawBox	     proc
1   843	0417  55				     push bp
1   844	0418  8B EC				     mov bp, sp			     ; Complete	stack frame
1   845	041A  51				     push cx
1   846
1   847										     ;-------------------------------------------
1   848										     ; Upper line
1   849	041B  8B FB				     mov di, bx
1   850	041D  8B 4E FE				     mov cx, [bp - 2]
1   851	0420  B5 00				     mov ch, 0
1   852	0422  FF 76 14				     push [bp +	20]
1   853	0425  FF 76 12				     push [bp +	18]
1   854	0428  FF 76 10				     push [bp +	16]
1   855	042B  E8 0044				     call DrawLine
Turbo Assembler	 Version 4.1	    03/03/23 25:47:45	    Page 16
probox.asm



1   856	042E  83 C4 06				     add sp, 2*3d
1   857										     ;-------------------------------------------
1   858										     ; Middle line
1   859	0431  8B 4E FE				     mov cx, [bp - 2]
1   860	0434  B6 00				     mov dh, 0
1   861	0436  8A D5				     mov dl, ch
1   862	0438			     @@MiddleStep:				     ; <-----------------\
1   863										     ;			 |
1   864	0438  81 C3 00A0			     add bx, 160d		     ;			 |
1   865	043C  8B FB				     mov di, bx			     ;			 |
1   866	043E  8B 4E FE				     mov cx, [bp - 2]		     ;			 |
1   867	0441  B5 00				     mov ch, 0			     ;			 |
1   868	0443  FF 76 06				     push [bp +	6]		     ;			 |
1   869	0446  FF 76 04				     push [bp +	4]		     ;			 |
1   870	0449  FF 76 0E				     push [bp +	14]		     ;			 |
1   871	044C  E8 0023				     call DrawLine		     ;			 |
1   872	044F  83 C4 06				     add sp, 2*3d		     ;			 |
1   873	0452  4A				     dec dx			     ;			 |
1   874	0453  75 E3				     jnz @@MiddleStep		     ; >-----------------/
1   875										     ;-------------------------------------------
1   876										     ; Bottom line
1   877	0455  81 C3 00A0			     add bx, 160d
1   878	0459  8B FB				     mov di, bx
1   879	045B  8B 4E FE				     mov cx, [bp - 2]
1   880	045E  B5 00				     mov ch, 0
1   881	0460  FF 76 08				     push [bp +	8]
1   882	0463  FF 76 0A				     push [bp +	10]
1   883	0466  FF 76 0C				     push [bp +	12]
1   884	0469  E8 0006				     call DrawLine
1   885	046C  83 C4 06				     add sp, 2*3d
1   886										     ;-------------------------------------------
1   887
1   888	046F  59				     pop cx
1   889	0470  5D				     pop bp			     ; Stack frame
1   890	0471  C3				     ret
1   891	0472			     DrawBox	     endp
1   892
1   893				     ;------------------------------------------------
1   894				     ;------------------------------------------------
1   895
1   896				     ; needs <include ?\LianLib\DrawLine.asm>
1   897
    898				     include ..\LianLib\DrawLine.asm
1   899				     ;------------------------------------------------
1   900				     ; Draws line on the screen	(Pattern ABB~BBC)
1   901				     ;------------------------------------------------
1   902				     ; Entry:	     DI	= start	addr to	draw
1   903				     ;		     CX	= width	of line	(without A&C)
1   904				     ;
1   905				     ; Expects:	     ES	-> Video segment
1   906				     ;		     DF	= 0 (CLD)
1   907				     ;
1   908				     ; Exit:	     None
1   909				     ;
1   910				     ; Destroys:     AX	CX DI
1   911				     ;------------------------------------------------
1   912				     ; Stack frame:
Turbo Assembler	 Version 4.1	    03/03/23 25:47:45	    Page 17
probox.asm



1   913				     ;		     ...
1   914				     ;		     'A' char	 [bp + 8]    //	H - color attr
1   915				     ;		     'B' char	 [bp + 6]    //	L - symb attr
1   916				     ;		     'C' char	 [bp + 4]    //
1   917				     ;		     retAddr	 [bp + 2]
1   918				     ;		     stored BP	 [bp]
1   919				     ;		     ...
1   920				     ;------------------------------------------------
1   921				     ;Направление просмотра	 зависит	 от флага		    +
    922				     направления DF,	значение  которого  можно	менять  с    +
    923				     помощью команд CLD (DF:=0) и	STD (DF:=1).
1   924
1   925	0472			     DrawLine	     proc
1   926	0472  55				     push bp
1   927	0473  8B EC				     mov bp, sp			     ; Complete	stack frame
1   928
1   929	0475  8B 46 08				     mov ax, [bp + 8]
1   930	0478  AB				     stosw
1   931
1   932	0479  8B 46 06				     mov ax, [bp + 6]
1   933	047C  F3> AB				     rep stosw
1   934
1   935	047E  8B 46 04				     mov ax, [bp + 4]
1   936	0481  AB				     stosw
1   937
1   938	0482  5D				     pop bp			     ; Stack frame
1   939	0483  C3				     ret
1   940	0484			     DrawLine	     endp
1   941
1   942				     ;------------------------------------------------
1   943				     ;------------------------------------------------
1   944
    945
    946	0484			     .data
    947				     include ..\LianLib\Alphabet.asm
1   948	0000  30 31 32 33 34 35	36+  Alphabet:	     db	"0123456789ABCDEF"	     ; Alphabet	for printing (Thanks Ilya)
    949	      37 38 39 41 42 43	44+
    950	      45 46
1   951	0010  C9 CD BB BA BC C8	     BoxSymbols:     db	0c9h, 0cdh, 0bbh, 0bah,	0bch, 0c8h ; "╔═╗║╝╚"
1   952
1   953	0016			     BoxAssetStart:
1   954	0016  20 DA C9 00	     BoxAssetLU:     db	020h, 0dah, 0c9h, 000h
1   955	001A			     BoxAssetStep:
1   956	001A  20 C4 CD 00	     BoxAsset_U:     db	020h, 0c4h, 0cdh, 000h
1   957	001E  20 BF BB 00	     BoxAssetRU:     db	020h, 0bfh, 0bbh, 000h
1   958	0022  20 B3 BA 00	     BoxAssetR_:     db	020h, 0b3h, 0bah, 000h
1   959	0026  20 D9 BC 00	     BoxAssetRB:     db	020h, 0d9h, 0bch, 000h
1   960	002A  20 C4 CD 00	     BoxAsset_B:     db	020h, 0c4h, 0cdh, 000h
1   961	002E  20 C0 C8 00	     BoxAssetLB:     db	020h, 0c0h, 0c8h, 000h
1   962	0032  20 B3 BA 00	     BoxAssetL_:     db	020h, 0b3h, 0bah, 000h
1   963	0036  20 20 20 00	     BoxAssetFI:     db	020h, 020h, 020h, 000h
1   964	003A			     BoxAssetEnd:
1   965
1   966				     ; 0:    1:┌─┐ 2:╔═╗ 3:usr
1   967				     ;	       │ │	 ║ ║   chr
1   968				     ;	       └─┘   ╚═╝
1   969
Turbo Assembler	 Version 4.1	    03/03/23 25:47:45	    Page 18
probox.asm



    970
    971	003A  ??		     boxHeightPos:   db	?
    972	003B  ??		     boxWidthPos:    db	?
    973	003C  ??		     boxHeight:	     db	?
    974	003D  ??		     boxWidth:	     db	?
    975	003E  ??		     boxTheme:	     db	?
    976	003F  0A		     boxColor:	     db	00Ah
    977	0040  0A		     boxTextColor:   db	00Ah
    978
    979				     end	     Start
Turbo Assembler	 Version 4.1	    03/03/23 25:47:45	    Page 19
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/03/23"
??FILENAME			  Text	 "probox  "
??TIME				  Text	 "25:47:45"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CONTINUEHERE1			  Near	 DGROUP:0115
@@CONTINUEHERE1			  Near	 DGROUP:01F0
@@CONTINUEHERE10		  Near	 DGROUP:029B
@@CONTINUEHERE11		  Near	 DGROUP:02A7
@@CONTINUEHERE12		  Near	 DGROUP:02D1
@@CONTINUEHERE2			  Near	 DGROUP:0208
@@CONTINUEHERE3			  Near	 DGROUP:0219
@@CONTINUEHERE4			  Near	 DGROUP:022A
@@CONTINUEHERE5			  Near	 DGROUP:023B
@@CONTINUEHERE6			  Near	 DGROUP:027D
@@COUNTSTEP			  Near	 DGROUP:032B
@@ENDPROC			  Near	 DGROUP:03C4
@@ENDPROC			  Near	 DGROUP:0416
@@ENDSCANDIGIT			  Near	 DGROUP:034E
@@HASTEXT			  Near	 DGROUP:02ED
@@LASTARG			  Near	 DGROUP:02DE
@@LASTLINE			  Near	 DGROUP:01CB
@@MIDDLESTEP			  Near	 DGROUP:0438
@@NEXT09			  Near	 DGROUP:0406
@@NEXTAF			  Near	 DGROUP:03E4
@@NEXTAFCAPS			  Near	 DGROUP:03F6
@@NOLINEBREAK			  Near	 DGROUP:01C9
@@ONECHAR			  Near	 DGROUP:01AF
@@ONESTEP			  Near	 DGROUP:0276
@@PRINTDIGIT			  Near	 DGROUP:0352
@@PRINTDIGIT			  Near	 DGROUP:0366
@@PRINTDIGIT			  Near	 DGROUP:0381
@@PROCEND			  Near	 DGROUP:0317
@@SCANDIGIT			  Near	 DGROUP:0331
@@SCANDIGIT			  Near	 DGROUP:039D
@@SCANDIGIT			  Near	 DGROUP:03C5
@@SETCOLOR			  Near	 DGROUP:02A0
@@SETERRORBADTHEME		  Near	 DGROUP:0309
@@SETERRORNOARG			  Near	 DGROUP:02F8
@@TERMINATORENDSCANDIGIT	  Near	 DGROUP:03C1
@@TERMINATORENDSCANDIGIT	  Near	 DGROUP:0413
@@TERMSCANDIGIT			  Near	 DGROUP:03BB
@@TERMSCANDIGIT			  Near	 DGROUP:040D
@@THEME02			  Near	 DGROUP:0264
@@THEMEC			  Near	 DGROUP:0291
@@THEMEE			  Near	 DGROUP:026C
@@THEMEECOLOR			  Near	 DGROUP:02C5
@@THEMEF			  Near	 DGROUP:0267
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
Turbo Assembler	 Version 4.1	    03/03/23 25:47:45	    Page 20
Symbol Table



@FILENAME			  Text	 PROBOX
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ALPHABET			  Near	 DGROUP:0000
ARGCOUNT			  Near	 DGROUP:0080
ARGS				  Near	 DGROUP:0081
BOXASSETEND			  Near	 DGROUP:003A
BOXASSETFI			  Near	 DGROUP:0036
BOXASSETLB			  Near	 DGROUP:002E
BOXASSETLU			  Near	 DGROUP:0016
BOXASSETL_			  Near	 DGROUP:0032
BOXASSETRB			  Near	 DGROUP:0026
BOXASSETRU			  Near	 DGROUP:001E
BOXASSETR_			  Near	 DGROUP:0022
BOXASSETSTART			  Near	 DGROUP:0016
BOXASSETSTEP			  Near	 DGROUP:001A
BOXASSET_B			  Near	 DGROUP:002A
BOXASSET_U			  Near	 DGROUP:001A
BOXCOLOR			  Near	 DGROUP:003F
BOXHEIGHT			  Near	 DGROUP:003C
BOXHEIGHTPOS			  Near	 DGROUP:003A
BOXSYMBOLS			  Near	 DGROUP:0010
BOXTEXTCOLOR			  Near	 DGROUP:0040
BOXTHEME			  Near	 DGROUP:003E
BOXWIDTH			  Near	 DGROUP:003D
BOXWIDTHPOS			  Near	 DGROUP:003B
CALCULATEVIDMEMPOS		  Near	 DGROUP:0319
DRAWBOX				  Near	 DGROUP:0417
DRAWLINE			  Near	 DGROUP:0472
GETARGS				  Near	 DGROUP:01DE
MSCNNDEC			  Near	 DGROUP:039D
MSCNNHEX			  Near	 DGROUP:03C5
PRINTNBIN			  Near	 DGROUP:034F
PRINTNDEC			  Near	 DGROUP:037E
PRINTNHEX			  Near	 DGROUP:0363
PRINTTEXT			  Near	 DGROUP:0172
RETURNPROGRAM			  Near	 DGROUP:016D
SCANNDEC			  Near	 DGROUP:0331
START				  Near	 DGROUP:0100
STRLEN				  Near	 DGROUP:0327

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0041 Word	  Public  DATA
  _TEXT				  16  0484 Word	  Public  CODE
