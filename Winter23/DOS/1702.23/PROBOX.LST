Turbo Assembler	 Version 4.1	    03/03/23 01:27:37	    Page 1
probox.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     locals @@
      4
      5				     org 80h
      6	0080  ??		     ArgCount:	     db	?
      7	0081  ??		     Args:	     db	?
      8
      9				     org 100h
     10
     11	0100			     Start:
     12
     13	0100  B8 B800				     mov ax, 0b800h		     ; адрес сегмента с		    +
     14				     видеопамятью -> es
     15	0103  8E C0				     mov es, ax			     ;
     16
     17						     ; mov ax, ss		       ; Segment with stack, code, etc.
     18						     ; mov ds, ax		       ;
     19
     20						     ; mov ah, 00001010b	       ; Light green on	black
     21						     ; mov bx, 160d*18 + 160d/2	- 18d*2	+ 4d; Середина строчки
     22						     ; mov ch, 5		       ; Height
     23						     ; mov cl, 18		       ; Width
     24						     ; call DrawBox
     25						     ; mov di, 160d*18 + 160d/2	- 18d*2	+ 4d; Середина строчки
     26						     ; mov cx, 5		       ; Width
     27						     ; push 002DAh
     28						     ; push 002CDh
     29						     ; push 002BAh
     30						     ; call DrawLine
     31						     ; pop ax
     32						     ; pop ax
     33						     ; pop ax
     34
     35	0105  B5 05				     mov ch, 5
     36	0107  B1 05				     mov cl, 5
     37	0109  B4 0A				     mov ah, 00Ah		     ; Light green on black
     38	010B  BB 0002				     mov bx, 2
     39	010E  8A 87 0016r			     mov al, byte ptr [BoxAssetLU + bx]
     40	0112  50				     push ax
     41	0113  8A 87 0019r			     mov al, byte ptr [BoxAsset_U + bx]
     42	0117  50				     push ax
     43	0118  8A 87 001Cr			     mov al, byte ptr [BoxAssetRU + bx]
     44	011C  50				     push ax
     45	011D  8A 87 001Fr			     mov al, byte ptr [BoxAssetR_ + bx]
     46	0121  50				     push ax
     47	0122  8A 87 0022r			     mov al, byte ptr [BoxAssetRB + bx]
     48	0126  50				     push ax
     49	0127  8A 87 0025r			     mov al, byte ptr [BoxAsset_B + bx]
     50	012B  50				     push ax
     51	012C  8A 87 0028r			     mov al, byte ptr [BoxAssetLB + bx]
     52	0130  50				     push ax
     53	0131  8A 87 002Br			     mov al, byte ptr [BoxAssetL_ + bx]
     54	0135  50				     push ax
     55	0136  8A 87 002Er			     mov al, byte ptr [BoxAssetFI + bx]
     56	013A  50				     push ax
     57	013B  BB 0B70				     mov bx, 160d*18 + 160d/2 -	18d*2 +	4d; Середина строчки
Turbo Assembler	 Version 4.1	    03/03/23 01:27:37	    Page 2
probox.asm



     58	013E  E8 0008				     call DrawBox
     59	0141  83 C4 12				     add sp, 2*9d
     60
     61
     62						     ; mov dh, 00000010b	       ; Dark green on black
     63						     ; pop ax			       ; Scanned number
     64						     ; push ax			       ;
     65
     66						     ; call PrintNBin
     67
     68	0144  B8 4C00				     mov ax, 4c00h		     ; exit(0)
     69	0147  CD 21				     int 21h
     70
     71
     72
     73				     ;------------------------------------------------
     74				     ; Draws cool box on the screen
     75				     ;------------------------------------------------
     76				     ; Entry:	     BX	= start	addr to	draw
     77				     ;		     CH	= height of box	(without frame)
     78				     ;		     CL	= width	of box (without	frame)
     79				     ;
     80				     ; Expects:	     ES	-> Video segment
     81				     ;
     82				     ; Exit:	     None
     83				     ;
     84				     ; Destroys:     AX	BX (CX)	DI
     85				     ;------------------------------------------------
     86				     ; Stack frame:
     87				     ;		     ...
     88				     ;		     LU	char	 [bp + 20]   //	H - color attr
     89				     ;		     _U	char	 [bp + 18]   //	L - symb attr
     90				     ;		     RU	char	 [bp + 16]   //
     91				     ;		     R_	char	 [bp + 14]   //
     92				     ;		     RB	char	 [bp + 12]   //
     93				     ;		     _B	char	 [bp + 10]   //
     94				     ;		     LB	char	 [bp + 8]    //
     95				     ;		     L_	char	 [bp + 6]    //
     96				     ;		     FI	char	 [bp + 4]    //
     97				     ;		     retAddr	 [bp + 2]
     98				     ;		     stored BP	 [bp]
     99				     ;		     stored CX	 [bp - 2]    //	size
    100				     ;		     ...
    101				     ;------------------------------------------------
    102
    103	0149			     DrawBox	     proc
    104	0149  55				     push bp
    105	014A  8B EC				     mov bp, sp			     ; Complete	stack frame
    106	014C  51				     push cx
    107
    108										     ;-------------------------------------------
    109										     ; Upper line
    110	014D  8B FB				     mov di, bx
    111	014F  8B 4E FE				     mov cx, [bp - 2]
    112	0152  B5 00				     mov ch, 0
    113	0154  FF 76 14				     push [bp +	20]
    114	0157  FF 76 12				     push [bp +	18]
Turbo Assembler	 Version 4.1	    03/03/23 01:27:37	    Page 3
probox.asm



    115	015A  FF 76 10				     push [bp +	16]
    116	015D  E8 00B5				     call DrawLine
    117	0160  83 C4 06				     add sp, 2*3d
    118										     ;-------------------------------------------
    119										     ; Middle line
    120	0163  8B 4E FE				     mov cx, [bp - 2]
    121	0166  B6 00				     mov dh, 0
    122	0168  8A D5				     mov dl, ch
    123	016A			     @@MiddleStep:				     ; <-----------------\
    124										     ;			 |
    125	016A  81 C3 00A0			     add bx, 160d		     ;			 |
    126	016E  8B FB				     mov di, bx			     ;			 |
    127	0170  8B 4E FE				     mov cx, [bp - 2]		     ;			 |
    128	0173  B5 00				     mov ch, 0			     ;			 |
    129	0175  FF 76 06				     push [bp +	6]		     ;			 |
    130	0178  FF 76 04				     push [bp +	4]		     ;			 |
    131	017B  FF 76 0E				     push [bp +	14]		     ;			 |
    132	017E  E8 0094				     call DrawLine		     ;			 |
    133	0181  83 C4 06				     add sp, 2*3d		     ;			 |
    134	0184  4A				     dec dx			     ;			 |
    135	0185  75 E3				     jnz @@MiddleStep		     ; >-----------------/
    136										     ;-------------------------------------------
    137										     ; Bottom line
    138	0187  81 C3 00A0			     add bx, 160d
    139	018B  8B FB				     mov di, bx
    140	018D  8B 4E FE				     mov cx, [bp - 2]
    141	0190  B5 00				     mov ch, 0
    142	0192  FF 76 08				     push [bp +	8]
    143	0195  FF 76 0A				     push [bp +	10]
    144	0198  FF 76 0C				     push [bp +	12]
    145	019B  E8 0077				     call DrawLine
    146	019E  83 C4 06				     add sp, 2*3d
    147										     ;-------------------------------------------
    148
    149
    150				     ;		       ; push cx			 ; Store cx to stack
    151				     ;		       mov dx, cx		       ; Store cx to dx
    152
    153				     ;		       mov al, byte ptr	[BoxSymbols]   ; "?" ->	ax (colored)
    154				     ;		       mov es:[bx], ax		       ;
    155
    156				     ;						       ;-------------------------------------------
    157
    158				     ;		       mov al, byte ptr	[BoxSymbols+1] ; "?" ->	ax (colored)
    159				     ;		       mov ch, 0		       ; cx = width
    160				     ;		       sub cx, 2d
    161				     ; @@UpLine:				       ; <-----------------\
    162				     ;		       add bx, 2		       ; b+=2 (Next char)  |
    163				     ;		       mov es:[bx], ax		       ;		   |
    164				     ;						       ;		   |
    165				     ;		       loop @@UpLine		       ; >-----------------/
    166
    167				     ;						       ;-------------------------------------------
    168
    169				     ;		       ; pop cx				 ; Clear stack
    170				     ;		       mov cx, dx
    171
Turbo Assembler	 Version 4.1	    03/03/23 01:27:37	    Page 4
probox.asm



    172	01A1  59				     pop cx
    173	01A2  5D				     pop bp			     ; Stack frame
    174	01A3  C3				     ret
    175	01A4			     DrawBox	     endp
    176
    177				     ;------------------------------------------------
    178				     ;------------------------------------------------
    179
    180				     include ..\LianLib\ScanNDec.asm
1   181				     ;------------------------------------------------
1   182				     ; Scans number as decimal
1   183				     ;------------------------------------------------
1   184				     ; Entry:	     none
1   185				     ;
1   186				     ; Expects:	     BX	= 0
1   187				     ;
1   188				     ; Exit:	     BX	= number to print
1   189				     ;
1   190				     ; Destroys:     AX	CL Si
1   191				     ;------------------------------------------------
1   192				     ;------------------------------------------------
1   193	01A4			     ScanNDec	     proc
1   194
1   195	01A4			     @@ScanDigit:				     ; <??????????????????????????
1   196										     ;				 ?
1   197	01A4  B4 01				     mov ah, 01h		     ; getc -> al		 ?
1   198	01A6  CD 21				     int 21h			     ; ^			 ?
1   199										     ;				 ?
1   200	01A8  3C 0D				     cmp al, 13d		     ; Stop scan if enter	 ?
1   201	01AA  74 15				     je	@@EndScanDigit		     ; >>?????????????????????????????????
1   202										     ;				 ?	 ?
1   203	01AC  8A C8				     mov cl, al			     ; Store al	to cl		 ?	 ?
1   204										     ;				 ?	 ?
1   205	01AE  8B C3				     mov ax, bx			     ; bx *= 10			 ?	 ?
1   206	01B0  BE 000A				     mov si, 10d		     ; ^			 ?	 ?
1   207	01B3  F7 E6				     mul si			     ; ^			 ?	 ?
1   208	01B5  8B D8				     mov bx, ax			     ; ^			 ?	 ?
1   209										     ;				 ?	 ?
1   210	01B7  8A C1				     mov al, cl			     ; Retore al from cl	 ?	 ?
1   211										     ;				 ?	 ?
1   212	01B9  2C 30				     sub al, "0"		     ; ASCII "0" offset		 ?	 ?
1   213										     ;				 ?	 ?
1   214	01BB  B4 00				     mov ah, 0d			     ; bx += al			 ?	 ?
1   215	01BD  03 D8				     add bx, ax			     ; ^			 ?	 ?
1   216										     ;				 ?	 ?
1   217	01BF  EB E3				     jmp @@ScanDigit		     ; >??????????????????????????	 ?
1   218										     ;					 ?
1   219	01C1			     @@EndScanDigit:				     ; <<?????????????????????????????????
1   220	01C1  C3				     ret
1   221
1   222	01C2			     ScanNDec	     endp
1   223
1   224				     ;------------------------------------------------
1   225				     ;------------------------------------------------
1   226
    227				     include ..\LianLib\PrntNBin.asm
1   228				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    03/03/23 01:27:37	    Page 5
probox.asm



1   229				     ; Prints number as	binary to vidmem
1   230				     ;------------------------------------------------
1   231				     ; Entry:	     AX	= number to print
1   232				     ;		     BX	= start	addr to	print
1   233				     ;
1   234				     ; Expects:	     ES	-> Video segment
1   235				     ;		     DH	= color	code
1   236				     ;
1   237				     ; Exit:	     None
1   238				     ;
1   239				     ; Destroys:     AX	BX CX DL
1   240				     ;------------------------------------------------
1   241				     ;------------------------------------------------
1   242	01C2			     PrintNBin	     proc
1   243
1   244	01C2  B9 0010				     mov cx, 16d		     ; 16 bit in 2 byte	in ax
1   245
1   246	01C5			     @@PrintDigit:				     ; <-------------------------\
1   247										     ;				 |
1   248	01C5  B2 01				     mov dl, 00000001b		     ; Mask			 |
1   249	01C7  22 D0				     and dl, al			     ;				 |
1   250	01C9  80 C2 30				     add dl, 30h		     ; ASCII "0" offset		 |
1   251										     ;				 |
1   252	01CC  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   253										     ;				 |
1   254	01CF  4B				     dec bx			     ; Next digit		 |
1   255	01D0  4B				     dec bx			     ; ^			 |
1   256										     ;				 |
1   257	01D1  D1 E8				     shr ax, 1d			     ; ax >> 1			 |
1   258										     ;				 |
1   259	01D3  E2 F0				     loop @@PrintDigit		     ; >-------------------------/
1   260
1   261	01D5  C3				     ret
1   262
1   263	01D6			     PrintNBin	     endp
1   264
1   265				     ;------------------------------------------------
1   266				     ;------------------------------------------------
1   267
    268				     include ..\LianLib\PrntNHex.asm
1   269				     ;------------------------------------------------
1   270				     ; Prints number as	hexagen	to vidmem
1   271				     ;------------------------------------------------
1   272				     ; Entry:	     AX	= number to print
1   273				     ;		     BX	= start	addr to	print
1   274				     ;
1   275				     ; Expects:	     ES	-> Video segment
1   276				     ;		     DH	= color	code
1   277				     ;
1   278				     ; Exit:	     None
1   279				     ;
1   280				     ; Destroys:     AX	BX CX DL Si
1   281				     ;------------------------------------------------
1   282				     ;------------------------------------------------
1   283	01D6			     PrintNHex	     proc
1   284
1   285	01D6  B9 0004				     mov cx, 4d			     ; 4 digits	in 2 byte in ax
Turbo Assembler	 Version 4.1	    03/03/23 01:27:37	    Page 6
probox.asm



1   286
1   287	01D9			     @@PrintDigit:				     ; <-------------------------\
1   288										     ;				 |
1   289	01D9  B2 0F				     mov dl, 00001111b		     ; Mask			 |
1   290	01DB  22 D0				     and dl, al			     ;				 |
1   291										     ;				 |
1   292	01DD  8B F2				     mov si, dx			     ; dl -> si			 |
1   293	01DF  83 E6 0F				     and si, 0Fh		     ;				 |
1   294										     ;				 |
1   295	01E2  8A 94 0000r			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
1   296										     ;				 |
1   297	01E6  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   298										     ;				 |
1   299	01E9  4B				     dec bx			     ; Next digit		 |
1   300	01EA  4B				     dec bx			     ; ^			 |
1   301										     ;				 |
1   302	01EB  D1 E8 D1 E8 D1 E8	D1+		     shr ax, 4d			     ; ax >> 4			 |
    303	      E8
1   304										     ;				 |
1   305	01F3  E2 E4				     loop @@PrintDigit		     ; >-------------------------/
1   306
1   307	01F5  C3				     ret
1   308
1   309	01F6			     PrintNHex	     endp
1   310
1   311				     ;------------------------------------------------
1   312				     ;------------------------------------------------
1   313
    314				     include ..\LianLib\PrntNDec.asm
1   315				     ;------------------------------------------------
1   316				     ; Prints number as	decimal	to vidmem
1   317				     ;------------------------------------------------
1   318				     ; Entry:	     AX	= number to print
1   319				     ;		     BX	= start	addr to	print
1   320				     ;
1   321				     ; Expects:	     ES	-> Video segment
1   322				     ;		     DH	= color	code
1   323				     ;
1   324				     ; Exit:	     None
1   325				     ;
1   326				     ; Destroys:     AX	BX CX DL Si
1   327				     ;------------------------------------------------
1   328				     ;------------------------------------------------
1   329	01F6			     PrintNDec	     proc
1   330
1   331	01F6  B9 0005				     mov cx, 5d			     ; 5 digits	in 2 byte in ax
1   332
1   333	01F9			     @@PrintDigit:				     ; <-------------------------\
1   334	01F9  8A EE				     mov ch, dh			     ; Store dh	to ch		 |
1   335										     ;				 |
1   336	01FB  BA 0000				     mov dx, 0d			     ; for division		 |
1   337	01FE  BE 000A				     mov si, 10d		     ; ax/10 ->	ax &		 |
1   338	0201  F7 F6				     div si			     ; & ax%10 -> dx		 | !!! dx < 10
1   339										     ;				 |
1   340	0203  8B F2				     mov si, dx			     ; dl -> si			 |
1   341										     ;				 |
1   342	0205  8A 94 0000r			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
Turbo Assembler	 Version 4.1	    03/03/23 01:27:37	    Page 7
probox.asm



1   343										     ;				 |
1   344	0209  8A F5				     mov dh, ch			     ; Restore dh from ch	 |
1   345	020B  B5 00				     mov ch, 0			     ; ^			 |
1   346										     ;				 |
1   347	020D  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   348										     ;				 |
1   349	0210  4B				     dec bx			     ; Next digit		 |
1   350	0211  4B				     dec bx			     ; ^			 |
1   351										     ;				 |
1   352										     ;				 |
1   353	0212  E2 E5				     loop @@PrintDigit		     ; >-------------------------/
1   354
1   355	0214  C3				     ret
1   356
1   357	0215			     PrintNDec	     endp
1   358
1   359				     ;------------------------------------------------
1   360				     ;------------------------------------------------
1   361
    362
    363				     include ..\LianLib\DrawLine.asm
1   364				     ;------------------------------------------------
1   365				     ; Draws line on the screen	(Pattern ABB~BBC)
1   366				     ;------------------------------------------------
1   367				     ; Entry:	     DI	= start	addr to	draw
1   368				     ;		     CX	= width	of line	(without A&C)
1   369				     ;
1   370				     ; Expects:	     ES	-> Video segment
1   371				     ;		     DF	= 0 (CLD)
1   372				     ;
1   373				     ; Exit:	     None
1   374				     ;
1   375				     ; Destroys:     AX	CX DI
1   376				     ;------------------------------------------------
1   377				     ; Stack frame:
1   378				     ;		     ...
1   379				     ;		     'A' char	 [bp + 8]    //	H - color attr
1   380				     ;		     'B' char	 [bp + 6]    //	L - symb attr
1   381				     ;		     'C' char	 [bp + 4]    //
1   382				     ;		     retAddr	 [bp + 2]
1   383				     ;		     stored BP	 [bp]
1   384				     ;		     ...
1   385				     ;------------------------------------------------
1   386				     ;Направление просмотра	 зависит	 от флага		    +
    387				     направления DF,	значение  которого  можно	менять  с    +
    388				     помощью команд CLD (DF:=0) и	STD (DF:=1).
1   389
1   390	0215			     DrawLine	     proc
1   391	0215  55				     push bp
1   392	0216  8B EC				     mov bp, sp			     ; Complete	stack frame
1   393
1   394	0218  8B 46 08				     mov ax, [bp + 8]
1   395	021B  AB				     stosw
1   396
1   397	021C  8B 46 06				     mov ax, [bp + 6]
1   398	021F  F3> AB				     rep stosw
1   399
Turbo Assembler	 Version 4.1	    03/03/23 01:27:37	    Page 8
probox.asm



1   400	0221  8B 46 04				     mov ax, [bp + 4]
1   401	0224  AB				     stosw
1   402
1   403	0225  5D				     pop bp			     ; Stack frame
1   404	0226  C3				     ret
1   405	0227			     DrawLine	     endp
1   406
1   407				     ;------------------------------------------------
1   408				     ;------------------------------------------------
1   409
    410
    411	0227			     .data
    412				     include ..\LianLib\Alphabet.asm
1   413	0000  30 31 32 33 34 35	36+  Alphabet:	     db	"0123456789ABCDEF"	     ; Alphabet	for printing (Thanks Ilya)
    414	      37 38 39 41 42 43	44+
    415	      45 46
1   416	0010  C9 CD BB BA BC C8	     BoxSymbols:     db	0c9h, 0cdh, 0bbh, 0bah,	0bch, 0c8h ; "╔═╗║╝╚"
1   417
1   418	0016  20 DA C9		     BoxAssetLU:     db	020h, 0dah, 0c9h
1   419	0019  20 C4 CD		     BoxAsset_U:     db	020h, 0c4h, 0cdh
1   420	001C  20 BF BB		     BoxAssetRU:     db	020h, 0bfh, 0bbh
1   421	001F  20 B3 BA		     BoxAssetR_:     db	020h, 0b3h, 0bah
1   422	0022  20 D9 BC		     BoxAssetRB:     db	020h, 0d9h, 0bch
1   423	0025  20 C4 CD		     BoxAsset_B:     db	020h, 0c4h, 0cdh
1   424	0028  20 C0 C8		     BoxAssetLB:     db	020h, 0c0h, 0c8h
1   425	002B  20 B3 BA		     BoxAssetL_:     db	020h, 0b3h, 0bah
1   426	002E  20 20 20		     BoxAssetFI:     db	020h, 020h, 020h
1   427
1   428				     ; 0:    1:┌─┐ 2:╔═╗
1   429				     ;	       │ │	 ║ ║
1   430				     ;	       └─┘   ╚═╝
1   431
    432
    433				     end	     Start
Turbo Assembler	 Version 4.1	    03/03/23 01:27:37	    Page 9
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/03/23"
??FILENAME			  Text	 "probox  "
??TIME				  Text	 "01:27:37"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@ENDSCANDIGIT			  Near	 DGROUP:01C1
@@MIDDLESTEP			  Near	 DGROUP:016A
@@PRINTDIGIT			  Near	 DGROUP:01C5
@@PRINTDIGIT			  Near	 DGROUP:01D9
@@PRINTDIGIT			  Near	 DGROUP:01F9
@@SCANDIGIT			  Near	 DGROUP:01A4
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 PROBOX
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ALPHABET			  Near	 DGROUP:0000
ARGCOUNT			  Near	 DGROUP:0080
ARGS				  Near	 DGROUP:0081
BOXASSETFI			  Near	 DGROUP:002E
BOXASSETLB			  Near	 DGROUP:0028
BOXASSETLU			  Near	 DGROUP:0016
BOXASSETL_			  Near	 DGROUP:002B
BOXASSETRB			  Near	 DGROUP:0022
BOXASSETRU			  Near	 DGROUP:001C
BOXASSETR_			  Near	 DGROUP:001F
BOXASSET_B			  Near	 DGROUP:0025
BOXASSET_U			  Near	 DGROUP:0019
BOXSYMBOLS			  Near	 DGROUP:0010
DRAWBOX				  Near	 DGROUP:0149
DRAWLINE			  Near	 DGROUP:0215
PRINTNBIN			  Near	 DGROUP:01C2
PRINTNDEC			  Near	 DGROUP:01F6
PRINTNHEX			  Near	 DGROUP:01D6
SCANNDEC			  Near	 DGROUP:01A4
START				  Near	 DGROUP:0100

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0031 Word	  Public  DATA
  _TEXT				  16  0227 Word	  Public  CODE
