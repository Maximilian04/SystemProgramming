Turbo Assembler	 Version 4.1	    03/03/23 11:46:38	    Page 1
probox.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     locals @@
      4
      5				     org 80h
      6	0080  ??		     ArgCount:	     db	?
      7	0081  ??		     Args:	     db	?
      8
      9				     org 100h
     10
     11	0100			     Start:
     12
     13	0100  B8 B800				     mov ax, 0b800h		     ; адрес сегмента с		    +
     14				     видеопамятью -> es
     15	0103  8E C0				     mov es, ax			     ;
     16	0105  8C D0				     mov ax, ss			     ; Segment with stack, code, etc.
     17	0107  8E D8				     mov ds, ax			     ;
     18
     19	0109  E8 0057				     call GetArgs
     20	010C  85 C0				     test ax, ax
     21	010E  74 03				     jz	@@ContinueHere1
     22	0110  EB 4C 90				     jmp ReturnProgram		     ; >>>>>>>>>>>>>>
     23	0113					     @@ContinueHere1:
     24
     25						     ; mov dh, 01Ah
     26						     ; mov ah, 0
     27						     ; mov al, byte ptr	[ArgCount]
     28						     ; mov bx, 160d*17 + 160d/2	- 18d +	4d; Середина строчки
     29						     ; call PrintNDec
     30
     31	0113  BB 0002				     mov bx, 2
     32
     33	0116  B4 0A				     mov ah, 00Ah		     ; Light green on black
     34	0118  8A 87 0016r			     mov al, byte ptr [BoxAssetLU + bx]
     35	011C  50				     push ax
     36	011D  8A 87 0019r			     mov al, byte ptr [BoxAsset_U + bx]
     37	0121  50				     push ax
     38	0122  8A 87 001Cr			     mov al, byte ptr [BoxAssetRU + bx]
     39	0126  50				     push ax
     40	0127  8A 87 001Fr			     mov al, byte ptr [BoxAssetR_ + bx]
     41	012B  50				     push ax
     42	012C  8A 87 0022r			     mov al, byte ptr [BoxAssetRB + bx]
     43	0130  50				     push ax
     44	0131  8A 87 0025r			     mov al, byte ptr [BoxAsset_B + bx]
     45	0135  50				     push ax
     46	0136  8A 87 0028r			     mov al, byte ptr [BoxAssetLB + bx]
     47	013A  50				     push ax
     48	013B  8A 87 002Br			     mov al, byte ptr [BoxAssetL_ + bx]
     49	013F  50				     push ax
     50	0140  8A 87 002Er			     mov al, byte ptr [BoxAssetFI + bx]
     51	0144  50				     push ax
     52	0145  8A 2E 0031r			     mov ch, byte ptr [boxHeightPos]
     53	0149  8A 0E 0032r			     mov cl, byte ptr [boxWidthPos]
     54	014D  E8 007F				     call CalculateVidMemPos
     55	0150  8A 2E 0033r			     mov ch, byte ptr [boxHeight]
     56	0154  8A 0E 0034r			     mov cl, byte ptr [boxWidth]
     57	0158  E8 011B				     call DrawBox
Turbo Assembler	 Version 4.1	    03/03/23 11:46:38	    Page 2
probox.asm



     58	015B  83 C4 12				     add sp, 2*9d
     59
     60
     61						     ; mov dh, 00000010b	       ; Dark green on black
     62						     ; pop ax			       ; Scanned number
     63						     ; push ax			       ;
     64
     65						     ; call PrintNBin
     66
     67	015E			     ReturnProgram:				     ; <<<<<<<<<<<<<<
     68	015E  B8 4C00				     mov ax, 4c00h		     ; exit(0)
     69	0161  CD 21				     int 21h
     70
     71
     72
     73
     74				     ;------------------------------------------------
     75				     ; Gets information	from cmd argument
     76				     ;------------------------------------------------
     77				     ; Entry:	     None
     78				     ;
     79				     ; Expects:	     None
     80				     ;
     81				     ; Exit:	     AX	= 0 if no errors, 1 contrary
     82				     ;
     83				     ; Destroys:     BX	SI (DH if error)
     84				     ;------------------------------------------------
     85				     ; Stack frame:
     86				     ;		     ...
     87				     ;		     retAddr	 [bp + 2]
     88				     ;		     stored BP	 [bp]
     89				     ;		     ...
     90				     ;------------------------------------------------
     91
     92	0163			     GetArgs	     proc
     93	0163  55				     push bp
     94	0164  8B EC				     mov bp, sp			     ; Complete	stack frame
     95
     96
     97	0166  B4 00				     mov ah, 0			     ; At least	one argument!
     98	0168  A0 0080r				     mov al, byte ptr [ArgCount]     ;
     99	016B  BB 0002				     mov bx, 2d			     ;
    100	016E  3B C3				     cmp ax, bx			     ;
    101	0170  7D 03				     jnl @@ContinueHere1	     ;
    102	0172  EB 4B 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    103	0175					     @@ContinueHere1:		     ;
    104
    105								 ; ONE STEP:
    106								 ; arg -> bx
    107								 ; if the last 1 -> ax
    108								 ; DS:SI -> next
    109	0175  B2 20				     mov dl, 020h		     ; 20h Terminator
    110	0177  B6 0D				     mov dh, 00Dh		     ; 0Dh TerminatorEnd
    111	0179  BE 0082r				     mov si, offset Args + 1	     ; First argument
    112
    113	017C  BB 0000				     mov bx, 0
    114	017F  E8 00CC				     call MScnNDec
Turbo Assembler	 Version 4.1	    03/03/23 11:46:38	    Page 3
probox.asm



    115	0182  88 1E 0031r			     mov byte ptr [boxHeightPos], bl
    116	0186  85 C0				     test ax, ax
    117	0188  74 03				     jz	@@ContinueHere2
    118	018A  EB 33 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    119	018D					     @@ContinueHere2:
    120
    121
    122	018D  BB 0000				     mov bx, 0
    123	0190  E8 00BB				     call MScnNDec
    124	0193  88 1E 0032r			     mov byte ptr [boxWidthPos], bl
    125	0197  85 C0				     test ax, ax
    126	0199  74 03				     jz	@@ContinueHere3
    127	019B  EB 22 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    128	019E					     @@ContinueHere3:
    129
    130	019E  BB 0000				     mov bx, 0
    131	01A1  E8 00AA				     call MScnNDec
    132	01A4  88 1E 0033r			     mov byte ptr [boxHeight], bl
    133	01A8  85 C0				     test ax, ax
    134	01AA  74 03				     jz	@@ContinueHere4
    135	01AC  EB 11 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    136	01AF					     @@ContinueHere4:
    137
    138	01AF  BB 0000				     mov bx, 0
    139	01B2  E8 0099				     call MScnNDec
    140	01B5  88 1E 0034r			     mov byte ptr [boxWidth], bl
    141						     ; test ax,	ax
    142						     ; jz @@ContinueHere
    143						     ; jmp @@SetErrorNoArg	       ; >>>>>>>>>>>>>>
    144						     ; @@ContinueHere:
    145
    146
    147
    148
    149
    150						     ; mov ah, 0
    151						     ; mov al, bl
    152						     ; mov dh, 004h
    153						     ; mov bx, 160d*4+7d*2
    154						     ; call PrintNHex
    155
    156
    157	01B9  B8 0000				     mov ax, 0
    158	01BC  EB 0F 90				     jmp @@ProcEnd		     ; >-\
    159	01BF			     @@SetErrorNoArg:				     ; <<|<<<<<<<<<<<
    160	01BF  B8 0239				     mov ax, 0239h		     ; Error code: No argument (more expected) : 239
    161	01C2  B6 0C				     mov dh, 00Ch		     ;	 |
    162	01C4  BB 0286				     mov bx, 160d*4+3d*2	     ;	 |
    163	01C7  E8 0045				     call PrintNHex		     ;	 |
    164	01CA  B8 0239				     mov ax, 0239h		     ;	 |
    165										     ;	 |
    166										     ;	 |
    167	01CD			     @@ProcEnd:					     ; <-/
    168	01CD  5D				     pop bp			     ; Stack frame
    169	01CE  C3				     ret
    170	01CF			     GetArgs	     endp
    171
Turbo Assembler	 Version 4.1	    03/03/23 11:46:38	    Page 4
probox.asm



    172				     ;------------------------------------------------
    173				     ;------------------------------------------------
    174
    175
    176				     ;------------------------------------------------
    177				     ; Calculate video mem offset by position
    178				     ;------------------------------------------------
    179				     ; Entry:	     CH	= heightPosition
    180				     ;		     CL	= widthPosition
    181				     ;
    182				     ; Expects:	     None
    183				     ;
    184				     ; Exit:	     BX	= start	addr to	draw
    185				     ;
    186				     ; Destroys:     AX
    187				     ;------------------------------------------------
    188				     ; Stack frame:
    189				     ;		     ...
    190				     ;		     retAddr	 []
    191				     ;		     ...
    192				     ;------------------------------------------------
    193
    194	01CF			     CalculateVidMemPos	 proc
    195						     ; push bp
    196						     ; mov bp, sp		       ; Complete stack	frame
    197
    198
    199						     ; bx = 160d * ch +	2 * cl
    200	01CF  B7 00				     mov bh, 0
    201	01D1  8A D9				     mov bl, cl
    202	01D3  D1 E3				     sal bx, 1
    203
    204	01D5  B8 00A0				     mov ax, 160d
    205	01D8  F6 E5				     mul ch
    206	01DA  03 D8				     add bx, ax
    207
    208						     ; mov ax, bx
    209						     ; mov bx, 80d
    210						     ; call PrintNDec
    211
    212
    213						     ; pop bp			       ; Stack frame
    214	01DC  C3				     ret
    215	01DD			     CalculateVidMemPos	 endp
    216
    217				     ;------------------------------------------------
    218				     ;------------------------------------------------
    219
    220				     include ..\LianLib\ScanNDec.asm
1   221				     ;------------------------------------------------
1   222				     ; Scans number as decimal
1   223				     ;------------------------------------------------
1   224				     ; Entry:	     none
1   225				     ;
1   226				     ; Expects:	     BX	= 0
1   227				     ;
1   228				     ; Exit:	     BX	= number to print
Turbo Assembler	 Version 4.1	    03/03/23 11:46:38	    Page 5
probox.asm



1   229				     ;
1   230				     ; Destroys:     AX	CL Si
1   231				     ;------------------------------------------------
1   232				     ;------------------------------------------------
1   233	01DD			     ScanNDec	     proc
1   234
1   235	01DD			     @@ScanDigit:				     ; <-------------------------\
1   236										     ;				 |
1   237	01DD  B4 01				     mov ah, 01h		     ; getc -> al		 |
1   238	01DF  CD 21				     int 21h			     ; ^			 |
1   239										     ;				 |
1   240	01E1  3C 0D				     cmp al, 13d		     ; Stop scan if enter	 |
1   241	01E3  74 15				     je	@@EndScanDigit		     ; >>========================|=======\\
1   242										     ;				 |	 ||
1   243	01E5  8A C8				     mov cl, al			     ; Store al	to cl		 |	 ||
1   244										     ;				 |	 ||
1   245	01E7  8B C3				     mov ax, bx			     ; bx *= 10			 |	 ||
1   246	01E9  BE 000A				     mov si, 10d		     ; ^			 |	 ||
1   247	01EC  F7 E6				     mul si			     ; ^			 |	 ||
1   248	01EE  8B D8				     mov bx, ax			     ; ^			 |	 ||
1   249										     ;				 |	 ||
1   250	01F0  8A C1				     mov al, cl			     ; Retore al from cl	 |	 ||
1   251										     ;				 |	 ||
1   252	01F2  2C 30				     sub al, "0"		     ; ASCII "0" offset		 |	 ||
1   253										     ;				 |	 ||
1   254	01F4  B4 00				     mov ah, 0d			     ; bx += al			 |	 ||
1   255	01F6  03 D8				     add bx, ax			     ; ^			 |	 ||
1   256										     ;				 |	 ||
1   257	01F8  EB E3				     jmp @@ScanDigit		     ; >-------------------------/	 ||
1   258										     ;					 ||
1   259	01FA			     @@EndScanDigit:				     ; <<================================//
1   260	01FA  C3				     ret
1   261
1   262	01FB			     ScanNDec	     endp
1   263
1   264				     ;------------------------------------------------
1   265				     ;------------------------------------------------
1   266
    267				     include ..\LianLib\PrntNBin.asm
1   268				     ;------------------------------------------------
1   269				     ; Prints number as	binary to vidmem
1   270				     ;------------------------------------------------
1   271				     ; Entry:	     AX	= number to print
1   272				     ;		     BX	= start	addr to	print
1   273				     ;
1   274				     ; Expects:	     ES	-> Video segment
1   275				     ;		     DH	= color	code
1   276				     ;
1   277				     ; Exit:	     None
1   278				     ;
1   279				     ; Destroys:     AX	BX CX DL
1   280				     ;------------------------------------------------
1   281				     ;------------------------------------------------
1   282	01FB			     PrintNBin	     proc
1   283
1   284	01FB  B9 0010				     mov cx, 16d		     ; 16 bit in 2 byte	in ax
1   285
Turbo Assembler	 Version 4.1	    03/03/23 11:46:38	    Page 6
probox.asm



1   286	01FE			     @@PrintDigit:				     ; <-------------------------\
1   287										     ;				 |
1   288	01FE  B2 01				     mov dl, 00000001b		     ; Mask			 |
1   289	0200  22 D0				     and dl, al			     ;				 |
1   290	0202  80 C2 30				     add dl, 30h		     ; ASCII "0" offset		 |
1   291										     ;				 |
1   292	0205  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   293										     ;				 |
1   294	0208  4B				     dec bx			     ; Next digit		 |
1   295	0209  4B				     dec bx			     ; ^			 |
1   296										     ;				 |
1   297	020A  D1 E8				     shr ax, 1d			     ; ax >> 1			 |
1   298										     ;				 |
1   299	020C  E2 F0				     loop @@PrintDigit		     ; >-------------------------/
1   300
1   301	020E  C3				     ret
1   302
1   303	020F			     PrintNBin	     endp
1   304
1   305				     ;------------------------------------------------
1   306				     ;------------------------------------------------
1   307
    308				     include ..\LianLib\PrntNHex.asm
1   309				     ;------------------------------------------------
1   310				     ; Prints number as	hexagen	to vidmem
1   311				     ;------------------------------------------------
1   312				     ; Entry:	     AX	= number to print
1   313				     ;		     BX	= start	addr to	print
1   314				     ;
1   315				     ; Expects:	     ES	-> Video segment
1   316				     ;		     DH	= color	code
1   317				     ;
1   318				     ; Exit:	     None
1   319				     ;
1   320				     ; Destroys:     AX	BX CX DL Si
1   321				     ;------------------------------------------------
1   322				     ;------------------------------------------------
1   323	020F			     PrintNHex	     proc
1   324
1   325	020F  B9 0004				     mov cx, 4d			     ; 4 digits	in 2 byte in ax
1   326
1   327	0212			     @@PrintDigit:				     ; <-------------------------\
1   328										     ;				 |
1   329	0212  B2 0F				     mov dl, 00001111b		     ; Mask			 |
1   330	0214  22 D0				     and dl, al			     ;				 |
1   331										     ;				 |
1   332	0216  8B F2				     mov si, dx			     ; dl -> si			 |
1   333	0218  83 E6 0F				     and si, 0Fh		     ;				 |
1   334										     ;				 |
1   335	021B  8A 94 0000r			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
1   336										     ;				 |
1   337	021F  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   338										     ;				 |
1   339	0222  4B				     dec bx			     ; Next digit		 |
1   340	0223  4B				     dec bx			     ; ^			 |
1   341										     ;				 |
1   342	0224  D1 E8 D1 E8 D1 E8	D1+		     shr ax, 4d			     ; ax >> 4			 |
Turbo Assembler	 Version 4.1	    03/03/23 11:46:38	    Page 7
probox.asm



    343	      E8
1   344										     ;				 |
1   345	022C  E2 E4				     loop @@PrintDigit		     ; >-------------------------/
1   346
1   347	022E  C3				     ret
1   348
1   349	022F			     PrintNHex	     endp
1   350
1   351				     ;------------------------------------------------
1   352				     ;------------------------------------------------
1   353
    354				     include ..\LianLib\PrntNDec.asm
1   355				     ;------------------------------------------------
1   356				     ; Prints number as	decimal	to vidmem
1   357				     ;------------------------------------------------
1   358				     ; Entry:	     AX	= number to print
1   359				     ;		     BX	= start	addr to	print
1   360				     ;
1   361				     ; Expects:	     ES	-> Video segment
1   362				     ;		     DH	= color	code
1   363				     ;
1   364				     ; Exit:	     None
1   365				     ;
1   366				     ; Destroys:     AX	BX CX DL Si
1   367				     ;------------------------------------------------
1   368				     ;------------------------------------------------
1   369	022F			     PrintNDec	     proc
1   370
1   371	022F  B9 0005				     mov cx, 5d			     ; 5 digits	in 2 byte in ax
1   372
1   373	0232			     @@PrintDigit:				     ; <-------------------------\
1   374	0232  8A EE				     mov ch, dh			     ; Store dh	to ch		 |
1   375										     ;				 |
1   376	0234  BA 0000				     mov dx, 0d			     ; for division		 |
1   377	0237  BE 000A				     mov si, 10d		     ; ax/10 ->	ax &		 |
1   378	023A  F7 F6				     div si			     ; & ax%10 -> dx		 | !!! dx < 10
1   379										     ;				 |
1   380	023C  8B F2				     mov si, dx			     ; dl -> si			 |
1   381										     ;				 |
1   382	023E  8A 94 0000r			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
1   383										     ;				 |
1   384	0242  8A F5				     mov dh, ch			     ; Restore dh from ch	 |
1   385	0244  B5 00				     mov ch, 0			     ; ^			 |
1   386										     ;				 |
1   387	0246  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   388										     ;				 |
1   389	0249  4B				     dec bx			     ; Next digit		 |
1   390	024A  4B				     dec bx			     ; ^			 |
1   391										     ;				 |
1   392										     ;				 |
1   393	024B  E2 E5				     loop @@PrintDigit		     ; >-------------------------/
1   394
1   395	024D  C3				     ret
1   396
1   397	024E			     PrintNDec	     endp
1   398
1   399				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    03/03/23 11:46:38	    Page 8
probox.asm



1   400				     ;------------------------------------------------
1   401
    402				     include ..\LianLib\MScnNDec.asm
1   403				     ;------------------------------------------------
1   404				     ; Scans number as decimal from string in memory
1   405				     ;------------------------------------------------
1   406				     ; Entry:	     DS:SI = memory ptr
1   407				     ;
1   408				     ; Expects:	     BX	= 0
1   409				     ;		     DL	= terminator char 1
1   410				     ;		     DH	= terminator char 2 (TerminatorEnd)
1   411				     ;		     DF	= 0 (CLD) [or backward]
1   412				     ;
1   413				     ; Exit:	     BX	= scanned number
1   414				     ;		     SI	to next	word
1   415				     ;		     AX	= 0 if terminator, 1 if	TerminatorEnd
1   416				     ;
1   417				     ; Destroys:     None
1   418				     ;------------------------------------------------
1   419				     ;------------------------------------------------
1   420	024E			     MScnNDec	     proc
1   421
1   422	024E			     @@ScanDigit:				     ; <-------------------------\
1   423										     ;				 |
1   424						     ; mov ah, 01h		     ; getc -> al		 |
1   425						     ; int 21h			     ; ^			 |
1   426	024E  AC				     lodsb			     ; char -> al		 |
1   427										     ;				 |
1   428						     ; cmp al, 13d		     ; Stop scan if enter	 |
1   429	024F  3A C2				     cmp al, dl			     ; Stop scan if terminator	 |
1   430	0251  74 19				     je	@@TermScanDigit		     ; >>========================|=======\\
1   431	0253  3A C6				     cmp al, dh			     ;				 |	 ||
1   432	0255  74 1B				     je	@@TerminatorEndScanDigit     ; >>========================|===========\\
1   433										     ;				 |	 ||  ||
1   434						     ; mov cl, al		     ; Store al	to cl		 |	 ||  ||
1   435	0257  50				     push ax			     ; Store ax			 |	 ||  ||
1   436	0258  52				     push dx			     ; Store dx			 |	 ||  ||
1   437										     ;				 |	 ||  ||
1   438	0259  8B C3				     mov ax, bx			     ; bx *= 10			 |	 ||  ||
1   439	025B  BA 000A				     mov dx, 10d		     ; ^			 |	 ||  ||
1   440	025E  F7 E2				     mul dx			     ; ^			 |	 ||  ||
1   441	0260  8B D8				     mov bx, ax			     ; ^			 |	 ||  ||
1   442										     ;				 |	 ||  ||
1   443	0262  5A				     pop dx			     ; Restore dx		 |	 ||  ||
1   444	0263  58				     pop ax			     ; Restore ax		 |	 ||  ||
1   445						     ; mov al, cl		     ; Restore al from cl	 |	 ||  ||
1   446										     ;				 |	 ||  ||
1   447	0264  2C 30				     sub al, "0"		     ; ASCII "0" offset		 |	 ||  ||
1   448										     ;				 |	 ||  ||
1   449	0266  B4 00				     mov ah, 0d			     ; bx += al			 |	 ||  ||
1   450	0268  03 D8				     add bx, ax			     ; ^			 |	 ||  ||
1   451										     ;				 |	 ||  ||
1   452	026A  EB E2				     jmp @@ScanDigit		     ; >-------------------------/	 ||  ||
1   453										     ;					 ||  ||
1   454	026C			     @@TermScanDigit:				     ; <<================================//  ||
1   455	026C  B8 0000				     mov ax, 0			     ;					     ||
1   456	026F  EB 04 90				     jmp @@EndProc		     ; >-----\				     ||
Turbo Assembler	 Version 4.1	    03/03/23 11:46:38	    Page 9
probox.asm



1   457	0272			     @@TerminatorEndScanDigit:			     ; <<====|===============================//
1   458	0272  B8 0001				     mov ax, 1			     ;	     |
1   459	0275			     @@EndProc:					     ; <-----/
1   460	0275  C3				     ret
1   461
1   462	0276			     MScnNDec	     endp
1   463
1   464				     ;------------------------------------------------
1   465				     ;------------------------------------------------
1   466
    467
    468				     include ..\LianLib\ProBox.asm
1   469				     ;------------------------------------------------
1   470				     ; Draws cool box on the screen
1   471				     ;------------------------------------------------
1   472				     ; Entry:	     BX	= start	addr to	draw
1   473				     ;		     CH	= height of box	(without frame)
1   474				     ;		     CL	= width	of box (without	frame)
1   475				     ;
1   476				     ; Expects:	     ES	-> Video segment
1   477				     ;
1   478				     ; Exit:	     None
1   479				     ;
1   480				     ; Destroys:     AX	BX (CX)	DX DI
1   481				     ;------------------------------------------------
1   482				     ; Stack frame:
1   483				     ;		     ...
1   484				     ;		     LU	char	 [bp + 20]   //	H - color attr
1   485				     ;		     _U	char	 [bp + 18]   //	L - symb attr
1   486				     ;		     RU	char	 [bp + 16]   //
1   487				     ;		     R_	char	 [bp + 14]   //
1   488				     ;		     RB	char	 [bp + 12]   //
1   489				     ;		     _B	char	 [bp + 10]   //
1   490				     ;		     LB	char	 [bp + 8]    //
1   491				     ;		     L_	char	 [bp + 6]    //
1   492				     ;		     FI	char	 [bp + 4]    //
1   493				     ;		     retAddr	 [bp + 2]
1   494				     ;		     stored BP	 [bp]
1   495				     ;		     stored CX	 [bp - 2]    //	size
1   496				     ;		     ...
1   497				     ;------------------------------------------------
1   498
1   499	0276			     DrawBox	     proc
1   500	0276  55				     push bp
1   501	0277  8B EC				     mov bp, sp			     ; Complete	stack frame
1   502	0279  51				     push cx
1   503
1   504										     ;-------------------------------------------
1   505										     ; Upper line
1   506	027A  8B FB				     mov di, bx
1   507	027C  8B 4E FE				     mov cx, [bp - 2]
1   508	027F  B5 00				     mov ch, 0
1   509	0281  FF 76 14				     push [bp +	20]
1   510	0284  FF 76 12				     push [bp +	18]
1   511	0287  FF 76 10				     push [bp +	16]
1   512	028A  E8 0044				     call DrawLine
1   513	028D  83 C4 06				     add sp, 2*3d
Turbo Assembler	 Version 4.1	    03/03/23 11:46:38	    Page 10
probox.asm



1   514										     ;-------------------------------------------
1   515										     ; Middle line
1   516	0290  8B 4E FE				     mov cx, [bp - 2]
1   517	0293  B6 00				     mov dh, 0
1   518	0295  8A D5				     mov dl, ch
1   519	0297			     @@MiddleStep:				     ; <-----------------\
1   520										     ;			 |
1   521	0297  81 C3 00A0			     add bx, 160d		     ;			 |
1   522	029B  8B FB				     mov di, bx			     ;			 |
1   523	029D  8B 4E FE				     mov cx, [bp - 2]		     ;			 |
1   524	02A0  B5 00				     mov ch, 0			     ;			 |
1   525	02A2  FF 76 06				     push [bp +	6]		     ;			 |
1   526	02A5  FF 76 04				     push [bp +	4]		     ;			 |
1   527	02A8  FF 76 0E				     push [bp +	14]		     ;			 |
1   528	02AB  E8 0023				     call DrawLine		     ;			 |
1   529	02AE  83 C4 06				     add sp, 2*3d		     ;			 |
1   530	02B1  4A				     dec dx			     ;			 |
1   531	02B2  75 E3				     jnz @@MiddleStep		     ; >-----------------/
1   532										     ;-------------------------------------------
1   533										     ; Bottom line
1   534	02B4  81 C3 00A0			     add bx, 160d
1   535	02B8  8B FB				     mov di, bx
1   536	02BA  8B 4E FE				     mov cx, [bp - 2]
1   537	02BD  B5 00				     mov ch, 0
1   538	02BF  FF 76 08				     push [bp +	8]
1   539	02C2  FF 76 0A				     push [bp +	10]
1   540	02C5  FF 76 0C				     push [bp +	12]
1   541	02C8  E8 0006				     call DrawLine
1   542	02CB  83 C4 06				     add sp, 2*3d
1   543										     ;-------------------------------------------
1   544
1   545	02CE  59				     pop cx
1   546	02CF  5D				     pop bp			     ; Stack frame
1   547	02D0  C3				     ret
1   548	02D1			     DrawBox	     endp
1   549
1   550				     ;------------------------------------------------
1   551				     ;------------------------------------------------
1   552
1   553				     ; needs <include ?\LianLib\DrawLine.asm>
1   554
    555				     include ..\LianLib\DrawLine.asm
1   556				     ;------------------------------------------------
1   557				     ; Draws line on the screen	(Pattern ABB~BBC)
1   558				     ;------------------------------------------------
1   559				     ; Entry:	     DI	= start	addr to	draw
1   560				     ;		     CX	= width	of line	(without A&C)
1   561				     ;
1   562				     ; Expects:	     ES	-> Video segment
1   563				     ;		     DF	= 0 (CLD)
1   564				     ;
1   565				     ; Exit:	     None
1   566				     ;
1   567				     ; Destroys:     AX	CX DI
1   568				     ;------------------------------------------------
1   569				     ; Stack frame:
1   570				     ;		     ...
Turbo Assembler	 Version 4.1	    03/03/23 11:46:38	    Page 11
probox.asm



1   571				     ;		     'A' char	 [bp + 8]    //	H - color attr
1   572				     ;		     'B' char	 [bp + 6]    //	L - symb attr
1   573				     ;		     'C' char	 [bp + 4]    //
1   574				     ;		     retAddr	 [bp + 2]
1   575				     ;		     stored BP	 [bp]
1   576				     ;		     ...
1   577				     ;------------------------------------------------
1   578				     ;Направление просмотра	 зависит	 от флага		    +
    579				     направления DF,	значение  которого  можно	менять  с    +
    580				     помощью команд CLD (DF:=0) и	STD (DF:=1).
1   581
1   582	02D1			     DrawLine	     proc
1   583	02D1  55				     push bp
1   584	02D2  8B EC				     mov bp, sp			     ; Complete	stack frame
1   585
1   586	02D4  8B 46 08				     mov ax, [bp + 8]
1   587	02D7  AB				     stosw
1   588
1   589	02D8  8B 46 06				     mov ax, [bp + 6]
1   590	02DB  F3> AB				     rep stosw
1   591
1   592	02DD  8B 46 04				     mov ax, [bp + 4]
1   593	02E0  AB				     stosw
1   594
1   595	02E1  5D				     pop bp			     ; Stack frame
1   596	02E2  C3				     ret
1   597	02E3			     DrawLine	     endp
1   598
1   599				     ;------------------------------------------------
1   600				     ;------------------------------------------------
1   601
    602
    603	02E3			     .data
    604				     include ..\LianLib\Alphabet.asm
1   605	0000  30 31 32 33 34 35	36+  Alphabet:	     db	"0123456789ABCDEF"	     ; Alphabet	for printing (Thanks Ilya)
    606	      37 38 39 41 42 43	44+
    607	      45 46
1   608	0010  C9 CD BB BA BC C8	     BoxSymbols:     db	0c9h, 0cdh, 0bbh, 0bah,	0bch, 0c8h ; "╔═╗║╝╚"
1   609
1   610	0016  20 DA C9		     BoxAssetLU:     db	020h, 0dah, 0c9h
1   611	0019  20 C4 CD		     BoxAsset_U:     db	020h, 0c4h, 0cdh
1   612	001C  20 BF BB		     BoxAssetRU:     db	020h, 0bfh, 0bbh
1   613	001F  20 B3 BA		     BoxAssetR_:     db	020h, 0b3h, 0bah
1   614	0022  20 D9 BC		     BoxAssetRB:     db	020h, 0d9h, 0bch
1   615	0025  20 C4 CD		     BoxAsset_B:     db	020h, 0c4h, 0cdh
1   616	0028  20 C0 C8		     BoxAssetLB:     db	020h, 0c0h, 0c8h
1   617	002B  20 B3 BA		     BoxAssetL_:     db	020h, 0b3h, 0bah
1   618	002E  20 20 20		     BoxAssetFI:     db	020h, 020h, 020h
1   619
1   620				     ; 0:    1:┌─┐ 2:╔═╗
1   621				     ;	       │ │	 ║ ║
1   622				     ;	       └─┘   ╚═╝
1   623
    624
    625	0031  ??		     boxHeightPos:   db	?
    626	0032  ??		     boxWidthPos:    db	?
    627	0033  ??		     boxHeight:	     db	?
Turbo Assembler	 Version 4.1	    03/03/23 11:46:38	    Page 12
probox.asm



    628	0034  ??		     boxWidth:	     db	?
    629
    630				     end	     Start
Turbo Assembler	 Version 4.1	    03/03/23 11:46:38	    Page 13
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/03/23"
??FILENAME			  Text	 "probox  "
??TIME				  Text	 "11:46:38"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CONTINUEHERE1			  Near	 DGROUP:0113
@@CONTINUEHERE1			  Near	 DGROUP:0175
@@CONTINUEHERE2			  Near	 DGROUP:018D
@@CONTINUEHERE3			  Near	 DGROUP:019E
@@CONTINUEHERE4			  Near	 DGROUP:01AF
@@ENDPROC			  Near	 DGROUP:0275
@@ENDSCANDIGIT			  Near	 DGROUP:01FA
@@MIDDLESTEP			  Near	 DGROUP:0297
@@PRINTDIGIT			  Near	 DGROUP:01FE
@@PRINTDIGIT			  Near	 DGROUP:0212
@@PRINTDIGIT			  Near	 DGROUP:0232
@@PROCEND			  Near	 DGROUP:01CD
@@SCANDIGIT			  Near	 DGROUP:01DD
@@SCANDIGIT			  Near	 DGROUP:024E
@@SETERRORNOARG			  Near	 DGROUP:01BF
@@TERMINATORENDSCANDIGIT	  Near	 DGROUP:0272
@@TERMSCANDIGIT			  Near	 DGROUP:026C
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 PROBOX
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ALPHABET			  Near	 DGROUP:0000
ARGCOUNT			  Near	 DGROUP:0080
ARGS				  Near	 DGROUP:0081
BOXASSETFI			  Near	 DGROUP:002E
BOXASSETLB			  Near	 DGROUP:0028
BOXASSETLU			  Near	 DGROUP:0016
BOXASSETL_			  Near	 DGROUP:002B
BOXASSETRB			  Near	 DGROUP:0022
BOXASSETRU			  Near	 DGROUP:001C
BOXASSETR_			  Near	 DGROUP:001F
BOXASSET_B			  Near	 DGROUP:0025
BOXASSET_U			  Near	 DGROUP:0019
BOXHEIGHT			  Near	 DGROUP:0033
BOXHEIGHTPOS			  Near	 DGROUP:0031
BOXSYMBOLS			  Near	 DGROUP:0010
BOXWIDTH			  Near	 DGROUP:0034
BOXWIDTHPOS			  Near	 DGROUP:0032
CALCULATEVIDMEMPOS		  Near	 DGROUP:01CF
DRAWBOX				  Near	 DGROUP:0276
DRAWLINE			  Near	 DGROUP:02D1
GETARGS				  Near	 DGROUP:0163
Turbo Assembler	 Version 4.1	    03/03/23 11:46:38	    Page 14
Symbol Table



MSCNNDEC			  Near	 DGROUP:024E
PRINTNBIN			  Near	 DGROUP:01FB
PRINTNDEC			  Near	 DGROUP:022F
PRINTNHEX			  Near	 DGROUP:020F
RETURNPROGRAM			  Near	 DGROUP:015E
SCANNDEC			  Near	 DGROUP:01DD
START				  Near	 DGROUP:0100

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0035 Word	  Public  DATA
  _TEXT				  16  02E3 Word	  Public  CODE
