Turbo Assembler	 Version 4.1	    03/03/23 14:36:02	    Page 1
probox.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     locals @@
      4
      5				     org 80h
      6	0080  ??		     ArgCount:	     db	?
      7	0081  ??		     Args:	     db	?
      8
      9				     org 100h
     10
     11	0100			     Start:
     12
     13	0100  B8 B800				     mov ax, 0b800h		     ; адрес сегмента с		    +
     14				     видеопамятью -> es
     15	0103  8E C0				     mov es, ax			     ;
     16	0105  8C D0				     mov ax, ss			     ; Segment with stack, code, etc.
     17	0107  8E D8				     mov ds, ax			     ;
     18
     19	0109  E8 005C				     call GetArgs
     20	010C  85 C0				     test ax, ax
     21	010E  74 03				     jz	@@ContinueHere1
     22	0110  EB 51 90				     jmp ReturnProgram		     ; >>>>>>>>>>>>>>
     23	0113					     @@ContinueHere1:
     24
     25						     ; mov dh, 01Ah
     26						     ; mov ah, 0
     27						     ; mov al, byte ptr	[ArgCount]
     28						     ; mov bx, 160d*17 + 160d/2	- 18d +	4d; Середина строчки
     29						     ; call PrintNDec
     30
     31	0113  B7 00				     mov bh, 0
     32	0115  8A 1E 003Er			     mov bl, byte ptr [boxTheme]
     33	0119  8A 26 003Fr			     mov ah, byte ptr [boxColor]
     34
     35	011D  8A 87 0016r			     mov al, byte ptr [BoxAssetLU + bx]
     36	0121  50				     push ax
     37	0122  8A 87 001Ar			     mov al, byte ptr [BoxAsset_U + bx]
     38	0126  50				     push ax
     39	0127  8A 87 001Er			     mov al, byte ptr [BoxAssetRU + bx]
     40	012B  50				     push ax
     41	012C  8A 87 0022r			     mov al, byte ptr [BoxAssetR_ + bx]
     42	0130  50				     push ax
     43	0131  8A 87 0026r			     mov al, byte ptr [BoxAssetRB + bx]
     44	0135  50				     push ax
     45	0136  8A 87 002Ar			     mov al, byte ptr [BoxAsset_B + bx]
     46	013A  50				     push ax
     47	013B  8A 87 002Er			     mov al, byte ptr [BoxAssetLB + bx]
     48	013F  50				     push ax
     49	0140  8A 87 0032r			     mov al, byte ptr [BoxAssetL_ + bx]
     50	0144  50				     push ax
     51	0145  8A 87 0036r			     mov al, byte ptr [BoxAssetFI + bx]
     52	0149  50				     push ax
     53	014A  8A 2E 003Ar			     mov ch, byte ptr [boxHeightPos]
     54	014E  8A 0E 003Br			     mov cl, byte ptr [boxWidthPos]
     55	0152  E8 0109				     call CalculateVidMemPos
     56	0155  8A 2E 003Cr			     mov ch, byte ptr [boxHeight]
     57	0159  8A 0E 003Dr			     mov cl, byte ptr [boxWidth]
Turbo Assembler	 Version 4.1	    03/03/23 14:36:02	    Page 2
probox.asm



     58	015D  E8 01FC				     call DrawBox
     59	0160  83 C4 12				     add sp, 2*9d
     60
     61
     62						     ; mov dh, 00000010b	       ; Dark green on black
     63						     ; pop ax			       ; Scanned number
     64						     ; push ax			       ;
     65
     66						     ; call PrintNBin
     67
     68	0163			     ReturnProgram:				     ; <<<<<<<<<<<<<<
     69	0163  B8 4C00				     mov ax, 4c00h		     ; exit(0)
     70	0166  CD 21				     int 21h
     71
     72
     73
     74
     75				     ;------------------------------------------------
     76				     ; Gets information	from cmd argument
     77				     ;------------------------------------------------
     78				     ; Entry:	     None
     79				     ;
     80				     ; Expects:	     None
     81				     ;
     82				     ; Exit:	     AX	= 0 if no errors, 1 contrary
     83				     ;
     84				     ; Destroys:     BX	CX SI DI (DH if	error)
     85				     ;------------------------------------------------
     86				     ; Stack frame:
     87				     ;		     ...
     88				     ;		     retAddr	 [bp + 2]
     89				     ;		     stored BP	 [bp]
     90				     ;		     ...
     91				     ;------------------------------------------------
     92
     93	0168			     GetArgs	     proc
     94	0168  55				     push bp
     95	0169  8B EC				     mov bp, sp			     ; Complete	stack frame
     96
     97
     98	016B  B4 00				     mov ah, 0			     ; At least	one argument!
     99	016D  A0 0080r				     mov al, byte ptr [ArgCount]     ;
    100	0170  BB 0002				     mov bx, 2d			     ;
    101	0173  3B C3				     cmp ax, bx			     ;
    102	0175  7D 03				     jnl @@ContinueHere1	     ;
    103	0177  E9 00C3				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    104	017A					     @@ContinueHere1:		     ;
    105
    106								 ; ONE STEP:
    107								 ; arg -> bx
    108								 ; if the last 1 -> ax
    109								 ; DS:SI -> next
    110	017A  B2 20				     mov dl, 020h		     ; 20h Terminator
    111	017C  B6 0D				     mov dh, 00Dh		     ; 0Dh TerminatorEnd
    112	017E  BE 0082r				     mov si, offset Args + 1	     ; First argument
    113
    114	0181  BB 0000				     mov bx, 0
Turbo Assembler	 Version 4.1	    03/03/23 14:36:02	    Page 3
probox.asm



    115	0184  E8 0156				     call MScnNDec
    116	0187  88 1E 003Ar			     mov byte ptr [boxHeightPos], bl
    117	018B  85 C0				     test ax, ax
    118	018D  74 03				     jz	@@ContinueHere2
    119	018F  E9 00AB				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    120	0192					     @@ContinueHere2:
    121
    122
    123	0192  BB 0000				     mov bx, 0
    124	0195  E8 0145				     call MScnNDec
    125	0198  88 1E 003Br			     mov byte ptr [boxWidthPos], bl
    126	019C  85 C0				     test ax, ax
    127	019E  74 03				     jz	@@ContinueHere3
    128	01A0  E9 009A				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    129	01A3					     @@ContinueHere3:
    130
    131	01A3  BB 0000				     mov bx, 0
    132	01A6  E8 0134				     call MScnNDec
    133	01A9  88 1E 003Cr			     mov byte ptr [boxHeight], bl
    134	01AD  85 C0				     test ax, ax
    135	01AF  74 03				     jz	@@ContinueHere4
    136	01B1  E9 0089				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    137	01B4					     @@ContinueHere4:
    138
    139	01B4  BB 0000				     mov bx, 0
    140	01B7  E8 0123				     call MScnNDec
    141	01BA  88 1E 003Dr			     mov byte ptr [boxWidth], bl
    142	01BE  85 C0				     test ax, ax
    143	01C0  74 03				     jz	@@ContinueHere5
    144	01C2  EB 79 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    145	01C5					     @@ContinueHere5:
    146
    147	01C5  BB 0000				     mov bx, 0
    148	01C8  E8 013A				     call MScnNHex
    149	01CB  88 1E 003Er			     mov byte ptr [boxTheme], bl
    150
    151	01CF  B9 0002				     mov cx, 02h
    152	01D2  3B D9				     cmp bx, cx
    153	01D4  7E 11				     jle @@Theme02		     ; ---->
    154	01D6  B9 000F				     mov cx, 0Fh
    155	01D9  3B D9				     cmp bx, cx
    156	01DB  74 0D				     je	@@ThemeF		     ; ---->
    157	01DD  B9 00C0				     mov cx, 0C0h
    158	01E0  3B D9				     cmp bx, cx
    159	01E2  7D 30				     jge @@ThemeC		     ; ---->
    160
    161	01E4  EB 68 90				     jmp @@SetErrorBadTheme
    162
    163	01E7			     @@Theme02:					     ; <----
    164	01E7  EB 4E 90				     jmp @@NoMoreArgs
    165
    166	01EA			     @@ThemeF:					     ; <----
    167	01EA  C6 06 003Er 03			     mov byte ptr [boxTheme], 03d
    168
    169	01EF  BF 0019r				     mov di, offset BoxAssetStart + 3
    170	01F2  B9 001Ar				     mov cx, offset BoxAssetStep     ; cx = step
    171	01F5  81 E9 0016r			     sub cx, offset BoxAssetStart    ;
Turbo Assembler	 Version 4.1	    03/03/23 14:36:02	    Page 4
probox.asm



    172
    173	01F9				 @@OneStep:				     ; <-------------------------\
    174	01F9  85 C0				     test ax, ax		     ;				 |
    175	01FB  74 03				     jz	@@ContinueHere6		     ;				 |
    176	01FD  EB 3E 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>		 |>>>
    177	0200					     @@ContinueHere6:		     ;				 |
    178										     ;				 |
    179	0200  BB 0000				     mov bx, 0			     ;				 |
    180	0203  E8 00D7				     call MScnNDec		     ;				 |
    181	0206  88 1D				     mov [di], bl		     ;				 |
    182										     ;				 |
    183	0208  03 F9				     add di, cx			     ;				 |
    184										     ;				 |
    185	020A  BB 003Ar				     mov bx, offset BoxAssetEnd	     ;				 |
    186	020D  3B FB				     cmp di, bx			     ;				 |
    187	020F  7C E8				     jl	@@OneStep		     ; >-------------------------/
    188
    189	0211  EB 10 90				     jmp @@SetColor		     ; >>====\\
    190										     ;	     ||
    191	0214			     @@ThemeC:					     ; <-----||--
    192	0214  B9 00C2				     mov cx, 0C2h		     ;	     ||
    193	0217  3B D9				     cmp bx, cx			     ;	     ||
    194	0219  7E 03				     jng @@ContinueHere10	     ;	     ||
    195	021B  EB 31 90				     jmp @@SetErrorBadTheme	     ; >>>>>>||>>>>>>
    196	021E					     @@ContinueHere10:		     ;	     ||
    197										     ;	     ||
    198	021E  80 2E 003Er C0			     sub byte ptr [boxTheme], 0C0h   ;	     ||
    199										     ;	     ||
    200	0223			     @@SetColor:				     ; <<====//
    201	0223  85 C0				     test ax, ax
    202	0225  74 03				     jz	@@ContinueHere11
    203	0227  EB 14 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    204	022A					     @@ContinueHere11:
    205
    206	022A  BB 0000				     mov bx, 0
    207	022D  E8 00D5				     call MScnNHex
    208	0230  88 1E 003Fr			     mov byte ptr [boxColor], bl
    209
    210	0234  EB 01 90				     jmp @@NoMoreArgs
    211
    212
    213
    214						     ; mov ah, 0
    215						     ; mov al, bl
    216						     ; mov dh, 004h
    217						     ; mov bx, 160d*4+7d*2
    218						     ; call PrintNHex
    219
    220
    221	0237			     @@NoMoreArgs:				     ; <<<<<<<<<<<<<<
    222	0237  B8 0000				     mov ax, 0
    223	023A  EB 20 90				     jmp @@ProcEnd		     ; >-\
    224	023D			     @@SetErrorNoArg:				     ; <<|<<<<<<<<<<<
    225	023D  B8 0239				     mov ax, 0239h		     ; Error code: No argument (more expected) : 239
    226	0240  B6 0C				     mov dh, 00Ch		     ;	 |
    227	0242  BB 0286				     mov bx, 160d*4+3d*2	     ;	 |
    228	0245  E8 0056				     call PrintNHex		     ;	 |
Turbo Assembler	 Version 4.1	    03/03/23 14:36:02	    Page 5
probox.asm



    229	0248  B8 0239				     mov ax, 0239h		     ;	 |
    230										     ;	 |
    231										     ;	 |
    232	024B  EB 0F 90				     jmp @@ProcEnd		     ; >-\
    233	024E			     @@SetErrorBadTheme:			     ; <<|<<<<<<<<<<<
    234	024E  B8 0240				     mov ax, 0240h		     ; Error code: No argument (more expected) : 240
    235	0251  B6 0C				     mov dh, 00Ch		     ;	 |
    236	0253  BB 0286				     mov bx, 160d*4+3d*2	     ;	 |
    237	0256  E8 0045				     call PrintNHex		     ;	 |
    238	0259  B8 0240				     mov ax, 0240h		     ;	 |
    239										     ;	 |
    240										     ;	 |
    241	025C			     @@ProcEnd:					     ; <-/
    242	025C  5D				     pop bp			     ; Stack frame
    243	025D  C3				     ret
    244	025E			     GetArgs	     endp
    245
    246				     ;------------------------------------------------
    247				     ;------------------------------------------------
    248
    249
    250				     ;------------------------------------------------
    251				     ; Calculate video mem offset by position
    252				     ;------------------------------------------------
    253				     ; Entry:	     CH	= heightPosition
    254				     ;		     CL	= widthPosition
    255				     ;
    256				     ; Expects:	     None
    257				     ;
    258				     ; Exit:	     BX	= start	addr to	draw
    259				     ;
    260				     ; Destroys:     AX
    261				     ;------------------------------------------------
    262				     ; Stack frame:
    263				     ;		     ...
    264				     ;		     retAddr	 []
    265				     ;		     ...
    266				     ;------------------------------------------------
    267
    268	025E			     CalculateVidMemPos	 proc
    269						     ; push bp
    270						     ; mov bp, sp		       ; Complete stack	frame
    271
    272
    273						     ; bx = 160d * ch +	2 * cl
    274	025E  B7 00				     mov bh, 0
    275	0260  8A D9				     mov bl, cl
    276	0262  D1 E3				     sal bx, 1
    277
    278	0264  B8 00A0				     mov ax, 160d
    279	0267  F6 E5				     mul ch
    280	0269  03 D8				     add bx, ax
    281
    282						     ; mov ax, bx
    283						     ; mov bx, 80d
    284						     ; call PrintNDec
    285
Turbo Assembler	 Version 4.1	    03/03/23 14:36:02	    Page 6
probox.asm



    286
    287						     ; pop bp			       ; Stack frame
    288	026B  C3				     ret
    289	026C			     CalculateVidMemPos	 endp
    290
    291				     ;------------------------------------------------
    292				     ;------------------------------------------------
    293
    294				     include ..\LianLib\ScanNDec.asm
1   295				     ;------------------------------------------------
1   296				     ; Scans number as decimal
1   297				     ;------------------------------------------------
1   298				     ; Entry:	     none
1   299				     ;
1   300				     ; Expects:	     BX	= 0
1   301				     ;
1   302				     ; Exit:	     BX	= number to print
1   303				     ;
1   304				     ; Destroys:     AX	CL Si
1   305				     ;------------------------------------------------
1   306				     ;------------------------------------------------
1   307	026C			     ScanNDec	     proc
1   308
1   309	026C			     @@ScanDigit:				     ; <-------------------------\
1   310										     ;				 |
1   311	026C  B4 01				     mov ah, 01h		     ; getc -> al		 |
1   312	026E  CD 21				     int 21h			     ; ^			 |
1   313										     ;				 |
1   314	0270  3C 0D				     cmp al, 13d		     ; Stop scan if enter	 |
1   315	0272  74 15				     je	@@EndScanDigit		     ; >>========================|=======\\
1   316										     ;				 |	 ||
1   317	0274  8A C8				     mov cl, al			     ; Store al	to cl		 |	 ||
1   318										     ;				 |	 ||
1   319	0276  8B C3				     mov ax, bx			     ; bx *= 10			 |	 ||
1   320	0278  BE 000A				     mov si, 10d		     ; ^			 |	 ||
1   321	027B  F7 E6				     mul si			     ; ^			 |	 ||
1   322	027D  8B D8				     mov bx, ax			     ; ^			 |	 ||
1   323										     ;				 |	 ||
1   324	027F  8A C1				     mov al, cl			     ; Retore al from cl	 |	 ||
1   325										     ;				 |	 ||
1   326	0281  2C 30				     sub al, "0"		     ; ASCII "0" offset		 |	 ||
1   327										     ;				 |	 ||
1   328	0283  B4 00				     mov ah, 0d			     ; bx += al			 |	 ||
1   329	0285  03 D8				     add bx, ax			     ; ^			 |	 ||
1   330										     ;				 |	 ||
1   331	0287  EB E3				     jmp @@ScanDigit		     ; >-------------------------/	 ||
1   332										     ;					 ||
1   333	0289			     @@EndScanDigit:				     ; <<================================//
1   334	0289  C3				     ret
1   335
1   336	028A			     ScanNDec	     endp
1   337
1   338				     ;------------------------------------------------
1   339				     ;------------------------------------------------
1   340
    341				     include ..\LianLib\PrntNBin.asm
1   342				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    03/03/23 14:36:02	    Page 7
probox.asm



1   343				     ; Prints number as	binary to vidmem
1   344				     ;------------------------------------------------
1   345				     ; Entry:	     AX	= number to print
1   346				     ;		     BX	= start	addr to	print
1   347				     ;
1   348				     ; Expects:	     ES	-> Video segment
1   349				     ;		     DH	= color	code
1   350				     ;
1   351				     ; Exit:	     None
1   352				     ;
1   353				     ; Destroys:     AX	BX CX DL
1   354				     ;------------------------------------------------
1   355				     ;------------------------------------------------
1   356	028A			     PrintNBin	     proc
1   357
1   358	028A  B9 0010				     mov cx, 16d		     ; 16 bit in 2 byte	in ax
1   359
1   360	028D			     @@PrintDigit:				     ; <-------------------------\
1   361										     ;				 |
1   362	028D  B2 01				     mov dl, 00000001b		     ; Mask			 |
1   363	028F  22 D0				     and dl, al			     ;				 |
1   364	0291  80 C2 30				     add dl, 30h		     ; ASCII "0" offset		 |
1   365										     ;				 |
1   366	0294  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   367										     ;				 |
1   368	0297  4B				     dec bx			     ; Next digit		 |
1   369	0298  4B				     dec bx			     ; ^			 |
1   370										     ;				 |
1   371	0299  D1 E8				     shr ax, 1d			     ; ax >> 1			 |
1   372										     ;				 |
1   373	029B  E2 F0				     loop @@PrintDigit		     ; >-------------------------/
1   374
1   375	029D  C3				     ret
1   376
1   377	029E			     PrintNBin	     endp
1   378
1   379				     ;------------------------------------------------
1   380				     ;------------------------------------------------
1   381
    382				     include ..\LianLib\PrntNHex.asm
1   383				     ;------------------------------------------------
1   384				     ; Prints number as	hexagen	to vidmem
1   385				     ;------------------------------------------------
1   386				     ; Entry:	     AX	= number to print
1   387				     ;		     BX	= start	addr to	print
1   388				     ;
1   389				     ; Expects:	     ES	-> Video segment
1   390				     ;		     DH	= color	code
1   391				     ;
1   392				     ; Exit:	     None
1   393				     ;
1   394				     ; Destroys:     AX	BX CX DL Si
1   395				     ;------------------------------------------------
1   396				     ;------------------------------------------------
1   397	029E			     PrintNHex	     proc
1   398
1   399	029E  B9 0004				     mov cx, 4d			     ; 4 digits	in 2 byte in ax
Turbo Assembler	 Version 4.1	    03/03/23 14:36:02	    Page 8
probox.asm



1   400
1   401	02A1			     @@PrintDigit:				     ; <-------------------------\
1   402										     ;				 |
1   403	02A1  B2 0F				     mov dl, 00001111b		     ; Mask			 |
1   404	02A3  22 D0				     and dl, al			     ;				 |
1   405										     ;				 |
1   406	02A5  8B F2				     mov si, dx			     ; dl -> si			 |
1   407	02A7  83 E6 0F				     and si, 0Fh		     ;				 |
1   408										     ;				 |
1   409	02AA  8A 94 0000r			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
1   410										     ;				 |
1   411	02AE  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   412										     ;				 |
1   413	02B1  4B				     dec bx			     ; Next digit		 |
1   414	02B2  4B				     dec bx			     ; ^			 |
1   415										     ;				 |
1   416	02B3  D1 E8 D1 E8 D1 E8	D1+		     shr ax, 4d			     ; ax >> 4			 |
    417	      E8
1   418										     ;				 |
1   419	02BB  E2 E4				     loop @@PrintDigit		     ; >-------------------------/
1   420
1   421	02BD  C3				     ret
1   422
1   423	02BE			     PrintNHex	     endp
1   424
1   425				     ;------------------------------------------------
1   426				     ;------------------------------------------------
1   427
    428				     include ..\LianLib\PrntNDec.asm
1   429				     ;------------------------------------------------
1   430				     ; Prints number as	decimal	to vidmem
1   431				     ;------------------------------------------------
1   432				     ; Entry:	     AX	= number to print
1   433				     ;		     BX	= start	addr to	print
1   434				     ;
1   435				     ; Expects:	     ES	-> Video segment
1   436				     ;		     DH	= color	code
1   437				     ;
1   438				     ; Exit:	     None
1   439				     ;
1   440				     ; Destroys:     AX	BX CX DL Si
1   441				     ;------------------------------------------------
1   442				     ;------------------------------------------------
1   443	02BE			     PrintNDec	     proc
1   444
1   445	02BE  B9 0005				     mov cx, 5d			     ; 5 digits	in 2 byte in ax
1   446
1   447	02C1			     @@PrintDigit:				     ; <-------------------------\
1   448	02C1  8A EE				     mov ch, dh			     ; Store dh	to ch		 |
1   449										     ;				 |
1   450	02C3  BA 0000				     mov dx, 0d			     ; for division		 |
1   451	02C6  BE 000A				     mov si, 10d		     ; ax/10 ->	ax &		 |
1   452	02C9  F7 F6				     div si			     ; & ax%10 -> dx		 | !!! dx < 10
1   453										     ;				 |
1   454	02CB  8B F2				     mov si, dx			     ; dl -> si			 |
1   455										     ;				 |
1   456	02CD  8A 94 0000r			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
Turbo Assembler	 Version 4.1	    03/03/23 14:36:02	    Page 9
probox.asm



1   457										     ;				 |
1   458	02D1  8A F5				     mov dh, ch			     ; Restore dh from ch	 |
1   459	02D3  B5 00				     mov ch, 0			     ; ^			 |
1   460										     ;				 |
1   461	02D5  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   462										     ;				 |
1   463	02D8  4B				     dec bx			     ; Next digit		 |
1   464	02D9  4B				     dec bx			     ; ^			 |
1   465										     ;				 |
1   466										     ;				 |
1   467	02DA  E2 E5				     loop @@PrintDigit		     ; >-------------------------/
1   468
1   469	02DC  C3				     ret
1   470
1   471	02DD			     PrintNDec	     endp
1   472
1   473				     ;------------------------------------------------
1   474				     ;------------------------------------------------
1   475
    476				     include ..\LianLib\MScnNDec.asm
1   477				     ;------------------------------------------------
1   478				     ; Scans number as decimal from string in memory
1   479				     ;------------------------------------------------
1   480				     ; Entry:	     DS:SI = memory ptr
1   481				     ;
1   482				     ; Expects:	     BX	= 0
1   483				     ;		     DL	= terminator char 1
1   484				     ;		     DH	= terminator char 2 (TerminatorEnd)
1   485				     ;		     DF	= 0 (CLD) [or backward]
1   486				     ;
1   487				     ; Exit:	     BX	= scanned number
1   488				     ;		     SI	to next	word
1   489				     ;		     AX	= 0 if terminator, 1 if	TerminatorEnd
1   490				     ;
1   491				     ; Destroys:     None
1   492				     ;------------------------------------------------
1   493				     ;------------------------------------------------
1   494	02DD			     MScnNDec	     proc
1   495
1   496	02DD			     @@ScanDigit:				     ; <-------------------------\
1   497										     ;				 |
1   498						     ; mov ah, 01h		     ; getc -> al		 |
1   499						     ; int 21h			     ; ^			 |
1   500	02DD  AC				     lodsb			     ; char -> al		 |
1   501										     ;				 |
1   502						     ; cmp al, 13d		     ; Stop scan if enter	 |
1   503	02DE  3A C2				     cmp al, dl			     ; Stop scan if terminator	 |
1   504	02E0  74 19				     je	@@TermScanDigit		     ; >>========================|=======\\
1   505	02E2  3A C6				     cmp al, dh			     ;				 |	 ||
1   506	02E4  74 1B				     je	@@TerminatorEndScanDigit     ; >>========================|===========\\
1   507										     ;				 |	 ||  ||
1   508						     ; mov cl, al		     ; Store al	to cl		 |	 ||  ||
1   509	02E6  50				     push ax			     ; Store ax			 |	 ||  ||
1   510	02E7  52				     push dx			     ; Store dx			 |	 ||  ||
1   511										     ;				 |	 ||  ||
1   512	02E8  8B C3				     mov ax, bx			     ; bx *= 10			 |	 ||  ||
1   513	02EA  BA 000A				     mov dx, 10d		     ; ^			 |	 ||  ||
Turbo Assembler	 Version 4.1	    03/03/23 14:36:02	    Page 10
probox.asm



1   514	02ED  F7 E2				     mul dx			     ; ^			 |	 ||  ||
1   515	02EF  8B D8				     mov bx, ax			     ; ^			 |	 ||  ||
1   516										     ;				 |	 ||  ||
1   517	02F1  5A				     pop dx			     ; Restore dx		 |	 ||  ||
1   518	02F2  58				     pop ax			     ; Restore ax		 |	 ||  ||
1   519						     ; mov al, cl		     ; Restore al from cl	 |	 ||  ||
1   520										     ;				 |	 ||  ||
1   521	02F3  2C 30				     sub al, "0"		     ; ASCII "0" offset		 |	 ||  ||
1   522										     ;				 |	 ||  ||
1   523	02F5  B4 00				     mov ah, 0d			     ; bx += al			 |	 ||  ||
1   524	02F7  03 D8				     add bx, ax			     ; ^			 |	 ||  ||
1   525										     ;				 |	 ||  ||
1   526	02F9  EB E2				     jmp @@ScanDigit		     ; >-------------------------/	 ||  ||
1   527										     ;					 ||  ||
1   528	02FB			     @@TermScanDigit:				     ; <<================================//  ||
1   529	02FB  B8 0000				     mov ax, 0			     ;					     ||
1   530	02FE  EB 04 90				     jmp @@EndProc		     ; >-----\				     ||
1   531	0301			     @@TerminatorEndScanDigit:			     ; <<====|===============================//
1   532	0301  B8 0001				     mov ax, 1			     ;	     |
1   533	0304			     @@EndProc:					     ; <-----/
1   534	0304  C3				     ret
1   535
1   536	0305			     MScnNDec	     endp
1   537
1   538				     ;------------------------------------------------
1   539				     ;------------------------------------------------
1   540
    541				     include ..\LianLib\MScnNHex.asm
1   542				     ;------------------------------------------------
1   543				     ; Scans number as hexagen from string in memory
1   544				     ;------------------------------------------------
1   545				     ; Entry:	     DS:SI = memory ptr
1   546				     ;
1   547				     ; Expects:	     BX	= 0
1   548				     ;		     DL	= terminator char 1
1   549				     ;		     DH	= terminator char 2 (TerminatorEnd)
1   550				     ;		     DF	= 0 (CLD) [or backward]
1   551				     ;
1   552				     ; Exit:	     BX	= scanned number
1   553				     ;		     SI	to next	word
1   554				     ;		     AX	= 0 if terminator, 1 if	TerminatorEnd
1   555				     ;
1   556				     ; Destroys:     None
1   557				     ;------------------------------------------------
1   558				     ;------------------------------------------------
1   559	0305			     MScnNHex	     proc
1   560
1   561	0305			     @@ScanDigit:				     ; <-------------------------\
1   562										     ;				 |
1   563						     ; mov ah, 01h		     ; getc -> al		 |
1   564						     ; int 21h			     ; ^			 |
1   565	0305  AC				     lodsb			     ; char -> al		 |
1   566										     ;				 |
1   567						     ; cmp al, 13d		     ; Stop scan if enter	 |
1   568	0306  3A C2				     cmp al, dl			     ; Stop scan if terminator	 |
1   569	0308  74 48				     je	@@TermScanDigit		     ; >>========================|=======\\
1   570	030A  3A C6				     cmp al, dh			     ;				 |	 ||
Turbo Assembler	 Version 4.1	    03/03/23 14:36:02	    Page 11
probox.asm



1   571	030C  74 4A				     je	@@TerminatorEndScanDigit     ; >>========================|===========\\
1   572										     ;				 |	 ||  ||
1   573										     ;				 |	 ||  ||
1   574	030E  D1 E3 D1 E3 D1 E3	D1+		     shl bx, 4d			     ; bx *= 16			 |	 ||  ||
    575	      E3
1   576										     ;				 |	 ||  ||
1   577										     ;				 |	 ||  ||
1   578	0316  53				     push bx			     ; Store bx			 |	 ||  ||
1   579										     ;				 |	 ||  ||
1   580	0317  BB 0061				     mov bx, "a"		     ;				 |	 ||  ||
1   581	031A  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   582	031C  7C 0B				     jl	@@Nextaf		     ;				 |	 ||  ||
1   583	031E  BB 0066				     mov bx, "f"		     ;				 |	 ||  ||
1   584	0321  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   585	0323  7F 04				     jg	@@Nextaf		     ;				 |	 ||  ||
1   586	0325  2C 61				     sub al, "a"		     ; ASCII "0" offset		 |	 ||  ||
1   587	0327  04 0A				     add al, 0ah		     ; ^			 |	 ||  ||
1   588	0329			     @@Nextaf:					     ;				 |	 ||  ||
1   589	0329  BB 0041				     mov bx, "A"		     ;				 |	 ||  ||
1   590	032C  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   591	032E  7C 0B				     jl	@@NextAFCAPS		     ;				 |	 ||  ||
1   592	0330  BB 0046				     mov bx, "F"		     ;				 |	 ||  ||
1   593	0333  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   594	0335  7F 04				     jg	@@NextAFCAPS		     ;				 |	 ||  ||
1   595	0337  2C 41				     sub al, "A"		     ; ASCII "0" offset		 |	 ||  ||
1   596	0339  04 0A				     add al, 0Ah		     ; ^			 |	 ||  ||
1   597	033B			     @@NextAFCAPS:				     ;				 |	 ||  ||
1   598	033B  BB 0030				     mov bx, "0"		     ;				 |	 ||  ||
1   599	033E  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   600	0340  7C 09				     jl	@@Next09		     ;				 |	 ||  ||
1   601	0342  BB 0039				     mov bx, "9"		     ;				 |	 ||  ||
1   602	0345  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   603	0347  7F 02				     jg	@@Next09		     ;				 |	 ||  ||
1   604	0349  2C 30				     sub al, "0"		     ; ASCII "0" offset		 |	 ||  ||
1   605						     ; add al, 0		     ; ^			 |	 ||  ||
1   606	034B			     @@Next09:					     ;				 |	 ||  ||
1   607										     ;				 |	 ||  ||
1   608	034B  5B				     pop bx			     ; Restore bx		 |	 ||  ||
1   609										     ;				 |	 ||  ||
1   610	034C  B4 00				     mov ah, 0d			     ; bx += al			 |	 ||  ||
1   611	034E  03 D8				     add bx, ax			     ; ^			 |	 ||  ||
1   612										     ;				 |	 ||  ||
1   613	0350  EB B3				     jmp @@ScanDigit		     ; >-------------------------/	 ||  ||
1   614										     ;					 ||  ||
1   615	0352			     @@TermScanDigit:				     ; <<================================//  ||
1   616	0352  B8 0000				     mov ax, 0			     ;					     ||
1   617	0355  EB 04 90				     jmp @@EndProc		     ; >-----\				     ||
1   618	0358			     @@TerminatorEndScanDigit:			     ; <<====|===============================//
1   619	0358  B8 0001				     mov ax, 1			     ;	     |
1   620	035B			     @@EndProc:					     ; <-----/
1   621	035B  C3				     ret
1   622
1   623	035C			     MScnNHex	     endp
1   624
1   625				     ;------------------------------------------------
1   626				     ;------------------------------------------------
1   627
Turbo Assembler	 Version 4.1	    03/03/23 14:36:02	    Page 12
probox.asm



    628
    629				     include ..\LianLib\ProBox.asm
1   630				     ;------------------------------------------------
1   631				     ; Draws cool box on the screen
1   632				     ;------------------------------------------------
1   633				     ; Entry:	     BX	= start	addr to	draw
1   634				     ;		     CH	= height of box	(without frame)
1   635				     ;		     CL	= width	of box (without	frame)
1   636				     ;
1   637				     ; Expects:	     ES	-> Video segment
1   638				     ;
1   639				     ; Exit:	     None
1   640				     ;
1   641				     ; Destroys:     AX	BX (CX)	DX DI
1   642				     ;------------------------------------------------
1   643				     ; Stack frame:
1   644				     ;		     ...
1   645				     ;		     LU	char	 [bp + 20]   //	H - color attr
1   646				     ;		     _U	char	 [bp + 18]   //	L - symb attr
1   647				     ;		     RU	char	 [bp + 16]   //
1   648				     ;		     R_	char	 [bp + 14]   //
1   649				     ;		     RB	char	 [bp + 12]   //
1   650				     ;		     _B	char	 [bp + 10]   //
1   651				     ;		     LB	char	 [bp + 8]    //
1   652				     ;		     L_	char	 [bp + 6]    //
1   653				     ;		     FI	char	 [bp + 4]    //
1   654				     ;		     retAddr	 [bp + 2]
1   655				     ;		     stored BP	 [bp]
1   656				     ;		     stored CX	 [bp - 2]    //	size
1   657				     ;		     ...
1   658				     ;------------------------------------------------
1   659
1   660	035C			     DrawBox	     proc
1   661	035C  55				     push bp
1   662	035D  8B EC				     mov bp, sp			     ; Complete	stack frame
1   663	035F  51				     push cx
1   664
1   665										     ;-------------------------------------------
1   666										     ; Upper line
1   667	0360  8B FB				     mov di, bx
1   668	0362  8B 4E FE				     mov cx, [bp - 2]
1   669	0365  B5 00				     mov ch, 0
1   670	0367  FF 76 14				     push [bp +	20]
1   671	036A  FF 76 12				     push [bp +	18]
1   672	036D  FF 76 10				     push [bp +	16]
1   673	0370  E8 0044				     call DrawLine
1   674	0373  83 C4 06				     add sp, 2*3d
1   675										     ;-------------------------------------------
1   676										     ; Middle line
1   677	0376  8B 4E FE				     mov cx, [bp - 2]
1   678	0379  B6 00				     mov dh, 0
1   679	037B  8A D5				     mov dl, ch
1   680	037D			     @@MiddleStep:				     ; <-----------------\
1   681										     ;			 |
1   682	037D  81 C3 00A0			     add bx, 160d		     ;			 |
1   683	0381  8B FB				     mov di, bx			     ;			 |
1   684	0383  8B 4E FE				     mov cx, [bp - 2]		     ;			 |
Turbo Assembler	 Version 4.1	    03/03/23 14:36:02	    Page 13
probox.asm



1   685	0386  B5 00				     mov ch, 0			     ;			 |
1   686	0388  FF 76 06				     push [bp +	6]		     ;			 |
1   687	038B  FF 76 04				     push [bp +	4]		     ;			 |
1   688	038E  FF 76 0E				     push [bp +	14]		     ;			 |
1   689	0391  E8 0023				     call DrawLine		     ;			 |
1   690	0394  83 C4 06				     add sp, 2*3d		     ;			 |
1   691	0397  4A				     dec dx			     ;			 |
1   692	0398  75 E3				     jnz @@MiddleStep		     ; >-----------------/
1   693										     ;-------------------------------------------
1   694										     ; Bottom line
1   695	039A  81 C3 00A0			     add bx, 160d
1   696	039E  8B FB				     mov di, bx
1   697	03A0  8B 4E FE				     mov cx, [bp - 2]
1   698	03A3  B5 00				     mov ch, 0
1   699	03A5  FF 76 08				     push [bp +	8]
1   700	03A8  FF 76 0A				     push [bp +	10]
1   701	03AB  FF 76 0C				     push [bp +	12]
1   702	03AE  E8 0006				     call DrawLine
1   703	03B1  83 C4 06				     add sp, 2*3d
1   704										     ;-------------------------------------------
1   705
1   706	03B4  59				     pop cx
1   707	03B5  5D				     pop bp			     ; Stack frame
1   708	03B6  C3				     ret
1   709	03B7			     DrawBox	     endp
1   710
1   711				     ;------------------------------------------------
1   712				     ;------------------------------------------------
1   713
1   714				     ; needs <include ?\LianLib\DrawLine.asm>
1   715
    716				     include ..\LianLib\DrawLine.asm
1   717				     ;------------------------------------------------
1   718				     ; Draws line on the screen	(Pattern ABB~BBC)
1   719				     ;------------------------------------------------
1   720				     ; Entry:	     DI	= start	addr to	draw
1   721				     ;		     CX	= width	of line	(without A&C)
1   722				     ;
1   723				     ; Expects:	     ES	-> Video segment
1   724				     ;		     DF	= 0 (CLD)
1   725				     ;
1   726				     ; Exit:	     None
1   727				     ;
1   728				     ; Destroys:     AX	CX DI
1   729				     ;------------------------------------------------
1   730				     ; Stack frame:
1   731				     ;		     ...
1   732				     ;		     'A' char	 [bp + 8]    //	H - color attr
1   733				     ;		     'B' char	 [bp + 6]    //	L - symb attr
1   734				     ;		     'C' char	 [bp + 4]    //
1   735				     ;		     retAddr	 [bp + 2]
1   736				     ;		     stored BP	 [bp]
1   737				     ;		     ...
1   738				     ;------------------------------------------------
1   739				     ;Направление просмотра	 зависит	 от флага		    +
    740				     направления DF,	значение  которого  можно	менять  с    +
    741				     помощью команд CLD (DF:=0) и	STD (DF:=1).
Turbo Assembler	 Version 4.1	    03/03/23 14:36:02	    Page 14
probox.asm



1   742
1   743	03B7			     DrawLine	     proc
1   744	03B7  55				     push bp
1   745	03B8  8B EC				     mov bp, sp			     ; Complete	stack frame
1   746
1   747	03BA  8B 46 08				     mov ax, [bp + 8]
1   748	03BD  AB				     stosw
1   749
1   750	03BE  8B 46 06				     mov ax, [bp + 6]
1   751	03C1  F3> AB				     rep stosw
1   752
1   753	03C3  8B 46 04				     mov ax, [bp + 4]
1   754	03C6  AB				     stosw
1   755
1   756	03C7  5D				     pop bp			     ; Stack frame
1   757	03C8  C3				     ret
1   758	03C9			     DrawLine	     endp
1   759
1   760				     ;------------------------------------------------
1   761				     ;------------------------------------------------
1   762
    763
    764	03C9			     .data
    765				     include ..\LianLib\Alphabet.asm
1   766	0000  30 31 32 33 34 35	36+  Alphabet:	     db	"0123456789ABCDEF"	     ; Alphabet	for printing (Thanks Ilya)
    767	      37 38 39 41 42 43	44+
    768	      45 46
1   769	0010  C9 CD BB BA BC C8	     BoxSymbols:     db	0c9h, 0cdh, 0bbh, 0bah,	0bch, 0c8h ; "╔═╗║╝╚"
1   770
1   771	0016			     BoxAssetStart:
1   772	0016  20 DA C9 00	     BoxAssetLU:     db	020h, 0dah, 0c9h, 000h
1   773	001A			     BoxAssetStep:
1   774	001A  20 C4 CD 00	     BoxAsset_U:     db	020h, 0c4h, 0cdh, 000h
1   775	001E  20 BF BB 00	     BoxAssetRU:     db	020h, 0bfh, 0bbh, 000h
1   776	0022  20 B3 BA 00	     BoxAssetR_:     db	020h, 0b3h, 0bah, 000h
1   777	0026  20 D9 BC 00	     BoxAssetRB:     db	020h, 0d9h, 0bch, 000h
1   778	002A  20 C4 CD 00	     BoxAsset_B:     db	020h, 0c4h, 0cdh, 000h
1   779	002E  20 C0 C8 00	     BoxAssetLB:     db	020h, 0c0h, 0c8h, 000h
1   780	0032  20 B3 BA 00	     BoxAssetL_:     db	020h, 0b3h, 0bah, 000h
1   781	0036  20 20 20 00	     BoxAssetFI:     db	020h, 020h, 020h, 000h
1   782	003A			     BoxAssetEnd:
1   783
1   784				     ; 0:    1:┌─┐ 2:╔═╗ 3:usr
1   785				     ;	       │ │	 ║ ║   chr
1   786				     ;	       └─┘   ╚═╝
1   787
    788
    789	003A  ??		     boxHeightPos:   db	?
    790	003B  ??		     boxWidthPos:    db	?
    791	003C  ??		     boxHeight:	     db	?
    792	003D  ??		     boxWidth:	     db	?
    793	003E  ??		     boxTheme:	     db	?
    794	003F  0A		     boxColor:	     db	00Ah
    795
    796				     end	     Start
Turbo Assembler	 Version 4.1	    03/03/23 14:36:02	    Page 15
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/03/23"
??FILENAME			  Text	 "probox  "
??TIME				  Text	 "14:36:02"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CONTINUEHERE1			  Near	 DGROUP:0113
@@CONTINUEHERE1			  Near	 DGROUP:017A
@@CONTINUEHERE10		  Near	 DGROUP:021E
@@CONTINUEHERE11		  Near	 DGROUP:022A
@@CONTINUEHERE2			  Near	 DGROUP:0192
@@CONTINUEHERE3			  Near	 DGROUP:01A3
@@CONTINUEHERE4			  Near	 DGROUP:01B4
@@CONTINUEHERE5			  Near	 DGROUP:01C5
@@CONTINUEHERE6			  Near	 DGROUP:0200
@@ENDPROC			  Near	 DGROUP:0304
@@ENDPROC			  Near	 DGROUP:035B
@@ENDSCANDIGIT			  Near	 DGROUP:0289
@@MIDDLESTEP			  Near	 DGROUP:037D
@@NEXT09			  Near	 DGROUP:034B
@@NEXTAF			  Near	 DGROUP:0329
@@NEXTAFCAPS			  Near	 DGROUP:033B
@@NOMOREARGS			  Near	 DGROUP:0237
@@ONESTEP			  Near	 DGROUP:01F9
@@PRINTDIGIT			  Near	 DGROUP:028D
@@PRINTDIGIT			  Near	 DGROUP:02A1
@@PRINTDIGIT			  Near	 DGROUP:02C1
@@PROCEND			  Near	 DGROUP:025C
@@SCANDIGIT			  Near	 DGROUP:026C
@@SCANDIGIT			  Near	 DGROUP:02DD
@@SCANDIGIT			  Near	 DGROUP:0305
@@SETCOLOR			  Near	 DGROUP:0223
@@SETERRORBADTHEME		  Near	 DGROUP:024E
@@SETERRORNOARG			  Near	 DGROUP:023D
@@TERMINATORENDSCANDIGIT	  Near	 DGROUP:0301
@@TERMINATORENDSCANDIGIT	  Near	 DGROUP:0358
@@TERMSCANDIGIT			  Near	 DGROUP:02FB
@@TERMSCANDIGIT			  Near	 DGROUP:0352
@@THEME02			  Near	 DGROUP:01E7
@@THEMEC			  Near	 DGROUP:0214
@@THEMEF			  Near	 DGROUP:01EA
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 PROBOX
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ALPHABET			  Near	 DGROUP:0000
ARGCOUNT			  Near	 DGROUP:0080
ARGS				  Near	 DGROUP:0081
Turbo Assembler	 Version 4.1	    03/03/23 14:36:02	    Page 16
Symbol Table



BOXASSETEND			  Near	 DGROUP:003A
BOXASSETFI			  Near	 DGROUP:0036
BOXASSETLB			  Near	 DGROUP:002E
BOXASSETLU			  Near	 DGROUP:0016
BOXASSETL_			  Near	 DGROUP:0032
BOXASSETRB			  Near	 DGROUP:0026
BOXASSETRU			  Near	 DGROUP:001E
BOXASSETR_			  Near	 DGROUP:0022
BOXASSETSTART			  Near	 DGROUP:0016
BOXASSETSTEP			  Near	 DGROUP:001A
BOXASSET_B			  Near	 DGROUP:002A
BOXASSET_U			  Near	 DGROUP:001A
BOXCOLOR			  Near	 DGROUP:003F
BOXHEIGHT			  Near	 DGROUP:003C
BOXHEIGHTPOS			  Near	 DGROUP:003A
BOXSYMBOLS			  Near	 DGROUP:0010
BOXTHEME			  Near	 DGROUP:003E
BOXWIDTH			  Near	 DGROUP:003D
BOXWIDTHPOS			  Near	 DGROUP:003B
CALCULATEVIDMEMPOS		  Near	 DGROUP:025E
DRAWBOX				  Near	 DGROUP:035C
DRAWLINE			  Near	 DGROUP:03B7
GETARGS				  Near	 DGROUP:0168
MSCNNDEC			  Near	 DGROUP:02DD
MSCNNHEX			  Near	 DGROUP:0305
PRINTNBIN			  Near	 DGROUP:028A
PRINTNDEC			  Near	 DGROUP:02BE
PRINTNHEX			  Near	 DGROUP:029E
RETURNPROGRAM			  Near	 DGROUP:0163
SCANNDEC			  Near	 DGROUP:026C
START				  Near	 DGROUP:0100

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0040 Word	  Public  DATA
  _TEXT				  16  03C9 Word	  Public  CODE
