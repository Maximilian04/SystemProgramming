Turbo Assembler	 Version 4.1	    03/03/23 24:21:56	    Page 1
probox.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     .286
      4				     locals @@
      5
      6				     org 80h
      7	0080  ??		     ArgCount:	     db	?
      8	0081  ??		     Args:	     db	?
      9
     10				     org 100h
     11
     12				     ; probox.com 8 21 3 2 F 19	C 1A 15	10 9 7 8 3 12
     13
     14	0100			     Start:
     15
     16	0100  B8 B800				     mov ax, 0b800h		     ; адрес сегмента с		    +
     17				     видеопамятью -> es
     18	0103  8E C0				     mov es, ax			     ;
     19	0105  8C D0				     mov ax, ss			     ; Segment with stack, code, etc.
     20	0107  8E D8				     mov ds, ax			     ;
     21
     22	0109  6A 00				     push 0h			     ; textFlag
     23	010B  E8 007D				     call GetArgs
     24	010E  85 C0				     test ax, ax
     25	0110  74 03				     jz	@@ContinueHere1
     26	0112  EB 59 90				     jmp ReturnProgram		     ; >>>>>>>>>>>>>>
     27	0115					     @@ContinueHere1:
     28						     ; push si
     29
     30						     ; mov dh, 01Ah
     31						     ; mov ah, 0
     32						     ; mov al, byte ptr	[ArgCount]
     33						     ; mov bx, 160d*17 + 160d/2	- 18d +	4d; Середина строчки
     34						     ; call PrintNDec
     35
     36	0115  B7 00				     mov bh, 0
     37	0117  8A 1E 003Er			     mov bl, byte ptr [boxTheme]
     38	011B  8A 26 003Fr			     mov ah, byte ptr [boxColor]
     39
     40	011F  8A 87 0016r			     mov al, byte ptr [BoxAssetLU + bx]
     41	0123  50				     push ax
     42	0124  8A 87 001Ar			     mov al, byte ptr [BoxAsset_U + bx]
     43	0128  50				     push ax
     44	0129  8A 87 001Er			     mov al, byte ptr [BoxAssetRU + bx]
     45	012D  50				     push ax
     46	012E  8A 87 0022r			     mov al, byte ptr [BoxAssetR_ + bx]
     47	0132  50				     push ax
     48	0133  8A 87 0026r			     mov al, byte ptr [BoxAssetRB + bx]
     49	0137  50				     push ax
     50	0138  8A 87 002Ar			     mov al, byte ptr [BoxAsset_B + bx]
     51	013C  50				     push ax
     52	013D  8A 87 002Er			     mov al, byte ptr [BoxAssetLB + bx]
     53	0141  50				     push ax
     54	0142  8A 87 0032r			     mov al, byte ptr [BoxAssetL_ + bx]
     55	0146  50				     push ax
     56	0147  8A 87 0036r			     mov al, byte ptr [BoxAssetFI + bx]
     57	014B  50				     push ax
Turbo Assembler	 Version 4.1	    03/03/23 24:21:56	    Page 2
probox.asm



     58	014C  8A 2E 003Ar			     mov ch, byte ptr [boxHeightPos]
     59	0150  8A 0E 003Br			     mov cl, byte ptr [boxWidthPos]
     60	0154  E8 013E				     call CalculateVidMemPos
     61	0157  8A 2E 003Cr			     mov ch, byte ptr [boxHeight]
     62	015B  8A 0E 003Dr			     mov cl, byte ptr [boxWidth]
     63	015F  E8 0231				     call DrawBox
     64	0162  83 C4 12				     add sp, 2*9d
     65
     66						     ; pop si
     67	0165  58				     pop ax			     ; textFlag
     68	0166  85 C0				     test ax, ax
     69	0168  74 03				     jz	ReturnProgram		     ; >>>>>>>>>>>>>>
     70
     71
     72	016A  E8 0005				     call PrintText
     73
     74						     ; mov dh, 00000010b	       ; Dark green on black
     75						     ; pop ax			       ; Scanned number
     76						     ; push ax			       ;
     77
     78						     ; call PrintNBin
     79
     80	016D			     ReturnProgram:				     ; <<<<<<<<<<<<<<
     81	016D  B8 4C00				     mov ax, 4c00h		     ; exit(0)
     82	0170  CD 21				     int 21h
     83
     84
     85
     86				     ;------------------------------------------------
     87				     ; Prints text into	the box
     88				     ;------------------------------------------------
     89				     ; Entry:	     None
     90				     ;
     91				     ; Expects:	     DS:SI -> text
     92				     ;
     93				     ; Exit:	     None
     94				     ;
     95				     ; Destroys:
     96				     ;------------------------------------------------
     97				     ; Stack frame:
     98				     ;		     ...
     99				     ;		     retAddr	 [bp + 2]
    100				     ;		     stored BP	 [bp]
    101				     ;		     text ptr	 [bp - 2]
    102				     ;		     ...
    103				     ;------------------------------------------------
    104
    105	0172			     PrintText	     proc
    106	0172  55				     push bp
    107	0173  8B EC				     mov bp, sp			     ; Complete	stack frame
    108	0175  56				     push si
    109
    110
    111	0176  06				     push es
    112	0177  8C DF				     mov di, ds			     ; ds -> es
    113	0179  8E C7				     mov es, di			     ;
    114	017B  8B FE				     mov di, si			     ; si -> di
Turbo Assembler	 Version 4.1	    03/03/23 24:21:56	    Page 3
probox.asm



    115	017D  E8 0123				     call StrLen		     ; cx = text length
    116	0180  07				     pop es
    117
    118	0181  B6 0D				     mov dh, 0Dh
    119	0183  8B C1				     mov ax, cx
    120	0185  E8 0172				     call PrintNDec
    121
    122
    123	0188  5D				     pop bp
    124	0189  5D				     pop bp			     ; Stack frame
    125	018A  C3				     ret
    126	018B			     PrintText	     endp
    127
    128				     ;------------------------------------------------
    129				     ;------------------------------------------------
    130
    131
    132				     ;------------------------------------------------
    133				     ; Gets information	from cmd argument
    134				     ;------------------------------------------------
    135				     ; Entry:	     None
    136				     ;
    137				     ; Expects:	     None
    138				     ;
    139				     ; Exit:	     AX	= 0 if no errors, 1 contrary
    140				     ;		     textFlag =	1 if DS:SI -> box text,	0 if no	text
    141				     ;
    142				     ; Destroys:     BX	CX SI DI (DH if	error)
    143				     ;------------------------------------------------
    144				     ; Stack frame:
    145				     ;		     ...
    146				     ;		     textFlag	 [bp + 4]
    147				     ;		     retAddr	 [bp + 2]
    148				     ;		     stored BP	 [bp]
    149				     ;		     ...
    150				     ;------------------------------------------------
    151
    152	018B			     GetArgs	     proc
    153	018B  55				     push bp
    154	018C  8B EC				     mov bp, sp			     ; Complete	stack frame
    155
    156
    157	018E  B4 00				     mov ah, 0			     ; At least	one argument!
    158	0190  A0 0080r				     mov al, byte ptr [ArgCount]     ;
    159	0193  BB 0002				     mov bx, 2d			     ;
    160	0196  3B C3				     cmp ax, bx			     ;
    161	0198  7D 03				     jnl @@ContinueHere1	     ;
    162	019A  E9 00D7				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    163	019D					     @@ContinueHere1:		     ;
    164
    165								 ; ONE STEP:
    166								 ; arg -> bx
    167								 ; if the last 1 -> ax
    168								 ; DS:SI -> next
    169	019D  B2 20				     mov dl, 020h		     ; 20h Terminator
    170	019F  B6 0D				     mov dh, 00Dh		     ; 0Dh TerminatorEnd
    171	01A1  BE 0082r				     mov si, offset Args + 1	     ; First argument
Turbo Assembler	 Version 4.1	    03/03/23 24:21:56	    Page 4
probox.asm



    172
    173	01A4  BB 0000				     mov bx, 0
    174	01A7  E8 016F				     call MScnNDec
    175	01AA  88 1E 003Ar			     mov byte ptr [boxHeightPos], bl
    176	01AE  85 C0				     test ax, ax
    177	01B0  74 03				     jz	@@ContinueHere2
    178	01B2  E9 00BF				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    179	01B5					     @@ContinueHere2:
    180
    181
    182	01B5  BB 0000				     mov bx, 0
    183	01B8  E8 015E				     call MScnNDec
    184	01BB  88 1E 003Br			     mov byte ptr [boxWidthPos], bl
    185	01BF  85 C0				     test ax, ax
    186	01C1  74 03				     jz	@@ContinueHere3
    187	01C3  E9 00AE				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    188	01C6					     @@ContinueHere3:
    189
    190	01C6  BB 0000				     mov bx, 0
    191	01C9  E8 014D				     call MScnNDec
    192	01CC  88 1E 003Cr			     mov byte ptr [boxHeight], bl
    193	01D0  85 C0				     test ax, ax
    194	01D2  74 03				     jz	@@ContinueHere4
    195	01D4  E9 009D				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    196	01D7					     @@ContinueHere4:
    197
    198	01D7  BB 0000				     mov bx, 0
    199	01DA  E8 013C				     call MScnNDec
    200	01DD  88 1E 003Dr			     mov byte ptr [boxWidth], bl
    201	01E1  85 C0				     test ax, ax
    202	01E3  74 03				     jz	@@ContinueHere5
    203	01E5  E9 008C				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    204	01E8					     @@ContinueHere5:
    205
    206	01E8  BB 0000				     mov bx, 0
    207	01EB  E8 0153				     call MScnNHex
    208	01EE  88 1E 003Er			     mov byte ptr [boxTheme], bl
    209
    210	01F2  B9 0002				     mov cx, 02h
    211	01F5  3B D9				     cmp bx, cx
    212	01F7  7E 11				     jle @@Theme02		     ; ---->
    213	01F9  B9 000F				     mov cx, 0Fh
    214	01FC  3B D9				     cmp bx, cx
    215	01FE  74 0D				     je	@@ThemeF		     ; ---->
    216	0200  B9 00C0				     mov cx, 0C0h
    217	0203  3B D9				     cmp bx, cx
    218	0205  7D 30				     jge @@ThemeC		     ; ---->
    219
    220	0207  EB 7C 90				     jmp @@SetErrorBadTheme
    221
    222				     ;	  0,  1,  2 - standart box	   & text
    223				     ;	 C0, C1, C2 - standart box & color & text
    224				     ;	 F	 - various symbols & color & text
    225
    226	020A			     @@Theme02:					     ; <----
    227	020A  EB 4E 90				     jmp @@LastArg		     ; ->>>>>>>>>>>>>
    228
Turbo Assembler	 Version 4.1	    03/03/23 24:21:56	    Page 5
probox.asm



    229	020D			     @@ThemeF:					     ; <----
    230	020D  C6 06 003Er 03			     mov byte ptr [boxTheme], 03d
    231
    232	0212  BF 0019r				     mov di, offset BoxAssetStart + 3
    233	0215  B9 001Ar				     mov cx, offset BoxAssetStep     ; cx = step
    234	0218  81 E9 0016r			     sub cx, offset BoxAssetStart    ;
    235
    236	021C				 @@OneStep:				     ; <-------------------------\
    237	021C  85 C0				     test ax, ax		     ;				 |
    238	021E  74 03				     jz	@@ContinueHere6		     ;				 |
    239	0220  EB 52 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>		 |>>>
    240	0223					     @@ContinueHere6:		     ;				 |
    241										     ;				 |
    242	0223  BB 0000				     mov bx, 0			     ;				 |
    243	0226  E8 00F0				     call MScnNDec		     ;				 |
    244	0229  88 1D				     mov [di], bl		     ;				 |
    245										     ;				 |
    246	022B  03 F9				     add di, cx			     ;				 |
    247										     ;				 |
    248	022D  BB 003Ar				     mov bx, offset BoxAssetEnd	     ;				 |
    249	0230  3B FB				     cmp di, bx			     ;				 |
    250	0232  7C E8				     jl	@@OneStep		     ; >-------------------------/
    251
    252	0234  EB 10 90				     jmp @@SetColor		     ; >>====\\
    253										     ;	     ||
    254	0237			     @@ThemeC:					     ; <-----||--
    255	0237  B9 00C2				     mov cx, 0C2h		     ;	     ||
    256	023A  3B D9				     cmp bx, cx			     ;	     ||
    257	023C  7E 03				     jng @@ContinueHere10	     ;	     ||
    258	023E  EB 45 90				     jmp @@SetErrorBadTheme	     ; >>>>>>||>>>>>>
    259	0241					     @@ContinueHere10:		     ;	     ||
    260										     ;	     ||
    261	0241  80 2E 003Er C0			     sub byte ptr [boxTheme], 0C0h   ;	     ||
    262										     ;	     ||
    263	0246			     @@SetColor:				     ; <<====//
    264	0246  85 C0				     test ax, ax
    265	0248  74 03				     jz	@@ContinueHere11
    266	024A  EB 28 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    267	024D					     @@ContinueHere11:
    268
    269	024D  BB 0000				     mov bx, 0
    270	0250  E8 00EE				     call MScnNHex
    271	0253  88 1E 003Fr			     mov byte ptr [boxColor], bl
    272
    273	0257  EB 01 90				     jmp @@LastArg		     ; ->>>>>>>>>>>>>
    274
    275
    276
    277						     ; mov ah, 0
    278						     ; mov al, bl
    279						     ; mov dh, 004h
    280						     ; mov bx, 160d*4+7d*2
    281						     ; call PrintNHex
    282
    283
    284	025A			     @@LastArg:					     ; <<<<<<<<<<<<<-
    285	025A  85 C0				     test ax, ax
Turbo Assembler	 Version 4.1	    03/03/23 24:21:56	    Page 6
probox.asm



    286	025C  74 0B				     jz	@@hasText		     ; >>====\\
    287										     ;	     ||
    288	025E  C7 46 04 0000			     mov word ptr ss:[bp + 4], 0     ;	     ||
    289										     ;	     ||
    290	0263  B8 0000				     mov ax, 0			     ;	     ||
    291	0266  EB 2B 90				     jmp @@ProcEnd		     ; >-\   ||
    292	0269					     @@hasText:			     ; <<|===//
    293										     ;	 |
    294	0269  C7 46 04 0001			     mov word ptr ss:[bp + 4], 1     ;	 |
    295										     ;	 |
    296	026E  B8 0000				     mov ax, 0			     ;	 |
    297	0271  EB 20 90				     jmp @@ProcEnd		     ; >-\
    298	0274			     @@SetErrorNoArg:				     ; <<|<<<<<<<<<<<
    299	0274  B8 0239				     mov ax, 0239h		     ; Error code: No argument (more expected) : 239
    300	0277  B6 0C				     mov dh, 00Ch		     ;	 |
    301	0279  BB 0286				     mov bx, 160d*4+3d*2	     ;	 |
    302	027C  E8 0060				     call PrintNHex		     ;	 |
    303	027F  B8 0239				     mov ax, 0239h		     ;	 |
    304										     ;	 |
    305										     ;	 |
    306	0282  EB 0F 90				     jmp @@ProcEnd		     ; >-\
    307	0285			     @@SetErrorBadTheme:			     ; <<|<<<<<<<<<<<
    308	0285  B8 0240				     mov ax, 0240h		     ; Error code: No argument (more expected) : 240
    309	0288  B6 0C				     mov dh, 00Ch		     ;	 |
    310	028A  BB 0286				     mov bx, 160d*4+3d*2	     ;	 |
    311	028D  E8 004F				     call PrintNHex		     ;	 |
    312	0290  B8 0240				     mov ax, 0240h		     ;	 |
    313										     ;	 |
    314										     ;	 |
    315	0293			     @@ProcEnd:					     ; <-/
    316	0293  5D				     pop bp			     ; Stack frame
    317	0294  C3				     ret
    318	0295			     GetArgs	     endp
    319
    320				     ;------------------------------------------------
    321				     ;------------------------------------------------
    322
    323
    324				     ;------------------------------------------------
    325				     ; Calculate video mem offset by position
    326				     ;------------------------------------------------
    327				     ; Entry:	     CH	= heightPosition
    328				     ;		     CL	= widthPosition
    329				     ;
    330				     ; Expects:	     None
    331				     ;
    332				     ; Exit:	     BX	= start	addr to	draw
    333				     ;
    334				     ; Destroys:     AX
    335				     ;------------------------------------------------
    336				     ; Stack frame:
    337				     ;		     ...
    338				     ;		     retAddr	 []
    339				     ;		     ...
    340				     ;------------------------------------------------
    341
    342	0295			     CalculateVidMemPos	 proc
Turbo Assembler	 Version 4.1	    03/03/23 24:21:56	    Page 7
probox.asm



    343						     ; push bp
    344						     ; mov bp, sp		       ; Complete stack	frame
    345
    346
    347						     ; bx = 160d * ch +	2 * cl
    348	0295  B7 00				     mov bh, 0
    349	0297  8A D9				     mov bl, cl
    350	0299  D1 E3				     sal bx, 1
    351
    352	029B  B8 00A0				     mov ax, 160d
    353	029E  F6 E5				     mul ch
    354	02A0  03 D8				     add bx, ax
    355
    356						     ; mov ax, bx
    357						     ; mov bx, 80d
    358						     ; call PrintNDec
    359
    360
    361						     ; pop bp			       ; Stack frame
    362	02A2  C3				     ret
    363	02A3			     CalculateVidMemPos	 endp
    364
    365				     ;------------------------------------------------
    366				     ;------------------------------------------------
    367
    368
    369				     ;------------------------------------------------
    370				     ; Count the length	of the 0Dh-terminated string (str)
    371				     ;------------------------------------------------
    372				     ; Entry:	     ES:DI = str
    373				     ;
    374				     ; Expects:	     DF	= 0 (CLD)
    375				     ;
    376				     ; Exit:	     CX	= length
    377				     ;
    378				     ; Destroys:     AL	DI
    379				     ;------------------------------------------------
    380				     ; Stack frame:
    381				     ;		     ...
    382				     ;		     retAddr	 []
    383				     ;		     ...
    384				     ;------------------------------------------------
    385				     ;Направление просмотра	 зависит	 от флага		    +
    386				     направления DF,	значение  которого  можно	менять  с    +
    387				     помощью команд CLD (DF:=0) и	STD (DF:=1).
    388
    389	02A3			     StrLen	     proc
    390						     ; push bp
    391						     ; mov bp, sp		       ; Complete stack	frame
    392
    393	02A3  B0 0D				     mov al, 00Dh		     ; AL = terminator
    394	02A5  33 C9				     xor cx, cx			     ; CX = 0
    395
    396	02A7			     @@CountStep:				     ; <-------------------------\
    397	02A7  41				     inc cx			     ;				 |
    398	02A8  AE				     scasb			     ;				 |
    399	02A9  75 FC				     jne @@CountStep		     ; >-------------------------/
Turbo Assembler	 Version 4.1	    03/03/23 24:21:56	    Page 8
probox.asm



    400
    401	02AB  49				     dec cx
    402
    403						     ; pop bp			       ; Stack frame
    404	02AC  C3				     ret
    405	02AD			     StrLen	     endp
    406
    407				     ;------------------------------------------------
    408				     ;------------------------------------------------
    409
    410
    411				     include ..\LianLib\ScanNDec.asm
1   412				     ;------------------------------------------------
1   413				     ; Scans number as decimal
1   414				     ;------------------------------------------------
1   415				     ; Entry:	     none
1   416				     ;
1   417				     ; Expects:	     BX	= 0
1   418				     ;
1   419				     ; Exit:	     BX	= number to print
1   420				     ;
1   421				     ; Destroys:     AX	CL Si
1   422				     ;------------------------------------------------
1   423				     ;------------------------------------------------
1   424	02AD			     ScanNDec	     proc
1   425
1   426	02AD			     @@ScanDigit:				     ; <-------------------------\
1   427										     ;				 |
1   428	02AD  B4 01				     mov ah, 01h		     ; getc -> al		 |
1   429	02AF  CD 21				     int 21h			     ; ^			 |
1   430										     ;				 |
1   431	02B1  3C 0D				     cmp al, 13d		     ; Stop scan if enter	 |
1   432	02B3  74 15				     je	@@EndScanDigit		     ; >>========================|=======\\
1   433										     ;				 |	 ||
1   434	02B5  8A C8				     mov cl, al			     ; Store al	to cl		 |	 ||
1   435										     ;				 |	 ||
1   436	02B7  8B C3				     mov ax, bx			     ; bx *= 10			 |	 ||
1   437	02B9  BE 000A				     mov si, 10d		     ; ^			 |	 ||
1   438	02BC  F7 E6				     mul si			     ; ^			 |	 ||
1   439	02BE  8B D8				     mov bx, ax			     ; ^			 |	 ||
1   440										     ;				 |	 ||
1   441	02C0  8A C1				     mov al, cl			     ; Retore al from cl	 |	 ||
1   442										     ;				 |	 ||
1   443	02C2  2C 30				     sub al, "0"		     ; ASCII "0" offset		 |	 ||
1   444										     ;				 |	 ||
1   445	02C4  B4 00				     mov ah, 0d			     ; bx += al			 |	 ||
1   446	02C6  03 D8				     add bx, ax			     ; ^			 |	 ||
1   447										     ;				 |	 ||
1   448	02C8  EB E3				     jmp @@ScanDigit		     ; >-------------------------/	 ||
1   449										     ;					 ||
1   450	02CA			     @@EndScanDigit:				     ; <<================================//
1   451	02CA  C3				     ret
1   452
1   453	02CB			     ScanNDec	     endp
1   454
1   455				     ;------------------------------------------------
1   456				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    03/03/23 24:21:56	    Page 9
probox.asm



1   457
    458				     include ..\LianLib\PrntNBin.asm
1   459				     ;------------------------------------------------
1   460				     ; Prints number as	binary to vidmem
1   461				     ;------------------------------------------------
1   462				     ; Entry:	     AX	= number to print
1   463				     ;		     BX	= start	addr to	print
1   464				     ;
1   465				     ; Expects:	     ES	-> Video segment
1   466				     ;		     DH	= color	code
1   467				     ;
1   468				     ; Exit:	     None
1   469				     ;
1   470				     ; Destroys:     AX	BX CX DL
1   471				     ;------------------------------------------------
1   472				     ;------------------------------------------------
1   473	02CB			     PrintNBin	     proc
1   474
1   475	02CB  B9 0010				     mov cx, 16d		     ; 16 bit in 2 byte	in ax
1   476
1   477	02CE			     @@PrintDigit:				     ; <-------------------------\
1   478										     ;				 |
1   479	02CE  B2 01				     mov dl, 00000001b		     ; Mask			 |
1   480	02D0  22 D0				     and dl, al			     ;				 |
1   481	02D2  80 C2 30				     add dl, 30h		     ; ASCII "0" offset		 |
1   482										     ;				 |
1   483	02D5  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   484										     ;				 |
1   485	02D8  4B				     dec bx			     ; Next digit		 |
1   486	02D9  4B				     dec bx			     ; ^			 |
1   487										     ;				 |
1   488	02DA  D1 E8				     shr ax, 1d			     ; ax >> 1			 |
1   489										     ;				 |
1   490	02DC  E2 F0				     loop @@PrintDigit		     ; >-------------------------/
1   491
1   492	02DE  C3				     ret
1   493
1   494	02DF			     PrintNBin	     endp
1   495
1   496				     ;------------------------------------------------
1   497				     ;------------------------------------------------
1   498
    499				     include ..\LianLib\PrntNHex.asm
1   500				     ;------------------------------------------------
1   501				     ; Prints number as	hexagen	to vidmem
1   502				     ;------------------------------------------------
1   503				     ; Entry:	     AX	= number to print
1   504				     ;		     BX	= start	addr to	print
1   505				     ;
1   506				     ; Expects:	     ES	-> Video segment
1   507				     ;		     DH	= color	code
1   508				     ;
1   509				     ; Exit:	     None
1   510				     ;
1   511				     ; Destroys:     AX	BX CX DL Si
1   512				     ;------------------------------------------------
1   513				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    03/03/23 24:21:56	    Page 10
probox.asm



1   514	02DF			     PrintNHex	     proc
1   515
1   516	02DF  B9 0004				     mov cx, 4d			     ; 4 digits	in 2 byte in ax
1   517
1   518	02E2			     @@PrintDigit:				     ; <-------------------------\
1   519										     ;				 |
1   520	02E2  B2 0F				     mov dl, 00001111b		     ; Mask			 |
1   521	02E4  22 D0				     and dl, al			     ;				 |
1   522										     ;				 |
1   523	02E6  8B F2				     mov si, dx			     ; dl -> si			 |
1   524	02E8  83 E6 0F				     and si, 0Fh		     ;				 |
1   525										     ;				 |
1   526	02EB  8A 94 0000r			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
1   527										     ;				 |
1   528	02EF  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   529										     ;				 |
1   530	02F2  4B				     dec bx			     ; Next digit		 |
1   531	02F3  4B				     dec bx			     ; ^			 |
1   532										     ;				 |
1   533	02F4  C1 E8 04				     shr ax, 4d			     ; ax >> 4			 |
1   534										     ;				 |
1   535	02F7  E2 E9				     loop @@PrintDigit		     ; >-------------------------/
1   536
1   537	02F9  C3				     ret
1   538
1   539	02FA			     PrintNHex	     endp
1   540
1   541				     ;------------------------------------------------
1   542				     ;------------------------------------------------
1   543
    544				     include ..\LianLib\PrntNDec.asm
1   545				     ;------------------------------------------------
1   546				     ; Prints number as	decimal	to vidmem
1   547				     ;------------------------------------------------
1   548				     ; Entry:	     AX	= number to print
1   549				     ;		     BX	= start	addr to	print
1   550				     ;
1   551				     ; Expects:	     ES	-> Video segment
1   552				     ;		     DH	= color	code
1   553				     ;
1   554				     ; Exit:	     None
1   555				     ;
1   556				     ; Destroys:     AX	BX CX DL Si
1   557				     ;------------------------------------------------
1   558				     ;------------------------------------------------
1   559	02FA			     PrintNDec	     proc
1   560
1   561	02FA  B9 0005				     mov cx, 5d			     ; 5 digits	in 2 byte in ax
1   562
1   563	02FD			     @@PrintDigit:				     ; <-------------------------\
1   564	02FD  8A EE				     mov ch, dh			     ; Store dh	to ch		 |
1   565										     ;				 |
1   566	02FF  BA 0000				     mov dx, 0d			     ; for division		 |
1   567	0302  BE 000A				     mov si, 10d		     ; ax/10 ->	ax &		 |
1   568	0305  F7 F6				     div si			     ; & ax%10 -> dx		 | !!! dx < 10
1   569										     ;				 |
1   570	0307  8B F2				     mov si, dx			     ; dl -> si			 |
Turbo Assembler	 Version 4.1	    03/03/23 24:21:56	    Page 11
probox.asm



1   571										     ;				 |
1   572	0309  8A 94 0000r			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
1   573										     ;				 |
1   574	030D  8A F5				     mov dh, ch			     ; Restore dh from ch	 |
1   575	030F  B5 00				     mov ch, 0			     ; ^			 |
1   576										     ;				 |
1   577	0311  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   578										     ;				 |
1   579	0314  4B				     dec bx			     ; Next digit		 |
1   580	0315  4B				     dec bx			     ; ^			 |
1   581										     ;				 |
1   582										     ;				 |
1   583	0316  E2 E5				     loop @@PrintDigit		     ; >-------------------------/
1   584
1   585	0318  C3				     ret
1   586
1   587	0319			     PrintNDec	     endp
1   588
1   589				     ;------------------------------------------------
1   590				     ;------------------------------------------------
1   591
    592				     include ..\LianLib\MScnNDec.asm
1   593				     ;------------------------------------------------
1   594				     ; Scans number as decimal from string in memory
1   595				     ;------------------------------------------------
1   596				     ; Entry:	     DS:SI = memory ptr
1   597				     ;
1   598				     ; Expects:	     BX	= 0
1   599				     ;		     DL	= terminator char 1
1   600				     ;		     DH	= terminator char 2 (TerminatorEnd)
1   601				     ;		     DF	= 0 (CLD) [or backward]
1   602				     ;
1   603				     ; Exit:	     BX	= scanned number
1   604				     ;		     SI	to next	word
1   605				     ;		     AX	= 0 if terminator, 1 if	TerminatorEnd
1   606				     ;
1   607				     ; Destroys:     None
1   608				     ;------------------------------------------------
1   609				     ;------------------------------------------------
1   610	0319			     MScnNDec	     proc
1   611
1   612	0319			     @@ScanDigit:				     ; <-------------------------\
1   613										     ;				 |
1   614						     ; mov ah, 01h		     ; getc -> al		 |
1   615						     ; int 21h			     ; ^			 |
1   616	0319  AC				     lodsb			     ; char -> al		 |
1   617										     ;				 |
1   618						     ; cmp al, 13d		     ; Stop scan if enter	 |
1   619	031A  3A C2				     cmp al, dl			     ; Stop scan if terminator	 |
1   620	031C  74 19				     je	@@TermScanDigit		     ; >>========================|=======\\
1   621	031E  3A C6				     cmp al, dh			     ;				 |	 ||
1   622	0320  74 1B				     je	@@TerminatorEndScanDigit     ; >>========================|===========\\
1   623										     ;				 |	 ||  ||
1   624						     ; mov cl, al		     ; Store al	to cl		 |	 ||  ||
1   625	0322  50				     push ax			     ; Store ax			 |	 ||  ||
1   626	0323  52				     push dx			     ; Store dx			 |	 ||  ||
1   627										     ;				 |	 ||  ||
Turbo Assembler	 Version 4.1	    03/03/23 24:21:56	    Page 12
probox.asm



1   628	0324  8B C3				     mov ax, bx			     ; bx *= 10			 |	 ||  ||
1   629	0326  BA 000A				     mov dx, 10d		     ; ^			 |	 ||  ||
1   630	0329  F7 E2				     mul dx			     ; ^			 |	 ||  ||
1   631	032B  8B D8				     mov bx, ax			     ; ^			 |	 ||  ||
1   632										     ;				 |	 ||  ||
1   633	032D  5A				     pop dx			     ; Restore dx		 |	 ||  ||
1   634	032E  58				     pop ax			     ; Restore ax		 |	 ||  ||
1   635						     ; mov al, cl		     ; Restore al from cl	 |	 ||  ||
1   636										     ;				 |	 ||  ||
1   637	032F  2C 30				     sub al, "0"		     ; ASCII "0" offset		 |	 ||  ||
1   638										     ;				 |	 ||  ||
1   639	0331  B4 00				     mov ah, 0d			     ; bx += al			 |	 ||  ||
1   640	0333  03 D8				     add bx, ax			     ; ^			 |	 ||  ||
1   641										     ;				 |	 ||  ||
1   642	0335  EB E2				     jmp @@ScanDigit		     ; >-------------------------/	 ||  ||
1   643										     ;					 ||  ||
1   644	0337			     @@TermScanDigit:				     ; <<================================//  ||
1   645	0337  B8 0000				     mov ax, 0			     ;					     ||
1   646	033A  EB 04 90				     jmp @@EndProc		     ; >-----\				     ||
1   647	033D			     @@TerminatorEndScanDigit:			     ; <<====|===============================//
1   648	033D  B8 0001				     mov ax, 1			     ;	     |
1   649	0340			     @@EndProc:					     ; <-----/
1   650	0340  C3				     ret
1   651
1   652	0341			     MScnNDec	     endp
1   653
1   654				     ;------------------------------------------------
1   655				     ;------------------------------------------------
1   656
    657				     include ..\LianLib\MScnNHex.asm
1   658				     ;------------------------------------------------
1   659				     ; Scans number as hexagen from string in memory
1   660				     ;------------------------------------------------
1   661				     ; Entry:	     DS:SI = memory ptr
1   662				     ;
1   663				     ; Expects:	     BX	= 0
1   664				     ;		     DL	= terminator char 1
1   665				     ;		     DH	= terminator char 2 (TerminatorEnd)
1   666				     ;		     DF	= 0 (CLD) [or backward]
1   667				     ;
1   668				     ; Exit:	     BX	= scanned number
1   669				     ;		     SI	to next	word
1   670				     ;		     AX	= 0 if terminator, 1 if	TerminatorEnd
1   671				     ;
1   672				     ; Destroys:     None
1   673				     ;------------------------------------------------
1   674				     ;------------------------------------------------
1   675	0341			     MScnNHex	     proc
1   676
1   677	0341			     @@ScanDigit:				     ; <-------------------------\
1   678										     ;				 |
1   679						     ; mov ah, 01h		     ; getc -> al		 |
1   680						     ; int 21h			     ; ^			 |
1   681	0341  AC				     lodsb			     ; char -> al		 |
1   682										     ;				 |
1   683						     ; cmp al, 13d		     ; Stop scan if enter	 |
1   684	0342  3A C2				     cmp al, dl			     ; Stop scan if terminator	 |
Turbo Assembler	 Version 4.1	    03/03/23 24:21:56	    Page 13
probox.asm



1   685	0344  74 43				     je	@@TermScanDigit		     ; >>========================|=======\\
1   686	0346  3A C6				     cmp al, dh			     ;				 |	 ||
1   687	0348  74 45				     je	@@TerminatorEndScanDigit     ; >>========================|===========\\
1   688										     ;				 |	 ||  ||
1   689										     ;				 |	 ||  ||
1   690	034A  C1 E3 04				     shl bx, 4d			     ; bx *= 16			 |	 ||  ||
1   691										     ;				 |	 ||  ||
1   692										     ;				 |	 ||  ||
1   693	034D  53				     push bx			     ; Store bx			 |	 ||  ||
1   694										     ;				 |	 ||  ||
1   695	034E  BB 0061				     mov bx, "a"		     ;				 |	 ||  ||
1   696	0351  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   697	0353  7C 0B				     jl	@@Nextaf		     ;				 |	 ||  ||
1   698	0355  BB 0066				     mov bx, "f"		     ;				 |	 ||  ||
1   699	0358  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   700	035A  7F 04				     jg	@@Nextaf		     ;				 |	 ||  ||
1   701	035C  2C 61				     sub al, "a"		     ; ASCII "0" offset		 |	 ||  ||
1   702	035E  04 0A				     add al, 0ah		     ; ^			 |	 ||  ||
1   703	0360			     @@Nextaf:					     ;				 |	 ||  ||
1   704	0360  BB 0041				     mov bx, "A"		     ;				 |	 ||  ||
1   705	0363  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   706	0365  7C 0B				     jl	@@NextAFCAPS		     ;				 |	 ||  ||
1   707	0367  BB 0046				     mov bx, "F"		     ;				 |	 ||  ||
1   708	036A  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   709	036C  7F 04				     jg	@@NextAFCAPS		     ;				 |	 ||  ||
1   710	036E  2C 41				     sub al, "A"		     ; ASCII "0" offset		 |	 ||  ||
1   711	0370  04 0A				     add al, 0Ah		     ; ^			 |	 ||  ||
1   712	0372			     @@NextAFCAPS:				     ;				 |	 ||  ||
1   713	0372  BB 0030				     mov bx, "0"		     ;				 |	 ||  ||
1   714	0375  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   715	0377  7C 09				     jl	@@Next09		     ;				 |	 ||  ||
1   716	0379  BB 0039				     mov bx, "9"		     ;				 |	 ||  ||
1   717	037C  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   718	037E  7F 02				     jg	@@Next09		     ;				 |	 ||  ||
1   719	0380  2C 30				     sub al, "0"		     ; ASCII "0" offset		 |	 ||  ||
1   720						     ; add al, 0		     ; ^			 |	 ||  ||
1   721	0382			     @@Next09:					     ;				 |	 ||  ||
1   722										     ;				 |	 ||  ||
1   723	0382  5B				     pop bx			     ; Restore bx		 |	 ||  ||
1   724										     ;				 |	 ||  ||
1   725	0383  B4 00				     mov ah, 0d			     ; bx += al			 |	 ||  ||
1   726	0385  03 D8				     add bx, ax			     ; ^			 |	 ||  ||
1   727										     ;				 |	 ||  ||
1   728	0387  EB B8				     jmp @@ScanDigit		     ; >-------------------------/	 ||  ||
1   729										     ;					 ||  ||
1   730	0389			     @@TermScanDigit:				     ; <<================================//  ||
1   731	0389  B8 0000				     mov ax, 0			     ;					     ||
1   732	038C  EB 04 90				     jmp @@EndProc		     ; >-----\				     ||
1   733	038F			     @@TerminatorEndScanDigit:			     ; <<====|===============================//
1   734	038F  B8 0001				     mov ax, 1			     ;	     |
1   735	0392			     @@EndProc:					     ; <-----/
1   736	0392  C3				     ret
1   737
1   738	0393			     MScnNHex	     endp
1   739
1   740				     ;------------------------------------------------
1   741				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    03/03/23 24:21:56	    Page 14
probox.asm



1   742
    743
    744				     include ..\LianLib\ProBox.asm
1   745				     ;------------------------------------------------
1   746				     ; Draws cool box on the screen
1   747				     ;------------------------------------------------
1   748				     ; Entry:	     BX	= start	addr to	draw
1   749				     ;		     CH	= height of box	(without frame)
1   750				     ;		     CL	= width	of box (without	frame)
1   751				     ;
1   752				     ; Expects:	     ES	-> Video segment
1   753				     ;
1   754				     ; Exit:	     None
1   755				     ;
1   756				     ; Destroys:     AX	BX (CX)	DX DI
1   757				     ;------------------------------------------------
1   758				     ; Stack frame:
1   759				     ;		     ...
1   760				     ;		     LU	char	 [bp + 20]   //	H - color attr
1   761				     ;		     _U	char	 [bp + 18]   //	L - symb attr
1   762				     ;		     RU	char	 [bp + 16]   //
1   763				     ;		     R_	char	 [bp + 14]   //
1   764				     ;		     RB	char	 [bp + 12]   //
1   765				     ;		     _B	char	 [bp + 10]   //
1   766				     ;		     LB	char	 [bp + 8]    //
1   767				     ;		     L_	char	 [bp + 6]    //
1   768				     ;		     FI	char	 [bp + 4]    //
1   769				     ;		     retAddr	 [bp + 2]
1   770				     ;		     stored BP	 [bp]
1   771				     ;		     stored CX	 [bp - 2]    //	size
1   772				     ;		     ...
1   773				     ;------------------------------------------------
1   774
1   775	0393			     DrawBox	     proc
1   776	0393  55				     push bp
1   777	0394  8B EC				     mov bp, sp			     ; Complete	stack frame
1   778	0396  51				     push cx
1   779
1   780										     ;-------------------------------------------
1   781										     ; Upper line
1   782	0397  8B FB				     mov di, bx
1   783	0399  8B 4E FE				     mov cx, [bp - 2]
1   784	039C  B5 00				     mov ch, 0
1   785	039E  FF 76 14				     push [bp +	20]
1   786	03A1  FF 76 12				     push [bp +	18]
1   787	03A4  FF 76 10				     push [bp +	16]
1   788	03A7  E8 0044				     call DrawLine
1   789	03AA  83 C4 06				     add sp, 2*3d
1   790										     ;-------------------------------------------
1   791										     ; Middle line
1   792	03AD  8B 4E FE				     mov cx, [bp - 2]
1   793	03B0  B6 00				     mov dh, 0
1   794	03B2  8A D5				     mov dl, ch
1   795	03B4			     @@MiddleStep:				     ; <-----------------\
1   796										     ;			 |
1   797	03B4  81 C3 00A0			     add bx, 160d		     ;			 |
1   798	03B8  8B FB				     mov di, bx			     ;			 |
Turbo Assembler	 Version 4.1	    03/03/23 24:21:56	    Page 15
probox.asm



1   799	03BA  8B 4E FE				     mov cx, [bp - 2]		     ;			 |
1   800	03BD  B5 00				     mov ch, 0			     ;			 |
1   801	03BF  FF 76 06				     push [bp +	6]		     ;			 |
1   802	03C2  FF 76 04				     push [bp +	4]		     ;			 |
1   803	03C5  FF 76 0E				     push [bp +	14]		     ;			 |
1   804	03C8  E8 0023				     call DrawLine		     ;			 |
1   805	03CB  83 C4 06				     add sp, 2*3d		     ;			 |
1   806	03CE  4A				     dec dx			     ;			 |
1   807	03CF  75 E3				     jnz @@MiddleStep		     ; >-----------------/
1   808										     ;-------------------------------------------
1   809										     ; Bottom line
1   810	03D1  81 C3 00A0			     add bx, 160d
1   811	03D5  8B FB				     mov di, bx
1   812	03D7  8B 4E FE				     mov cx, [bp - 2]
1   813	03DA  B5 00				     mov ch, 0
1   814	03DC  FF 76 08				     push [bp +	8]
1   815	03DF  FF 76 0A				     push [bp +	10]
1   816	03E2  FF 76 0C				     push [bp +	12]
1   817	03E5  E8 0006				     call DrawLine
1   818	03E8  83 C4 06				     add sp, 2*3d
1   819										     ;-------------------------------------------
1   820
1   821	03EB  59				     pop cx
1   822	03EC  5D				     pop bp			     ; Stack frame
1   823	03ED  C3				     ret
1   824	03EE			     DrawBox	     endp
1   825
1   826				     ;------------------------------------------------
1   827				     ;------------------------------------------------
1   828
1   829				     ; needs <include ?\LianLib\DrawLine.asm>
1   830
    831				     include ..\LianLib\DrawLine.asm
1   832				     ;------------------------------------------------
1   833				     ; Draws line on the screen	(Pattern ABB~BBC)
1   834				     ;------------------------------------------------
1   835				     ; Entry:	     DI	= start	addr to	draw
1   836				     ;		     CX	= width	of line	(without A&C)
1   837				     ;
1   838				     ; Expects:	     ES	-> Video segment
1   839				     ;		     DF	= 0 (CLD)
1   840				     ;
1   841				     ; Exit:	     None
1   842				     ;
1   843				     ; Destroys:     AX	CX DI
1   844				     ;------------------------------------------------
1   845				     ; Stack frame:
1   846				     ;		     ...
1   847				     ;		     'A' char	 [bp + 8]    //	H - color attr
1   848				     ;		     'B' char	 [bp + 6]    //	L - symb attr
1   849				     ;		     'C' char	 [bp + 4]    //
1   850				     ;		     retAddr	 [bp + 2]
1   851				     ;		     stored BP	 [bp]
1   852				     ;		     ...
1   853				     ;------------------------------------------------
1   854				     ;Направление просмотра	 зависит	 от флага		    +
    855				     направления DF,	значение  которого  можно	менять  с    +
Turbo Assembler	 Version 4.1	    03/03/23 24:21:56	    Page 16
probox.asm



    856				     помощью команд CLD (DF:=0) и	STD (DF:=1).
1   857
1   858	03EE			     DrawLine	     proc
1   859	03EE  55				     push bp
1   860	03EF  8B EC				     mov bp, sp			     ; Complete	stack frame
1   861
1   862	03F1  8B 46 08				     mov ax, [bp + 8]
1   863	03F4  AB				     stosw
1   864
1   865	03F5  8B 46 06				     mov ax, [bp + 6]
1   866	03F8  F3> AB				     rep stosw
1   867
1   868	03FA  8B 46 04				     mov ax, [bp + 4]
1   869	03FD  AB				     stosw
1   870
1   871	03FE  5D				     pop bp			     ; Stack frame
1   872	03FF  C3				     ret
1   873	0400			     DrawLine	     endp
1   874
1   875				     ;------------------------------------------------
1   876				     ;------------------------------------------------
1   877
    878
    879	0400			     .data
    880				     include ..\LianLib\Alphabet.asm
1   881	0000  30 31 32 33 34 35	36+  Alphabet:	     db	"0123456789ABCDEF"	     ; Alphabet	for printing (Thanks Ilya)
    882	      37 38 39 41 42 43	44+
    883	      45 46
1   884	0010  C9 CD BB BA BC C8	     BoxSymbols:     db	0c9h, 0cdh, 0bbh, 0bah,	0bch, 0c8h ; "╔═╗║╝╚"
1   885
1   886	0016			     BoxAssetStart:
1   887	0016  20 DA C9 00	     BoxAssetLU:     db	020h, 0dah, 0c9h, 000h
1   888	001A			     BoxAssetStep:
1   889	001A  20 C4 CD 00	     BoxAsset_U:     db	020h, 0c4h, 0cdh, 000h
1   890	001E  20 BF BB 00	     BoxAssetRU:     db	020h, 0bfh, 0bbh, 000h
1   891	0022  20 B3 BA 00	     BoxAssetR_:     db	020h, 0b3h, 0bah, 000h
1   892	0026  20 D9 BC 00	     BoxAssetRB:     db	020h, 0d9h, 0bch, 000h
1   893	002A  20 C4 CD 00	     BoxAsset_B:     db	020h, 0c4h, 0cdh, 000h
1   894	002E  20 C0 C8 00	     BoxAssetLB:     db	020h, 0c0h, 0c8h, 000h
1   895	0032  20 B3 BA 00	     BoxAssetL_:     db	020h, 0b3h, 0bah, 000h
1   896	0036  20 20 20 00	     BoxAssetFI:     db	020h, 020h, 020h, 000h
1   897	003A			     BoxAssetEnd:
1   898
1   899				     ; 0:    1:┌─┐ 2:╔═╗ 3:usr
1   900				     ;	       │ │	 ║ ║   chr
1   901				     ;	       └─┘   ╚═╝
1   902
    903
    904	003A  ??		     boxHeightPos:   db	?
    905	003B  ??		     boxWidthPos:    db	?
    906	003C  ??		     boxHeight:	     db	?
    907	003D  ??		     boxWidth:	     db	?
    908	003E  ??		     boxTheme:	     db	?
    909	003F  0A		     boxColor:	     db	00Ah
    910
    911				     end	     Start
Turbo Assembler	 Version 4.1	    03/03/23 24:21:56	    Page 17
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/03/23"
??FILENAME			  Text	 "probox  "
??TIME				  Text	 "24:21:56"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CONTINUEHERE1			  Near	 DGROUP:0115
@@CONTINUEHERE1			  Near	 DGROUP:019D
@@CONTINUEHERE10		  Near	 DGROUP:0241
@@CONTINUEHERE11		  Near	 DGROUP:024D
@@CONTINUEHERE2			  Near	 DGROUP:01B5
@@CONTINUEHERE3			  Near	 DGROUP:01C6
@@CONTINUEHERE4			  Near	 DGROUP:01D7
@@CONTINUEHERE5			  Near	 DGROUP:01E8
@@CONTINUEHERE6			  Near	 DGROUP:0223
@@COUNTSTEP			  Near	 DGROUP:02A7
@@ENDPROC			  Near	 DGROUP:0340
@@ENDPROC			  Near	 DGROUP:0392
@@ENDSCANDIGIT			  Near	 DGROUP:02CA
@@HASTEXT			  Near	 DGROUP:0269
@@LASTARG			  Near	 DGROUP:025A
@@MIDDLESTEP			  Near	 DGROUP:03B4
@@NEXT09			  Near	 DGROUP:0382
@@NEXTAF			  Near	 DGROUP:0360
@@NEXTAFCAPS			  Near	 DGROUP:0372
@@ONESTEP			  Near	 DGROUP:021C
@@PRINTDIGIT			  Near	 DGROUP:02CE
@@PRINTDIGIT			  Near	 DGROUP:02E2
@@PRINTDIGIT			  Near	 DGROUP:02FD
@@PROCEND			  Near	 DGROUP:0293
@@SCANDIGIT			  Near	 DGROUP:02AD
@@SCANDIGIT			  Near	 DGROUP:0319
@@SCANDIGIT			  Near	 DGROUP:0341
@@SETCOLOR			  Near	 DGROUP:0246
@@SETERRORBADTHEME		  Near	 DGROUP:0285
@@SETERRORNOARG			  Near	 DGROUP:0274
@@TERMINATORENDSCANDIGIT	  Near	 DGROUP:033D
@@TERMINATORENDSCANDIGIT	  Near	 DGROUP:038F
@@TERMSCANDIGIT			  Near	 DGROUP:0337
@@TERMSCANDIGIT			  Near	 DGROUP:0389
@@THEME02			  Near	 DGROUP:020A
@@THEMEC			  Near	 DGROUP:0237
@@THEMEF			  Near	 DGROUP:020D
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 PROBOX
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ALPHABET			  Near	 DGROUP:0000
Turbo Assembler	 Version 4.1	    03/03/23 24:21:56	    Page 18
Symbol Table



ARGCOUNT			  Near	 DGROUP:0080
ARGS				  Near	 DGROUP:0081
BOXASSETEND			  Near	 DGROUP:003A
BOXASSETFI			  Near	 DGROUP:0036
BOXASSETLB			  Near	 DGROUP:002E
BOXASSETLU			  Near	 DGROUP:0016
BOXASSETL_			  Near	 DGROUP:0032
BOXASSETRB			  Near	 DGROUP:0026
BOXASSETRU			  Near	 DGROUP:001E
BOXASSETR_			  Near	 DGROUP:0022
BOXASSETSTART			  Near	 DGROUP:0016
BOXASSETSTEP			  Near	 DGROUP:001A
BOXASSET_B			  Near	 DGROUP:002A
BOXASSET_U			  Near	 DGROUP:001A
BOXCOLOR			  Near	 DGROUP:003F
BOXHEIGHT			  Near	 DGROUP:003C
BOXHEIGHTPOS			  Near	 DGROUP:003A
BOXSYMBOLS			  Near	 DGROUP:0010
BOXTHEME			  Near	 DGROUP:003E
BOXWIDTH			  Near	 DGROUP:003D
BOXWIDTHPOS			  Near	 DGROUP:003B
CALCULATEVIDMEMPOS		  Near	 DGROUP:0295
DRAWBOX				  Near	 DGROUP:0393
DRAWLINE			  Near	 DGROUP:03EE
GETARGS				  Near	 DGROUP:018B
MSCNNDEC			  Near	 DGROUP:0319
MSCNNHEX			  Near	 DGROUP:0341
PRINTNBIN			  Near	 DGROUP:02CB
PRINTNDEC			  Near	 DGROUP:02FA
PRINTNHEX			  Near	 DGROUP:02DF
PRINTTEXT			  Near	 DGROUP:0172
RETURNPROGRAM			  Near	 DGROUP:016D
SCANNDEC			  Near	 DGROUP:02AD
START				  Near	 DGROUP:0100
STRLEN				  Near	 DGROUP:02A3

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0040 Word	  Public  DATA
  _TEXT				  16  0400 Word	  Public  CODE
