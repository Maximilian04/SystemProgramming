Turbo Assembler	 Version 4.1	    03/03/23 14:08:11	    Page 1
probox.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     locals @@
      4
      5				     org 80h
      6	0080  ??		     ArgCount:	     db	?
      7	0081  ??		     Args:	     db	?
      8
      9				     org 100h
     10
     11	0100			     Start:
     12
     13	0100  B8 B800				     mov ax, 0b800h		     ; адрес сегмента с		    +
     14				     видеопамятью -> es
     15	0103  8E C0				     mov es, ax			     ;
     16	0105  8C D0				     mov ax, ss			     ; Segment with stack, code, etc.
     17	0107  8E D8				     mov ds, ax			     ;
     18
     19	0109  E8 005C				     call GetArgs
     20	010C  85 C0				     test ax, ax
     21	010E  74 03				     jz	@@ContinueHere1
     22	0110  EB 51 90				     jmp ReturnProgram		     ; >>>>>>>>>>>>>>
     23	0113					     @@ContinueHere1:
     24
     25						     ; mov dh, 01Ah
     26						     ; mov ah, 0
     27						     ; mov al, byte ptr	[ArgCount]
     28						     ; mov bx, 160d*17 + 160d/2	- 18d +	4d; Середина строчки
     29						     ; call PrintNDec
     30
     31	0113  B7 00				     mov bh, 0
     32	0115  8A 1E 003Er			     mov bl, byte ptr [boxTheme]
     33	0119  8A 26 003Fr			     mov ah, byte ptr [boxColor]
     34
     35	011D  8A 87 0016r			     mov al, byte ptr [BoxAssetLU + bx]
     36	0121  50				     push ax
     37	0122  8A 87 001Ar			     mov al, byte ptr [BoxAsset_U + bx]
     38	0126  50				     push ax
     39	0127  8A 87 001Er			     mov al, byte ptr [BoxAssetRU + bx]
     40	012B  50				     push ax
     41	012C  8A 87 0022r			     mov al, byte ptr [BoxAssetR_ + bx]
     42	0130  50				     push ax
     43	0131  8A 87 0026r			     mov al, byte ptr [BoxAssetRB + bx]
     44	0135  50				     push ax
     45	0136  8A 87 002Ar			     mov al, byte ptr [BoxAsset_B + bx]
     46	013A  50				     push ax
     47	013B  8A 87 002Er			     mov al, byte ptr [BoxAssetLB + bx]
     48	013F  50				     push ax
     49	0140  8A 87 0032r			     mov al, byte ptr [BoxAssetL_ + bx]
     50	0144  50				     push ax
     51	0145  8A 87 0036r			     mov al, byte ptr [BoxAssetFI + bx]
     52	0149  50				     push ax
     53	014A  8A 2E 003Ar			     mov ch, byte ptr [boxHeightPos]
     54	014E  8A 0E 003Br			     mov cl, byte ptr [boxWidthPos]
     55	0152  E8 00DE				     call CalculateVidMemPos
     56	0155  8A 2E 003Cr			     mov ch, byte ptr [boxHeight]
     57	0159  8A 0E 003Dr			     mov cl, byte ptr [boxWidth]
Turbo Assembler	 Version 4.1	    03/03/23 14:08:11	    Page 2
probox.asm



     58	015D  E8 01D1				     call DrawBox
     59	0160  83 C4 12				     add sp, 2*9d
     60
     61
     62						     ; mov dh, 00000010b	       ; Dark green on black
     63						     ; pop ax			       ; Scanned number
     64						     ; push ax			       ;
     65
     66						     ; call PrintNBin
     67
     68	0163			     ReturnProgram:				     ; <<<<<<<<<<<<<<
     69	0163  B8 4C00				     mov ax, 4c00h		     ; exit(0)
     70	0166  CD 21				     int 21h
     71
     72
     73
     74
     75				     ;------------------------------------------------
     76				     ; Gets information	from cmd argument
     77				     ;------------------------------------------------
     78				     ; Entry:	     None
     79				     ;
     80				     ; Expects:	     None
     81				     ;
     82				     ; Exit:	     AX	= 0 if no errors, 1 contrary
     83				     ;
     84				     ; Destroys:     BX	CX SI (DH if error)
     85				     ;------------------------------------------------
     86				     ; Stack frame:
     87				     ;		     ...
     88				     ;		     retAddr	 [bp + 2]
     89				     ;		     stored BP	 [bp]
     90				     ;		     ...
     91				     ;------------------------------------------------
     92
     93	0168			     GetArgs	     proc
     94	0168  55				     push bp
     95	0169  8B EC				     mov bp, sp			     ; Complete	stack frame
     96
     97
     98	016B  B4 00				     mov ah, 0			     ; At least	one argument!
     99	016D  A0 0080r				     mov al, byte ptr [ArgCount]     ;
    100	0170  BB 0002				     mov bx, 2d			     ;
    101	0173  3B C3				     cmp ax, bx			     ;
    102	0175  7D 03				     jnl @@ContinueHere1	     ;
    103	0177  E9 0098				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    104	017A					     @@ContinueHere1:		     ;
    105
    106								 ; ONE STEP:
    107								 ; arg -> bx
    108								 ; if the last 1 -> ax
    109								 ; DS:SI -> next
    110	017A  B2 20				     mov dl, 020h		     ; 20h Terminator
    111	017C  B6 0D				     mov dh, 00Dh		     ; 0Dh TerminatorEnd
    112	017E  BE 0082r				     mov si, offset Args + 1	     ; First argument
    113
    114	0181  BB 0000				     mov bx, 0
Turbo Assembler	 Version 4.1	    03/03/23 14:08:11	    Page 3
probox.asm



    115	0184  E8 012B				     call MScnNDec
    116	0187  88 1E 003Ar			     mov byte ptr [boxHeightPos], bl
    117	018B  85 C0				     test ax, ax
    118	018D  74 03				     jz	@@ContinueHere2
    119	018F  E9 0080				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    120	0192					     @@ContinueHere2:
    121
    122
    123	0192  BB 0000				     mov bx, 0
    124	0195  E8 011A				     call MScnNDec
    125	0198  88 1E 003Br			     mov byte ptr [boxWidthPos], bl
    126	019C  85 C0				     test ax, ax
    127	019E  74 03				     jz	@@ContinueHere3
    128	01A0  EB 70 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    129	01A3					     @@ContinueHere3:
    130
    131	01A3  BB 0000				     mov bx, 0
    132	01A6  E8 0109				     call MScnNDec
    133	01A9  88 1E 003Cr			     mov byte ptr [boxHeight], bl
    134	01AD  85 C0				     test ax, ax
    135	01AF  74 03				     jz	@@ContinueHere4
    136	01B1  EB 5F 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    137	01B4					     @@ContinueHere4:
    138
    139	01B4  BB 0000				     mov bx, 0
    140	01B7  E8 00F8				     call MScnNDec
    141	01BA  88 1E 003Dr			     mov byte ptr [boxWidth], bl
    142	01BE  85 C0				     test ax, ax
    143	01C0  74 03				     jz	@@ContinueHere5
    144	01C2  EB 4E 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    145	01C5					     @@ContinueHere5:
    146
    147	01C5  BB 0000				     mov bx, 0
    148	01C8  E8 010F				     call MScnNHex
    149	01CB  88 1E 003Er			     mov byte ptr [boxTheme], bl
    150
    151	01CF  B9 0002				     mov cx, 02h
    152	01D2  3B D9				     cmp bx, cx
    153	01D4  7E 0A				     jle @@Theme02		     ; ---->
    154	01D6  B9 00C0				     mov cx, 0C0h
    155	01D9  3B D9				     cmp bx, cx
    156	01DB  7D 06				     jge @@ThemeC		     ; ---->
    157
    158	01DD  EB 44 90				     jmp @@SetErrorBadTheme
    159
    160	01E0			     @@Theme02:					     ; <----
    161	01E0  EB 2A 90				     jmp @@NoMoreArgs
    162
    163	01E3			     @@ThemeC:					     ; <----
    164	01E3  B9 00C2				     mov cx, 0C2h
    165	01E6  3B D9				     cmp bx, cx
    166	01E8  7E 03				     jng @@ContinueHere6
    167	01EA  EB 37 90				     jmp @@SetErrorBadTheme	     ; >>>>>>>>>>>>>>
    168	01ED					     @@ContinueHere6:
    169
    170	01ED  80 2E 003Er C0			     sub byte ptr [boxTheme], 0C0h
    171	01F2  B5 00				     mov ch, 0
Turbo Assembler	 Version 4.1	    03/03/23 14:08:11	    Page 4
probox.asm



    172	01F4  8A 0E 003Er			     mov cl, byte ptr [boxTheme]
    173
    174	01F8  85 C0				     test ax, ax
    175	01FA  74 03				     jz	@@ContinueHere7
    176	01FC  EB 14 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    177	01FF					     @@ContinueHere7:
    178
    179	01FF  BB 0000				     mov bx, 0
    180	0202  E8 00D5				     call MScnNHex
    181	0205  88 1E 003Fr			     mov byte ptr [boxColor], bl
    182
    183	0209  EB 01 90				     jmp @@NoMoreArgs
    184
    185
    186
    187						     ; mov ah, 0
    188						     ; mov al, bl
    189						     ; mov dh, 004h
    190						     ; mov bx, 160d*4+7d*2
    191						     ; call PrintNHex
    192
    193
    194	020C			     @@NoMoreArgs:				     ; <<<<<<<<<<<<<<
    195	020C  B8 0000				     mov ax, 0
    196	020F  EB 20 90				     jmp @@ProcEnd		     ; >-\
    197	0212			     @@SetErrorNoArg:				     ; <<|<<<<<<<<<<<
    198	0212  B8 0239				     mov ax, 0239h		     ; Error code: No argument (more expected) : 239
    199	0215  B6 0C				     mov dh, 00Ch		     ;	 |
    200	0217  BB 0286				     mov bx, 160d*4+3d*2	     ;	 |
    201	021A  E8 0056				     call PrintNHex		     ;	 |
    202	021D  B8 0239				     mov ax, 0239h		     ;	 |
    203										     ;	 |
    204										     ;	 |
    205	0220  EB 0F 90				     jmp @@ProcEnd		     ; >-\
    206	0223			     @@SetErrorBadTheme:			     ; <<|<<<<<<<<<<<
    207	0223  B8 0240				     mov ax, 0240h		     ; Error code: No argument (more expected) : 240
    208	0226  B6 0C				     mov dh, 00Ch		     ;	 |
    209	0228  BB 0286				     mov bx, 160d*4+3d*2	     ;	 |
    210	022B  E8 0045				     call PrintNHex		     ;	 |
    211	022E  B8 0240				     mov ax, 0240h		     ;	 |
    212										     ;	 |
    213										     ;	 |
    214	0231			     @@ProcEnd:					     ; <-/
    215	0231  5D				     pop bp			     ; Stack frame
    216	0232  C3				     ret
    217	0233			     GetArgs	     endp
    218
    219				     ;------------------------------------------------
    220				     ;------------------------------------------------
    221
    222
    223				     ;------------------------------------------------
    224				     ; Calculate video mem offset by position
    225				     ;------------------------------------------------
    226				     ; Entry:	     CH	= heightPosition
    227				     ;		     CL	= widthPosition
    228				     ;
Turbo Assembler	 Version 4.1	    03/03/23 14:08:11	    Page 5
probox.asm



    229				     ; Expects:	     None
    230				     ;
    231				     ; Exit:	     BX	= start	addr to	draw
    232				     ;
    233				     ; Destroys:     AX
    234				     ;------------------------------------------------
    235				     ; Stack frame:
    236				     ;		     ...
    237				     ;		     retAddr	 []
    238				     ;		     ...
    239				     ;------------------------------------------------
    240
    241	0233			     CalculateVidMemPos	 proc
    242						     ; push bp
    243						     ; mov bp, sp		       ; Complete stack	frame
    244
    245
    246						     ; bx = 160d * ch +	2 * cl
    247	0233  B7 00				     mov bh, 0
    248	0235  8A D9				     mov bl, cl
    249	0237  D1 E3				     sal bx, 1
    250
    251	0239  B8 00A0				     mov ax, 160d
    252	023C  F6 E5				     mul ch
    253	023E  03 D8				     add bx, ax
    254
    255						     ; mov ax, bx
    256						     ; mov bx, 80d
    257						     ; call PrintNDec
    258
    259
    260						     ; pop bp			       ; Stack frame
    261	0240  C3				     ret
    262	0241			     CalculateVidMemPos	 endp
    263
    264				     ;------------------------------------------------
    265				     ;------------------------------------------------
    266
    267				     include ..\LianLib\ScanNDec.asm
1   268				     ;------------------------------------------------
1   269				     ; Scans number as decimal
1   270				     ;------------------------------------------------
1   271				     ; Entry:	     none
1   272				     ;
1   273				     ; Expects:	     BX	= 0
1   274				     ;
1   275				     ; Exit:	     BX	= number to print
1   276				     ;
1   277				     ; Destroys:     AX	CL Si
1   278				     ;------------------------------------------------
1   279				     ;------------------------------------------------
1   280	0241			     ScanNDec	     proc
1   281
1   282	0241			     @@ScanDigit:				     ; <-------------------------\
1   283										     ;				 |
1   284	0241  B4 01				     mov ah, 01h		     ; getc -> al		 |
1   285	0243  CD 21				     int 21h			     ; ^			 |
Turbo Assembler	 Version 4.1	    03/03/23 14:08:11	    Page 6
probox.asm



1   286										     ;				 |
1   287	0245  3C 0D				     cmp al, 13d		     ; Stop scan if enter	 |
1   288	0247  74 15				     je	@@EndScanDigit		     ; >>========================|=======\\
1   289										     ;				 |	 ||
1   290	0249  8A C8				     mov cl, al			     ; Store al	to cl		 |	 ||
1   291										     ;				 |	 ||
1   292	024B  8B C3				     mov ax, bx			     ; bx *= 10			 |	 ||
1   293	024D  BE 000A				     mov si, 10d		     ; ^			 |	 ||
1   294	0250  F7 E6				     mul si			     ; ^			 |	 ||
1   295	0252  8B D8				     mov bx, ax			     ; ^			 |	 ||
1   296										     ;				 |	 ||
1   297	0254  8A C1				     mov al, cl			     ; Retore al from cl	 |	 ||
1   298										     ;				 |	 ||
1   299	0256  2C 30				     sub al, "0"		     ; ASCII "0" offset		 |	 ||
1   300										     ;				 |	 ||
1   301	0258  B4 00				     mov ah, 0d			     ; bx += al			 |	 ||
1   302	025A  03 D8				     add bx, ax			     ; ^			 |	 ||
1   303										     ;				 |	 ||
1   304	025C  EB E3				     jmp @@ScanDigit		     ; >-------------------------/	 ||
1   305										     ;					 ||
1   306	025E			     @@EndScanDigit:				     ; <<================================//
1   307	025E  C3				     ret
1   308
1   309	025F			     ScanNDec	     endp
1   310
1   311				     ;------------------------------------------------
1   312				     ;------------------------------------------------
1   313
    314				     include ..\LianLib\PrntNBin.asm
1   315				     ;------------------------------------------------
1   316				     ; Prints number as	binary to vidmem
1   317				     ;------------------------------------------------
1   318				     ; Entry:	     AX	= number to print
1   319				     ;		     BX	= start	addr to	print
1   320				     ;
1   321				     ; Expects:	     ES	-> Video segment
1   322				     ;		     DH	= color	code
1   323				     ;
1   324				     ; Exit:	     None
1   325				     ;
1   326				     ; Destroys:     AX	BX CX DL
1   327				     ;------------------------------------------------
1   328				     ;------------------------------------------------
1   329	025F			     PrintNBin	     proc
1   330
1   331	025F  B9 0010				     mov cx, 16d		     ; 16 bit in 2 byte	in ax
1   332
1   333	0262			     @@PrintDigit:				     ; <-------------------------\
1   334										     ;				 |
1   335	0262  B2 01				     mov dl, 00000001b		     ; Mask			 |
1   336	0264  22 D0				     and dl, al			     ;				 |
1   337	0266  80 C2 30				     add dl, 30h		     ; ASCII "0" offset		 |
1   338										     ;				 |
1   339	0269  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   340										     ;				 |
1   341	026C  4B				     dec bx			     ; Next digit		 |
1   342	026D  4B				     dec bx			     ; ^			 |
Turbo Assembler	 Version 4.1	    03/03/23 14:08:11	    Page 7
probox.asm



1   343										     ;				 |
1   344	026E  D1 E8				     shr ax, 1d			     ; ax >> 1			 |
1   345										     ;				 |
1   346	0270  E2 F0				     loop @@PrintDigit		     ; >-------------------------/
1   347
1   348	0272  C3				     ret
1   349
1   350	0273			     PrintNBin	     endp
1   351
1   352				     ;------------------------------------------------
1   353				     ;------------------------------------------------
1   354
    355				     include ..\LianLib\PrntNHex.asm
1   356				     ;------------------------------------------------
1   357				     ; Prints number as	hexagen	to vidmem
1   358				     ;------------------------------------------------
1   359				     ; Entry:	     AX	= number to print
1   360				     ;		     BX	= start	addr to	print
1   361				     ;
1   362				     ; Expects:	     ES	-> Video segment
1   363				     ;		     DH	= color	code
1   364				     ;
1   365				     ; Exit:	     None
1   366				     ;
1   367				     ; Destroys:     AX	BX CX DL Si
1   368				     ;------------------------------------------------
1   369				     ;------------------------------------------------
1   370	0273			     PrintNHex	     proc
1   371
1   372	0273  B9 0004				     mov cx, 4d			     ; 4 digits	in 2 byte in ax
1   373
1   374	0276			     @@PrintDigit:				     ; <-------------------------\
1   375										     ;				 |
1   376	0276  B2 0F				     mov dl, 00001111b		     ; Mask			 |
1   377	0278  22 D0				     and dl, al			     ;				 |
1   378										     ;				 |
1   379	027A  8B F2				     mov si, dx			     ; dl -> si			 |
1   380	027C  83 E6 0F				     and si, 0Fh		     ;				 |
1   381										     ;				 |
1   382	027F  8A 94 0000r			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
1   383										     ;				 |
1   384	0283  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   385										     ;				 |
1   386	0286  4B				     dec bx			     ; Next digit		 |
1   387	0287  4B				     dec bx			     ; ^			 |
1   388										     ;				 |
1   389	0288  D1 E8 D1 E8 D1 E8	D1+		     shr ax, 4d			     ; ax >> 4			 |
    390	      E8
1   391										     ;				 |
1   392	0290  E2 E4				     loop @@PrintDigit		     ; >-------------------------/
1   393
1   394	0292  C3				     ret
1   395
1   396	0293			     PrintNHex	     endp
1   397
1   398				     ;------------------------------------------------
1   399				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    03/03/23 14:08:11	    Page 8
probox.asm



1   400
    401				     include ..\LianLib\PrntNDec.asm
1   402				     ;------------------------------------------------
1   403				     ; Prints number as	decimal	to vidmem
1   404				     ;------------------------------------------------
1   405				     ; Entry:	     AX	= number to print
1   406				     ;		     BX	= start	addr to	print
1   407				     ;
1   408				     ; Expects:	     ES	-> Video segment
1   409				     ;		     DH	= color	code
1   410				     ;
1   411				     ; Exit:	     None
1   412				     ;
1   413				     ; Destroys:     AX	BX CX DL Si
1   414				     ;------------------------------------------------
1   415				     ;------------------------------------------------
1   416	0293			     PrintNDec	     proc
1   417
1   418	0293  B9 0005				     mov cx, 5d			     ; 5 digits	in 2 byte in ax
1   419
1   420	0296			     @@PrintDigit:				     ; <-------------------------\
1   421	0296  8A EE				     mov ch, dh			     ; Store dh	to ch		 |
1   422										     ;				 |
1   423	0298  BA 0000				     mov dx, 0d			     ; for division		 |
1   424	029B  BE 000A				     mov si, 10d		     ; ax/10 ->	ax &		 |
1   425	029E  F7 F6				     div si			     ; & ax%10 -> dx		 | !!! dx < 10
1   426										     ;				 |
1   427	02A0  8B F2				     mov si, dx			     ; dl -> si			 |
1   428										     ;				 |
1   429	02A2  8A 94 0000r			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
1   430										     ;				 |
1   431	02A6  8A F5				     mov dh, ch			     ; Restore dh from ch	 |
1   432	02A8  B5 00				     mov ch, 0			     ; ^			 |
1   433										     ;				 |
1   434	02AA  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   435										     ;				 |
1   436	02AD  4B				     dec bx			     ; Next digit		 |
1   437	02AE  4B				     dec bx			     ; ^			 |
1   438										     ;				 |
1   439										     ;				 |
1   440	02AF  E2 E5				     loop @@PrintDigit		     ; >-------------------------/
1   441
1   442	02B1  C3				     ret
1   443
1   444	02B2			     PrintNDec	     endp
1   445
1   446				     ;------------------------------------------------
1   447				     ;------------------------------------------------
1   448
    449				     include ..\LianLib\MScnNDec.asm
1   450				     ;------------------------------------------------
1   451				     ; Scans number as decimal from string in memory
1   452				     ;------------------------------------------------
1   453				     ; Entry:	     DS:SI = memory ptr
1   454				     ;
1   455				     ; Expects:	     BX	= 0
1   456				     ;		     DL	= terminator char 1
Turbo Assembler	 Version 4.1	    03/03/23 14:08:11	    Page 9
probox.asm



1   457				     ;		     DH	= terminator char 2 (TerminatorEnd)
1   458				     ;		     DF	= 0 (CLD) [or backward]
1   459				     ;
1   460				     ; Exit:	     BX	= scanned number
1   461				     ;		     SI	to next	word
1   462				     ;		     AX	= 0 if terminator, 1 if	TerminatorEnd
1   463				     ;
1   464				     ; Destroys:     None
1   465				     ;------------------------------------------------
1   466				     ;------------------------------------------------
1   467	02B2			     MScnNDec	     proc
1   468
1   469	02B2			     @@ScanDigit:				     ; <-------------------------\
1   470										     ;				 |
1   471						     ; mov ah, 01h		     ; getc -> al		 |
1   472						     ; int 21h			     ; ^			 |
1   473	02B2  AC				     lodsb			     ; char -> al		 |
1   474										     ;				 |
1   475						     ; cmp al, 13d		     ; Stop scan if enter	 |
1   476	02B3  3A C2				     cmp al, dl			     ; Stop scan if terminator	 |
1   477	02B5  74 19				     je	@@TermScanDigit		     ; >>========================|=======\\
1   478	02B7  3A C6				     cmp al, dh			     ;				 |	 ||
1   479	02B9  74 1B				     je	@@TerminatorEndScanDigit     ; >>========================|===========\\
1   480										     ;				 |	 ||  ||
1   481						     ; mov cl, al		     ; Store al	to cl		 |	 ||  ||
1   482	02BB  50				     push ax			     ; Store ax			 |	 ||  ||
1   483	02BC  52				     push dx			     ; Store dx			 |	 ||  ||
1   484										     ;				 |	 ||  ||
1   485	02BD  8B C3				     mov ax, bx			     ; bx *= 10			 |	 ||  ||
1   486	02BF  BA 000A				     mov dx, 10d		     ; ^			 |	 ||  ||
1   487	02C2  F7 E2				     mul dx			     ; ^			 |	 ||  ||
1   488	02C4  8B D8				     mov bx, ax			     ; ^			 |	 ||  ||
1   489										     ;				 |	 ||  ||
1   490	02C6  5A				     pop dx			     ; Restore dx		 |	 ||  ||
1   491	02C7  58				     pop ax			     ; Restore ax		 |	 ||  ||
1   492						     ; mov al, cl		     ; Restore al from cl	 |	 ||  ||
1   493										     ;				 |	 ||  ||
1   494	02C8  2C 30				     sub al, "0"		     ; ASCII "0" offset		 |	 ||  ||
1   495										     ;				 |	 ||  ||
1   496	02CA  B4 00				     mov ah, 0d			     ; bx += al			 |	 ||  ||
1   497	02CC  03 D8				     add bx, ax			     ; ^			 |	 ||  ||
1   498										     ;				 |	 ||  ||
1   499	02CE  EB E2				     jmp @@ScanDigit		     ; >-------------------------/	 ||  ||
1   500										     ;					 ||  ||
1   501	02D0			     @@TermScanDigit:				     ; <<================================//  ||
1   502	02D0  B8 0000				     mov ax, 0			     ;					     ||
1   503	02D3  EB 04 90				     jmp @@EndProc		     ; >-----\				     ||
1   504	02D6			     @@TerminatorEndScanDigit:			     ; <<====|===============================//
1   505	02D6  B8 0001				     mov ax, 1			     ;	     |
1   506	02D9			     @@EndProc:					     ; <-----/
1   507	02D9  C3				     ret
1   508
1   509	02DA			     MScnNDec	     endp
1   510
1   511				     ;------------------------------------------------
1   512				     ;------------------------------------------------
1   513
Turbo Assembler	 Version 4.1	    03/03/23 14:08:11	    Page 10
probox.asm



    514				     include ..\LianLib\MScnNHex.asm
1   515				     ;------------------------------------------------
1   516				     ; Scans number as hexagen from string in memory
1   517				     ;------------------------------------------------
1   518				     ; Entry:	     DS:SI = memory ptr
1   519				     ;
1   520				     ; Expects:	     BX	= 0
1   521				     ;		     DL	= terminator char 1
1   522				     ;		     DH	= terminator char 2 (TerminatorEnd)
1   523				     ;		     DF	= 0 (CLD) [or backward]
1   524				     ;
1   525				     ; Exit:	     BX	= scanned number
1   526				     ;		     SI	to next	word
1   527				     ;		     AX	= 0 if terminator, 1 if	TerminatorEnd
1   528				     ;
1   529				     ; Destroys:     None
1   530				     ;------------------------------------------------
1   531				     ;------------------------------------------------
1   532	02DA			     MScnNHex	     proc
1   533
1   534	02DA			     @@ScanDigit:				     ; <-------------------------\
1   535										     ;				 |
1   536						     ; mov ah, 01h		     ; getc -> al		 |
1   537						     ; int 21h			     ; ^			 |
1   538	02DA  AC				     lodsb			     ; char -> al		 |
1   539										     ;				 |
1   540						     ; cmp al, 13d		     ; Stop scan if enter	 |
1   541	02DB  3A C2				     cmp al, dl			     ; Stop scan if terminator	 |
1   542	02DD  74 48				     je	@@TermScanDigit		     ; >>========================|=======\\
1   543	02DF  3A C6				     cmp al, dh			     ;				 |	 ||
1   544	02E1  74 4A				     je	@@TerminatorEndScanDigit     ; >>========================|===========\\
1   545										     ;				 |	 ||  ||
1   546										     ;				 |	 ||  ||
1   547	02E3  D1 E3 D1 E3 D1 E3	D1+		     shl bx, 4d			     ; bx *= 16			 |	 ||  ||
    548	      E3
1   549										     ;				 |	 ||  ||
1   550										     ;				 |	 ||  ||
1   551	02EB  53				     push bx			     ; Store bx			 |	 ||  ||
1   552										     ;				 |	 ||  ||
1   553	02EC  BB 0061				     mov bx, "a"		     ;				 |	 ||  ||
1   554	02EF  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   555	02F1  7C 0B				     jl	@@Nextaf		     ;				 |	 ||  ||
1   556	02F3  BB 0066				     mov bx, "f"		     ;				 |	 ||  ||
1   557	02F6  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   558	02F8  7F 04				     jg	@@Nextaf		     ;				 |	 ||  ||
1   559	02FA  2C 61				     sub al, "a"		     ; ASCII "0" offset		 |	 ||  ||
1   560	02FC  04 0A				     add al, 0ah		     ; ^			 |	 ||  ||
1   561	02FE			     @@Nextaf:					     ;				 |	 ||  ||
1   562	02FE  BB 0041				     mov bx, "A"		     ;				 |	 ||  ||
1   563	0301  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   564	0303  7C 0B				     jl	@@NextAFCAPS		     ;				 |	 ||  ||
1   565	0305  BB 0046				     mov bx, "F"		     ;				 |	 ||  ||
1   566	0308  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   567	030A  7F 04				     jg	@@NextAFCAPS		     ;				 |	 ||  ||
1   568	030C  2C 41				     sub al, "A"		     ; ASCII "0" offset		 |	 ||  ||
1   569	030E  04 0A				     add al, 0Ah		     ; ^			 |	 ||  ||
1   570	0310			     @@NextAFCAPS:				     ;				 |	 ||  ||
Turbo Assembler	 Version 4.1	    03/03/23 14:08:11	    Page 11
probox.asm



1   571	0310  BB 0030				     mov bx, "0"		     ;				 |	 ||  ||
1   572	0313  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   573	0315  7C 09				     jl	@@Next09		     ;				 |	 ||  ||
1   574	0317  BB 0039				     mov bx, "9"		     ;				 |	 ||  ||
1   575	031A  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   576	031C  7F 02				     jg	@@Next09		     ;				 |	 ||  ||
1   577	031E  2C 30				     sub al, "0"		     ; ASCII "0" offset		 |	 ||  ||
1   578						     ; add al, 0		     ; ^			 |	 ||  ||
1   579	0320			     @@Next09:					     ;				 |	 ||  ||
1   580										     ;				 |	 ||  ||
1   581	0320  5B				     pop bx			     ; Restore bx		 |	 ||  ||
1   582										     ;				 |	 ||  ||
1   583	0321  B4 00				     mov ah, 0d			     ; bx += al			 |	 ||  ||
1   584	0323  03 D8				     add bx, ax			     ; ^			 |	 ||  ||
1   585										     ;				 |	 ||  ||
1   586	0325  EB B3				     jmp @@ScanDigit		     ; >-------------------------/	 ||  ||
1   587										     ;					 ||  ||
1   588	0327			     @@TermScanDigit:				     ; <<================================//  ||
1   589	0327  B8 0000				     mov ax, 0			     ;					     ||
1   590	032A  EB 04 90				     jmp @@EndProc		     ; >-----\				     ||
1   591	032D			     @@TerminatorEndScanDigit:			     ; <<====|===============================//
1   592	032D  B8 0001				     mov ax, 1			     ;	     |
1   593	0330			     @@EndProc:					     ; <-----/
1   594	0330  C3				     ret
1   595
1   596	0331			     MScnNHex	     endp
1   597
1   598				     ;------------------------------------------------
1   599				     ;------------------------------------------------
1   600
    601
    602				     include ..\LianLib\ProBox.asm
1   603				     ;------------------------------------------------
1   604				     ; Draws cool box on the screen
1   605				     ;------------------------------------------------
1   606				     ; Entry:	     BX	= start	addr to	draw
1   607				     ;		     CH	= height of box	(without frame)
1   608				     ;		     CL	= width	of box (without	frame)
1   609				     ;
1   610				     ; Expects:	     ES	-> Video segment
1   611				     ;
1   612				     ; Exit:	     None
1   613				     ;
1   614				     ; Destroys:     AX	BX (CX)	DX DI
1   615				     ;------------------------------------------------
1   616				     ; Stack frame:
1   617				     ;		     ...
1   618				     ;		     LU	char	 [bp + 20]   //	H - color attr
1   619				     ;		     _U	char	 [bp + 18]   //	L - symb attr
1   620				     ;		     RU	char	 [bp + 16]   //
1   621				     ;		     R_	char	 [bp + 14]   //
1   622				     ;		     RB	char	 [bp + 12]   //
1   623				     ;		     _B	char	 [bp + 10]   //
1   624				     ;		     LB	char	 [bp + 8]    //
1   625				     ;		     L_	char	 [bp + 6]    //
1   626				     ;		     FI	char	 [bp + 4]    //
1   627				     ;		     retAddr	 [bp + 2]
Turbo Assembler	 Version 4.1	    03/03/23 14:08:11	    Page 12
probox.asm



1   628				     ;		     stored BP	 [bp]
1   629				     ;		     stored CX	 [bp - 2]    //	size
1   630				     ;		     ...
1   631				     ;------------------------------------------------
1   632
1   633	0331			     DrawBox	     proc
1   634	0331  55				     push bp
1   635	0332  8B EC				     mov bp, sp			     ; Complete	stack frame
1   636	0334  51				     push cx
1   637
1   638										     ;-------------------------------------------
1   639										     ; Upper line
1   640	0335  8B FB				     mov di, bx
1   641	0337  8B 4E FE				     mov cx, [bp - 2]
1   642	033A  B5 00				     mov ch, 0
1   643	033C  FF 76 14				     push [bp +	20]
1   644	033F  FF 76 12				     push [bp +	18]
1   645	0342  FF 76 10				     push [bp +	16]
1   646	0345  E8 0044				     call DrawLine
1   647	0348  83 C4 06				     add sp, 2*3d
1   648										     ;-------------------------------------------
1   649										     ; Middle line
1   650	034B  8B 4E FE				     mov cx, [bp - 2]
1   651	034E  B6 00				     mov dh, 0
1   652	0350  8A D5				     mov dl, ch
1   653	0352			     @@MiddleStep:				     ; <-----------------\
1   654										     ;			 |
1   655	0352  81 C3 00A0			     add bx, 160d		     ;			 |
1   656	0356  8B FB				     mov di, bx			     ;			 |
1   657	0358  8B 4E FE				     mov cx, [bp - 2]		     ;			 |
1   658	035B  B5 00				     mov ch, 0			     ;			 |
1   659	035D  FF 76 06				     push [bp +	6]		     ;			 |
1   660	0360  FF 76 04				     push [bp +	4]		     ;			 |
1   661	0363  FF 76 0E				     push [bp +	14]		     ;			 |
1   662	0366  E8 0023				     call DrawLine		     ;			 |
1   663	0369  83 C4 06				     add sp, 2*3d		     ;			 |
1   664	036C  4A				     dec dx			     ;			 |
1   665	036D  75 E3				     jnz @@MiddleStep		     ; >-----------------/
1   666										     ;-------------------------------------------
1   667										     ; Bottom line
1   668	036F  81 C3 00A0			     add bx, 160d
1   669	0373  8B FB				     mov di, bx
1   670	0375  8B 4E FE				     mov cx, [bp - 2]
1   671	0378  B5 00				     mov ch, 0
1   672	037A  FF 76 08				     push [bp +	8]
1   673	037D  FF 76 0A				     push [bp +	10]
1   674	0380  FF 76 0C				     push [bp +	12]
1   675	0383  E8 0006				     call DrawLine
1   676	0386  83 C4 06				     add sp, 2*3d
1   677										     ;-------------------------------------------
1   678
1   679	0389  59				     pop cx
1   680	038A  5D				     pop bp			     ; Stack frame
1   681	038B  C3				     ret
1   682	038C			     DrawBox	     endp
1   683
1   684				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    03/03/23 14:08:11	    Page 13
probox.asm



1   685				     ;------------------------------------------------
1   686
1   687				     ; needs <include ?\LianLib\DrawLine.asm>
1   688
    689				     include ..\LianLib\DrawLine.asm
1   690				     ;------------------------------------------------
1   691				     ; Draws line on the screen	(Pattern ABB~BBC)
1   692				     ;------------------------------------------------
1   693				     ; Entry:	     DI	= start	addr to	draw
1   694				     ;		     CX	= width	of line	(without A&C)
1   695				     ;
1   696				     ; Expects:	     ES	-> Video segment
1   697				     ;		     DF	= 0 (CLD)
1   698				     ;
1   699				     ; Exit:	     None
1   700				     ;
1   701				     ; Destroys:     AX	CX DI
1   702				     ;------------------------------------------------
1   703				     ; Stack frame:
1   704				     ;		     ...
1   705				     ;		     'A' char	 [bp + 8]    //	H - color attr
1   706				     ;		     'B' char	 [bp + 6]    //	L - symb attr
1   707				     ;		     'C' char	 [bp + 4]    //
1   708				     ;		     retAddr	 [bp + 2]
1   709				     ;		     stored BP	 [bp]
1   710				     ;		     ...
1   711				     ;------------------------------------------------
1   712				     ;Направление просмотра	 зависит	 от флага		    +
    713				     направления DF,	значение  которого  можно	менять  с    +
    714				     помощью команд CLD (DF:=0) и	STD (DF:=1).
1   715
1   716	038C			     DrawLine	     proc
1   717	038C  55				     push bp
1   718	038D  8B EC				     mov bp, sp			     ; Complete	stack frame
1   719
1   720	038F  8B 46 08				     mov ax, [bp + 8]
1   721	0392  AB				     stosw
1   722
1   723	0393  8B 46 06				     mov ax, [bp + 6]
1   724	0396  F3> AB				     rep stosw
1   725
1   726	0398  8B 46 04				     mov ax, [bp + 4]
1   727	039B  AB				     stosw
1   728
1   729	039C  5D				     pop bp			     ; Stack frame
1   730	039D  C3				     ret
1   731	039E			     DrawLine	     endp
1   732
1   733				     ;------------------------------------------------
1   734				     ;------------------------------------------------
1   735
    736
    737	039E			     .data
    738				     include ..\LianLib\Alphabet.asm
1   739	0000  30 31 32 33 34 35	36+  Alphabet:	     db	"0123456789ABCDEF"	     ; Alphabet	for printing (Thanks Ilya)
    740	      37 38 39 41 42 43	44+
    741	      45 46
Turbo Assembler	 Version 4.1	    03/03/23 14:08:11	    Page 14
probox.asm



1   742	0010  C9 CD BB BA BC C8	     BoxSymbols:     db	0c9h, 0cdh, 0bbh, 0bah,	0bch, 0c8h ; "╔═╗║╝╚"
1   743
1   744	0016  20 DA C9 00	     BoxAssetLU:     db	020h, 0dah, 0c9h, 000h
1   745	001A  20 C4 CD 00	     BoxAsset_U:     db	020h, 0c4h, 0cdh, 000h
1   746	001E  20 BF BB 00	     BoxAssetRU:     db	020h, 0bfh, 0bbh, 000h
1   747	0022  20 B3 BA 00	     BoxAssetR_:     db	020h, 0b3h, 0bah, 000h
1   748	0026  20 D9 BC 00	     BoxAssetRB:     db	020h, 0d9h, 0bch, 000h
1   749	002A  20 C4 CD 00	     BoxAsset_B:     db	020h, 0c4h, 0cdh, 000h
1   750	002E  20 C0 C8 00	     BoxAssetLB:     db	020h, 0c0h, 0c8h, 000h
1   751	0032  20 B3 BA 00	     BoxAssetL_:     db	020h, 0b3h, 0bah, 000h
1   752	0036  20 20 20 00	     BoxAssetFI:     db	020h, 020h, 020h, 000h
1   753
1   754				     ; 0:    1:┌─┐ 2:╔═╗ 3:usr
1   755				     ;	       │ │	 ║ ║   chr
1   756				     ;	       └─┘   ╚═╝
1   757
    758
    759	003A  ??		     boxHeightPos:   db	?
    760	003B  ??		     boxWidthPos:    db	?
    761	003C  ??		     boxHeight:	     db	?
    762	003D  ??		     boxWidth:	     db	?
    763	003E  ??		     boxTheme:	     db	?
    764	003F  0A		     boxColor:	     db	00Ah
    765
    766				     end	     Start
Turbo Assembler	 Version 4.1	    03/03/23 14:08:11	    Page 15
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/03/23"
??FILENAME			  Text	 "probox  "
??TIME				  Text	 "14:08:11"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CONTINUEHERE1			  Near	 DGROUP:0113
@@CONTINUEHERE1			  Near	 DGROUP:017A
@@CONTINUEHERE2			  Near	 DGROUP:0192
@@CONTINUEHERE3			  Near	 DGROUP:01A3
@@CONTINUEHERE4			  Near	 DGROUP:01B4
@@CONTINUEHERE5			  Near	 DGROUP:01C5
@@CONTINUEHERE6			  Near	 DGROUP:01ED
@@CONTINUEHERE7			  Near	 DGROUP:01FF
@@ENDPROC			  Near	 DGROUP:02D9
@@ENDPROC			  Near	 DGROUP:0330
@@ENDSCANDIGIT			  Near	 DGROUP:025E
@@MIDDLESTEP			  Near	 DGROUP:0352
@@NEXT09			  Near	 DGROUP:0320
@@NEXTAF			  Near	 DGROUP:02FE
@@NEXTAFCAPS			  Near	 DGROUP:0310
@@NOMOREARGS			  Near	 DGROUP:020C
@@PRINTDIGIT			  Near	 DGROUP:0262
@@PRINTDIGIT			  Near	 DGROUP:0276
@@PRINTDIGIT			  Near	 DGROUP:0296
@@PROCEND			  Near	 DGROUP:0231
@@SCANDIGIT			  Near	 DGROUP:0241
@@SCANDIGIT			  Near	 DGROUP:02B2
@@SCANDIGIT			  Near	 DGROUP:02DA
@@SETERRORBADTHEME		  Near	 DGROUP:0223
@@SETERRORNOARG			  Near	 DGROUP:0212
@@TERMINATORENDSCANDIGIT	  Near	 DGROUP:02D6
@@TERMINATORENDSCANDIGIT	  Near	 DGROUP:032D
@@TERMSCANDIGIT			  Near	 DGROUP:02D0
@@TERMSCANDIGIT			  Near	 DGROUP:0327
@@THEME02			  Near	 DGROUP:01E0
@@THEMEC			  Near	 DGROUP:01E3
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 PROBOX
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ALPHABET			  Near	 DGROUP:0000
ARGCOUNT			  Near	 DGROUP:0080
ARGS				  Near	 DGROUP:0081
BOXASSETFI			  Near	 DGROUP:0036
BOXASSETLB			  Near	 DGROUP:002E
BOXASSETLU			  Near	 DGROUP:0016
BOXASSETL_			  Near	 DGROUP:0032
Turbo Assembler	 Version 4.1	    03/03/23 14:08:11	    Page 16
Symbol Table



BOXASSETRB			  Near	 DGROUP:0026
BOXASSETRU			  Near	 DGROUP:001E
BOXASSETR_			  Near	 DGROUP:0022
BOXASSET_B			  Near	 DGROUP:002A
BOXASSET_U			  Near	 DGROUP:001A
BOXCOLOR			  Near	 DGROUP:003F
BOXHEIGHT			  Near	 DGROUP:003C
BOXHEIGHTPOS			  Near	 DGROUP:003A
BOXSYMBOLS			  Near	 DGROUP:0010
BOXTHEME			  Near	 DGROUP:003E
BOXWIDTH			  Near	 DGROUP:003D
BOXWIDTHPOS			  Near	 DGROUP:003B
CALCULATEVIDMEMPOS		  Near	 DGROUP:0233
DRAWBOX				  Near	 DGROUP:0331
DRAWLINE			  Near	 DGROUP:038C
GETARGS				  Near	 DGROUP:0168
MSCNNDEC			  Near	 DGROUP:02B2
MSCNNHEX			  Near	 DGROUP:02DA
PRINTNBIN			  Near	 DGROUP:025F
PRINTNDEC			  Near	 DGROUP:0293
PRINTNHEX			  Near	 DGROUP:0273
RETURNPROGRAM			  Near	 DGROUP:0163
SCANNDEC			  Near	 DGROUP:0241
START				  Near	 DGROUP:0100

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0040 Word	  Public  DATA
  _TEXT				  16  039E Word	  Public  CODE
