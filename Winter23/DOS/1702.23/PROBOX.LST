Turbo Assembler	 Version 4.1	    03/03/23 24:33:19	    Page 1
probox.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     .286
      4				     locals @@
      5
      6				     org 80h
      7	0080  ??		     ArgCount:	     db	?
      8	0081  ??		     Args:	     db	?
      9
     10				     org 100h
     11
     12				     ; probox.com 8 21 3 2 F 19	C 1A 15	10 9 7 8 3 12
     13
     14	0100			     Start:
     15
     16	0100  B8 B800				     mov ax, 0b800h		     ; адрес сегмента с		    +
     17				     видеопамятью -> es
     18	0103  8E C0				     mov es, ax			     ;
     19	0105  8C D0				     mov ax, ss			     ; Segment with stack, code, etc.
     20	0107  8E D8				     mov ds, ax			     ;
     21
     22	0109  6A 00				     push 0h			     ; textFlag
     23	010B  E8 0095				     call GetArgs
     24	010E  85 C0				     test ax, ax
     25	0110  74 03				     jz	@@ContinueHere1
     26	0112  EB 59 90				     jmp ReturnProgram		     ; >>>>>>>>>>>>>>
     27	0115					     @@ContinueHere1:
     28						     ; push si
     29
     30						     ; mov dh, 01Ah
     31						     ; mov ah, 0
     32						     ; mov al, byte ptr	[ArgCount]
     33						     ; mov bx, 160d*17 + 160d/2	- 18d +	4d; Середина строчки
     34						     ; call PrintNDec
     35
     36	0115  B7 00				     mov bh, 0
     37	0117  8A 1E 003Er			     mov bl, byte ptr [boxTheme]
     38	011B  8A 26 003Fr			     mov ah, byte ptr [boxColor]
     39
     40	011F  8A 87 0016r			     mov al, byte ptr [BoxAssetLU + bx]
     41	0123  50				     push ax
     42	0124  8A 87 001Ar			     mov al, byte ptr [BoxAsset_U + bx]
     43	0128  50				     push ax
     44	0129  8A 87 001Er			     mov al, byte ptr [BoxAssetRU + bx]
     45	012D  50				     push ax
     46	012E  8A 87 0022r			     mov al, byte ptr [BoxAssetR_ + bx]
     47	0132  50				     push ax
     48	0133  8A 87 0026r			     mov al, byte ptr [BoxAssetRB + bx]
     49	0137  50				     push ax
     50	0138  8A 87 002Ar			     mov al, byte ptr [BoxAsset_B + bx]
     51	013C  50				     push ax
     52	013D  8A 87 002Er			     mov al, byte ptr [BoxAssetLB + bx]
     53	0141  50				     push ax
     54	0142  8A 87 0032r			     mov al, byte ptr [BoxAssetL_ + bx]
     55	0146  50				     push ax
     56	0147  8A 87 0036r			     mov al, byte ptr [BoxAssetFI + bx]
     57	014B  50				     push ax
Turbo Assembler	 Version 4.1	    03/03/23 24:33:19	    Page 2
probox.asm



     58	014C  8A 2E 003Ar			     mov ch, byte ptr [boxHeightPos]
     59	0150  8A 0E 003Br			     mov cl, byte ptr [boxWidthPos]
     60	0154  E8 0156				     call CalculateVidMemPos
     61	0157  8A 2E 003Cr			     mov ch, byte ptr [boxHeight]
     62	015B  8A 0E 003Dr			     mov cl, byte ptr [boxWidth]
     63	015F  E8 0249				     call DrawBox
     64	0162  83 C4 12				     add sp, 2*9d
     65
     66						     ; pop si
     67	0165  58				     pop ax			     ; textFlag
     68	0166  85 C0				     test ax, ax
     69	0168  74 03				     jz	ReturnProgram		     ; >>>>>>>>>>>>>>
     70
     71
     72	016A  E8 0005				     call PrintText
     73
     74						     ; mov dh, 00000010b	       ; Dark green on black
     75						     ; pop ax			       ; Scanned number
     76						     ; push ax			       ;
     77
     78						     ; call PrintNBin
     79
     80	016D			     ReturnProgram:				     ; <<<<<<<<<<<<<<
     81	016D  B8 4C00				     mov ax, 4c00h		     ; exit(0)
     82	0170  CD 21				     int 21h
     83
     84
     85
     86				     ;------------------------------------------------
     87				     ; Prints text into	the box
     88				     ;------------------------------------------------
     89				     ; Entry:	     None
     90				     ;
     91				     ; Expects:	     DS:SI -> text
     92				     ;
     93				     ; Exit:	     None
     94				     ;
     95				     ; Destroys:     AX	BX CX DX SI DI
     96				     ;------------------------------------------------
     97				     ; Stack frame:
     98				     ;		     ...
     99				     ;		     retAddr	 [bp + 2]
    100				     ;		     stored BP	 [bp]
    101				     ;		     text ptr	 [bp - 2]
    102				     ;		     ...
    103				     ;------------------------------------------------
    104
    105	0172			     PrintText	     proc
    106	0172  55				     push bp
    107	0173  8B EC				     mov bp, sp			     ; Complete	stack frame
    108	0175  56				     push si
    109
    110
    111	0176  06				     push es
    112	0177  8C DF				     mov di, ds			     ; ds -> es
    113	0179  8E C7				     mov es, di			     ;
    114	017B  8B FE				     mov di, si			     ; si -> di
Turbo Assembler	 Version 4.1	    03/03/23 24:33:19	    Page 3
probox.asm



    115	017D  E8 013B				     call StrLen
    116	0180  07				     pop es			     ; restore es -> vidmem
    117	0181  8B D1				     mov dx, cx			     ; dx = text length
    118
    119	0183  8A 2E 003Ar			     mov ch, byte ptr boxHeightPos
    120	0187  80 C5 01				     add ch, 1d
    121	018A  8A 0E 003Br			     mov cl, byte ptr boxWidthPos
    122	018E  80 C1 01				     add cl, 1d
    123	0191  E8 0119				     call CalculateVidMemPos
    124
    125
    126	0194  8B CA				     mov cx, dx
    127	0196				 @@OneChar:				     ; <-------------------------\
    128	0196  8A 04				     mov al, byte ptr [si]	     ;				 |
    129	0198  26: 88 07				     mov es:[bx], al		     ;				 |
    130										     ;				 |
    131	019B  46				     inc si			     ;				 |
    132	019C  43				     inc bx			     ;				 |
    133	019D  43				     inc bx			     ;				 |
    134										     ;				 |
    135	019E  E2 F6				     loop @@OneChar		     ; >-------------------------/
    136
    137
    138
    139	01A0  5D				     pop bp
    140	01A1  5D				     pop bp			     ; Stack frame
    141	01A2  C3				     ret
    142	01A3			     PrintText	     endp
    143
    144				     ;------------------------------------------------
    145				     ;------------------------------------------------
    146
    147
    148				     ;------------------------------------------------
    149				     ; Gets information	from cmd argument
    150				     ;------------------------------------------------
    151				     ; Entry:	     None
    152				     ;
    153				     ; Expects:	     None
    154				     ;
    155				     ; Exit:	     AX	= 0 if no errors, 1 contrary
    156				     ;		     textFlag =	1 if DS:SI -> box text,	0 if no	text
    157				     ;
    158				     ; Destroys:     BX	CX SI DI (DH if	error)
    159				     ;------------------------------------------------
    160				     ; Stack frame:
    161				     ;		     ...
    162				     ;		     textFlag	 [bp + 4]
    163				     ;		     retAddr	 [bp + 2]
    164				     ;		     stored BP	 [bp]
    165				     ;		     ...
    166				     ;------------------------------------------------
    167
    168	01A3			     GetArgs	     proc
    169	01A3  55				     push bp
    170	01A4  8B EC				     mov bp, sp			     ; Complete	stack frame
    171
Turbo Assembler	 Version 4.1	    03/03/23 24:33:19	    Page 4
probox.asm



    172
    173	01A6  B4 00				     mov ah, 0			     ; At least	one argument!
    174	01A8  A0 0080r				     mov al, byte ptr [ArgCount]     ;
    175	01AB  BB 0002				     mov bx, 2d			     ;
    176	01AE  3B C3				     cmp ax, bx			     ;
    177	01B0  7D 03				     jnl @@ContinueHere1	     ;
    178	01B2  E9 00D7				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    179	01B5					     @@ContinueHere1:		     ;
    180
    181								 ; ONE STEP:
    182								 ; arg -> bx
    183								 ; if the last 1 -> ax
    184								 ; DS:SI -> next
    185	01B5  B2 20				     mov dl, 020h		     ; 20h Terminator
    186	01B7  B6 0D				     mov dh, 00Dh		     ; 0Dh TerminatorEnd
    187	01B9  BE 0082r				     mov si, offset Args + 1	     ; First argument
    188
    189	01BC  BB 0000				     mov bx, 0
    190	01BF  E8 016F				     call MScnNDec
    191	01C2  88 1E 003Ar			     mov byte ptr [boxHeightPos], bl
    192	01C6  85 C0				     test ax, ax
    193	01C8  74 03				     jz	@@ContinueHere2
    194	01CA  E9 00BF				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    195	01CD					     @@ContinueHere2:
    196
    197
    198	01CD  BB 0000				     mov bx, 0
    199	01D0  E8 015E				     call MScnNDec
    200	01D3  88 1E 003Br			     mov byte ptr [boxWidthPos], bl
    201	01D7  85 C0				     test ax, ax
    202	01D9  74 03				     jz	@@ContinueHere3
    203	01DB  E9 00AE				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    204	01DE					     @@ContinueHere3:
    205
    206	01DE  BB 0000				     mov bx, 0
    207	01E1  E8 014D				     call MScnNDec
    208	01E4  88 1E 003Cr			     mov byte ptr [boxHeight], bl
    209	01E8  85 C0				     test ax, ax
    210	01EA  74 03				     jz	@@ContinueHere4
    211	01EC  E9 009D				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    212	01EF					     @@ContinueHere4:
    213
    214	01EF  BB 0000				     mov bx, 0
    215	01F2  E8 013C				     call MScnNDec
    216	01F5  88 1E 003Dr			     mov byte ptr [boxWidth], bl
    217	01F9  85 C0				     test ax, ax
    218	01FB  74 03				     jz	@@ContinueHere5
    219	01FD  E9 008C				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    220	0200					     @@ContinueHere5:
    221
    222	0200  BB 0000				     mov bx, 0
    223	0203  E8 0153				     call MScnNHex
    224	0206  88 1E 003Er			     mov byte ptr [boxTheme], bl
    225
    226	020A  B9 0002				     mov cx, 02h
    227	020D  3B D9				     cmp bx, cx
    228	020F  7E 11				     jle @@Theme02		     ; ---->
Turbo Assembler	 Version 4.1	    03/03/23 24:33:19	    Page 5
probox.asm



    229	0211  B9 000F				     mov cx, 0Fh
    230	0214  3B D9				     cmp bx, cx
    231	0216  74 0D				     je	@@ThemeF		     ; ---->
    232	0218  B9 00C0				     mov cx, 0C0h
    233	021B  3B D9				     cmp bx, cx
    234	021D  7D 30				     jge @@ThemeC		     ; ---->
    235
    236	021F  EB 7C 90				     jmp @@SetErrorBadTheme
    237
    238				     ;	  0,  1,  2 - standart box	   & text
    239				     ;	 C0, C1, C2 - standart box & color & text
    240				     ;	 F	 - various symbols & color & text
    241
    242	0222			     @@Theme02:					     ; <----
    243	0222  EB 4E 90				     jmp @@LastArg		     ; ->>>>>>>>>>>>>
    244
    245	0225			     @@ThemeF:					     ; <----
    246	0225  C6 06 003Er 03			     mov byte ptr [boxTheme], 03d
    247
    248	022A  BF 0019r				     mov di, offset BoxAssetStart + 3
    249	022D  B9 001Ar				     mov cx, offset BoxAssetStep     ; cx = step
    250	0230  81 E9 0016r			     sub cx, offset BoxAssetStart    ;
    251
    252	0234				 @@OneStep:				     ; <-------------------------\
    253	0234  85 C0				     test ax, ax		     ;				 |
    254	0236  74 03				     jz	@@ContinueHere6		     ;				 |
    255	0238  EB 52 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>		 |>>>
    256	023B					     @@ContinueHere6:		     ;				 |
    257										     ;				 |
    258	023B  BB 0000				     mov bx, 0			     ;				 |
    259	023E  E8 00F0				     call MScnNDec		     ;				 |
    260	0241  88 1D				     mov [di], bl		     ;				 |
    261										     ;				 |
    262	0243  03 F9				     add di, cx			     ;				 |
    263										     ;				 |
    264	0245  BB 003Ar				     mov bx, offset BoxAssetEnd	     ;				 |
    265	0248  3B FB				     cmp di, bx			     ;				 |
    266	024A  7C E8				     jl	@@OneStep		     ; >-------------------------/
    267
    268	024C  EB 10 90				     jmp @@SetColor		     ; >>====\\
    269										     ;	     ||
    270	024F			     @@ThemeC:					     ; <-----||--
    271	024F  B9 00C2				     mov cx, 0C2h		     ;	     ||
    272	0252  3B D9				     cmp bx, cx			     ;	     ||
    273	0254  7E 03				     jng @@ContinueHere10	     ;	     ||
    274	0256  EB 45 90				     jmp @@SetErrorBadTheme	     ; >>>>>>||>>>>>>
    275	0259					     @@ContinueHere10:		     ;	     ||
    276										     ;	     ||
    277	0259  80 2E 003Er C0			     sub byte ptr [boxTheme], 0C0h   ;	     ||
    278										     ;	     ||
    279	025E			     @@SetColor:				     ; <<====//
    280	025E  85 C0				     test ax, ax
    281	0260  74 03				     jz	@@ContinueHere11
    282	0262  EB 28 90				     jmp @@SetErrorNoArg	     ; >>>>>>>>>>>>>>
    283	0265					     @@ContinueHere11:
    284
    285	0265  BB 0000				     mov bx, 0
Turbo Assembler	 Version 4.1	    03/03/23 24:33:19	    Page 6
probox.asm



    286	0268  E8 00EE				     call MScnNHex
    287	026B  88 1E 003Fr			     mov byte ptr [boxColor], bl
    288
    289	026F  EB 01 90				     jmp @@LastArg		     ; ->>>>>>>>>>>>>
    290
    291
    292
    293						     ; mov ah, 0
    294						     ; mov al, bl
    295						     ; mov dh, 004h
    296						     ; mov bx, 160d*4+7d*2
    297						     ; call PrintNHex
    298
    299
    300	0272			     @@LastArg:					     ; <<<<<<<<<<<<<-
    301	0272  85 C0				     test ax, ax
    302	0274  74 0B				     jz	@@hasText		     ; >>====\\
    303										     ;	     ||
    304	0276  C7 46 04 0000			     mov word ptr ss:[bp + 4], 0     ;	     ||
    305										     ;	     ||
    306	027B  B8 0000				     mov ax, 0			     ;	     ||
    307	027E  EB 2B 90				     jmp @@ProcEnd		     ; >-\   ||
    308	0281					     @@hasText:			     ; <<|===//
    309										     ;	 |
    310	0281  C7 46 04 0001			     mov word ptr ss:[bp + 4], 1     ;	 |
    311										     ;	 |
    312	0286  B8 0000				     mov ax, 0			     ;	 |
    313	0289  EB 20 90				     jmp @@ProcEnd		     ; >-\
    314	028C			     @@SetErrorNoArg:				     ; <<|<<<<<<<<<<<
    315	028C  B8 0239				     mov ax, 0239h		     ; Error code: No argument (more expected) : 239
    316	028F  B6 0C				     mov dh, 00Ch		     ;	 |
    317	0291  BB 0286				     mov bx, 160d*4+3d*2	     ;	 |
    318	0294  E8 0060				     call PrintNHex		     ;	 |
    319	0297  B8 0239				     mov ax, 0239h		     ;	 |
    320										     ;	 |
    321										     ;	 |
    322	029A  EB 0F 90				     jmp @@ProcEnd		     ; >-\
    323	029D			     @@SetErrorBadTheme:			     ; <<|<<<<<<<<<<<
    324	029D  B8 0240				     mov ax, 0240h		     ; Error code: No argument (more expected) : 240
    325	02A0  B6 0C				     mov dh, 00Ch		     ;	 |
    326	02A2  BB 0286				     mov bx, 160d*4+3d*2	     ;	 |
    327	02A5  E8 004F				     call PrintNHex		     ;	 |
    328	02A8  B8 0240				     mov ax, 0240h		     ;	 |
    329										     ;	 |
    330										     ;	 |
    331	02AB			     @@ProcEnd:					     ; <-/
    332	02AB  5D				     pop bp			     ; Stack frame
    333	02AC  C3				     ret
    334	02AD			     GetArgs	     endp
    335
    336				     ;------------------------------------------------
    337				     ;------------------------------------------------
    338
    339
    340				     ;------------------------------------------------
    341				     ; Calculate video mem offset by position
    342				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    03/03/23 24:33:19	    Page 7
probox.asm



    343				     ; Entry:	     CH	= heightPosition
    344				     ;		     CL	= widthPosition
    345				     ;
    346				     ; Expects:	     None
    347				     ;
    348				     ; Exit:	     BX	= start	addr to	draw
    349				     ;
    350				     ; Destroys:     AX
    351				     ;------------------------------------------------
    352				     ; Stack frame:
    353				     ;		     ...
    354				     ;		     retAddr	 []
    355				     ;		     ...
    356				     ;------------------------------------------------
    357
    358	02AD			     CalculateVidMemPos	 proc
    359						     ; push bp
    360						     ; mov bp, sp		       ; Complete stack	frame
    361
    362
    363						     ; bx = 160d * ch +	2 * cl
    364	02AD  B7 00				     mov bh, 0
    365	02AF  8A D9				     mov bl, cl
    366	02B1  D1 E3				     sal bx, 1
    367
    368	02B3  B8 00A0				     mov ax, 160d
    369	02B6  F6 E5				     mul ch
    370	02B8  03 D8				     add bx, ax
    371
    372						     ; mov ax, bx
    373						     ; mov bx, 80d
    374						     ; call PrintNDec
    375
    376
    377						     ; pop bp			       ; Stack frame
    378	02BA  C3				     ret
    379	02BB			     CalculateVidMemPos	 endp
    380
    381				     ;------------------------------------------------
    382				     ;------------------------------------------------
    383
    384
    385				     ;------------------------------------------------
    386				     ; Count the length	of the 0Dh-terminated string (str)
    387				     ;------------------------------------------------
    388				     ; Entry:	     ES:DI = str
    389				     ;
    390				     ; Expects:	     DF	= 0 (CLD)
    391				     ;
    392				     ; Exit:	     CX	= length
    393				     ;
    394				     ; Destroys:     AL	DI
    395				     ;------------------------------------------------
    396				     ; Stack frame:
    397				     ;		     ...
    398				     ;		     retAddr	 []
    399				     ;		     ...
Turbo Assembler	 Version 4.1	    03/03/23 24:33:19	    Page 8
probox.asm



    400				     ;------------------------------------------------
    401				     ;Направление просмотра	 зависит	 от флага		    +
    402				     направления DF,	значение  которого  можно	менять  с    +
    403				     помощью команд CLD (DF:=0) и	STD (DF:=1).
    404
    405	02BB			     StrLen	     proc
    406						     ; push bp
    407						     ; mov bp, sp		       ; Complete stack	frame
    408
    409	02BB  B0 0D				     mov al, 00Dh		     ; AL = terminator
    410	02BD  33 C9				     xor cx, cx			     ; CX = 0
    411
    412	02BF			     @@CountStep:				     ; <-------------------------\
    413	02BF  41				     inc cx			     ;				 |
    414	02C0  AE				     scasb			     ;				 |
    415	02C1  75 FC				     jne @@CountStep		     ; >-------------------------/
    416
    417	02C3  49				     dec cx
    418
    419						     ; pop bp			       ; Stack frame
    420	02C4  C3				     ret
    421	02C5			     StrLen	     endp
    422
    423				     ;------------------------------------------------
    424				     ;------------------------------------------------
    425
    426
    427				     include ..\LianLib\ScanNDec.asm
1   428				     ;------------------------------------------------
1   429				     ; Scans number as decimal
1   430				     ;------------------------------------------------
1   431				     ; Entry:	     none
1   432				     ;
1   433				     ; Expects:	     BX	= 0
1   434				     ;
1   435				     ; Exit:	     BX	= number to print
1   436				     ;
1   437				     ; Destroys:     AX	CL Si
1   438				     ;------------------------------------------------
1   439				     ;------------------------------------------------
1   440	02C5			     ScanNDec	     proc
1   441
1   442	02C5			     @@ScanDigit:				     ; <-------------------------\
1   443										     ;				 |
1   444	02C5  B4 01				     mov ah, 01h		     ; getc -> al		 |
1   445	02C7  CD 21				     int 21h			     ; ^			 |
1   446										     ;				 |
1   447	02C9  3C 0D				     cmp al, 13d		     ; Stop scan if enter	 |
1   448	02CB  74 15				     je	@@EndScanDigit		     ; >>========================|=======\\
1   449										     ;				 |	 ||
1   450	02CD  8A C8				     mov cl, al			     ; Store al	to cl		 |	 ||
1   451										     ;				 |	 ||
1   452	02CF  8B C3				     mov ax, bx			     ; bx *= 10			 |	 ||
1   453	02D1  BE 000A				     mov si, 10d		     ; ^			 |	 ||
1   454	02D4  F7 E6				     mul si			     ; ^			 |	 ||
1   455	02D6  8B D8				     mov bx, ax			     ; ^			 |	 ||
1   456										     ;				 |	 ||
Turbo Assembler	 Version 4.1	    03/03/23 24:33:19	    Page 9
probox.asm



1   457	02D8  8A C1				     mov al, cl			     ; Retore al from cl	 |	 ||
1   458										     ;				 |	 ||
1   459	02DA  2C 30				     sub al, "0"		     ; ASCII "0" offset		 |	 ||
1   460										     ;				 |	 ||
1   461	02DC  B4 00				     mov ah, 0d			     ; bx += al			 |	 ||
1   462	02DE  03 D8				     add bx, ax			     ; ^			 |	 ||
1   463										     ;				 |	 ||
1   464	02E0  EB E3				     jmp @@ScanDigit		     ; >-------------------------/	 ||
1   465										     ;					 ||
1   466	02E2			     @@EndScanDigit:				     ; <<================================//
1   467	02E2  C3				     ret
1   468
1   469	02E3			     ScanNDec	     endp
1   470
1   471				     ;------------------------------------------------
1   472				     ;------------------------------------------------
1   473
    474				     include ..\LianLib\PrntNBin.asm
1   475				     ;------------------------------------------------
1   476				     ; Prints number as	binary to vidmem
1   477				     ;------------------------------------------------
1   478				     ; Entry:	     AX	= number to print
1   479				     ;		     BX	= start	addr to	print
1   480				     ;
1   481				     ; Expects:	     ES	-> Video segment
1   482				     ;		     DH	= color	code
1   483				     ;
1   484				     ; Exit:	     None
1   485				     ;
1   486				     ; Destroys:     AX	BX CX DL
1   487				     ;------------------------------------------------
1   488				     ;------------------------------------------------
1   489	02E3			     PrintNBin	     proc
1   490
1   491	02E3  B9 0010				     mov cx, 16d		     ; 16 bit in 2 byte	in ax
1   492
1   493	02E6			     @@PrintDigit:				     ; <-------------------------\
1   494										     ;				 |
1   495	02E6  B2 01				     mov dl, 00000001b		     ; Mask			 |
1   496	02E8  22 D0				     and dl, al			     ;				 |
1   497	02EA  80 C2 30				     add dl, 30h		     ; ASCII "0" offset		 |
1   498										     ;				 |
1   499	02ED  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   500										     ;				 |
1   501	02F0  4B				     dec bx			     ; Next digit		 |
1   502	02F1  4B				     dec bx			     ; ^			 |
1   503										     ;				 |
1   504	02F2  D1 E8				     shr ax, 1d			     ; ax >> 1			 |
1   505										     ;				 |
1   506	02F4  E2 F0				     loop @@PrintDigit		     ; >-------------------------/
1   507
1   508	02F6  C3				     ret
1   509
1   510	02F7			     PrintNBin	     endp
1   511
1   512				     ;------------------------------------------------
1   513				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    03/03/23 24:33:19	    Page 10
probox.asm



1   514
    515				     include ..\LianLib\PrntNHex.asm
1   516				     ;------------------------------------------------
1   517				     ; Prints number as	hexagen	to vidmem
1   518				     ;------------------------------------------------
1   519				     ; Entry:	     AX	= number to print
1   520				     ;		     BX	= start	addr to	print
1   521				     ;
1   522				     ; Expects:	     ES	-> Video segment
1   523				     ;		     DH	= color	code
1   524				     ;
1   525				     ; Exit:	     None
1   526				     ;
1   527				     ; Destroys:     AX	BX CX DL Si
1   528				     ;------------------------------------------------
1   529				     ;------------------------------------------------
1   530	02F7			     PrintNHex	     proc
1   531
1   532	02F7  B9 0004				     mov cx, 4d			     ; 4 digits	in 2 byte in ax
1   533
1   534	02FA			     @@PrintDigit:				     ; <-------------------------\
1   535										     ;				 |
1   536	02FA  B2 0F				     mov dl, 00001111b		     ; Mask			 |
1   537	02FC  22 D0				     and dl, al			     ;				 |
1   538										     ;				 |
1   539	02FE  8B F2				     mov si, dx			     ; dl -> si			 |
1   540	0300  83 E6 0F				     and si, 0Fh		     ;				 |
1   541										     ;				 |
1   542	0303  8A 94 0000r			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
1   543										     ;				 |
1   544	0307  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   545										     ;				 |
1   546	030A  4B				     dec bx			     ; Next digit		 |
1   547	030B  4B				     dec bx			     ; ^			 |
1   548										     ;				 |
1   549	030C  C1 E8 04				     shr ax, 4d			     ; ax >> 4			 |
1   550										     ;				 |
1   551	030F  E2 E9				     loop @@PrintDigit		     ; >-------------------------/
1   552
1   553	0311  C3				     ret
1   554
1   555	0312			     PrintNHex	     endp
1   556
1   557				     ;------------------------------------------------
1   558				     ;------------------------------------------------
1   559
    560				     include ..\LianLib\PrntNDec.asm
1   561				     ;------------------------------------------------
1   562				     ; Prints number as	decimal	to vidmem
1   563				     ;------------------------------------------------
1   564				     ; Entry:	     AX	= number to print
1   565				     ;		     BX	= start	addr to	print
1   566				     ;
1   567				     ; Expects:	     ES	-> Video segment
1   568				     ;		     DH	= color	code
1   569				     ;
1   570				     ; Exit:	     None
Turbo Assembler	 Version 4.1	    03/03/23 24:33:19	    Page 11
probox.asm



1   571				     ;
1   572				     ; Destroys:     AX	BX CX DL Si
1   573				     ;------------------------------------------------
1   574				     ;------------------------------------------------
1   575	0312			     PrintNDec	     proc
1   576
1   577	0312  B9 0005				     mov cx, 5d			     ; 5 digits	in 2 byte in ax
1   578
1   579	0315			     @@PrintDigit:				     ; <-------------------------\
1   580	0315  8A EE				     mov ch, dh			     ; Store dh	to ch		 |
1   581										     ;				 |
1   582	0317  BA 0000				     mov dx, 0d			     ; for division		 |
1   583	031A  BE 000A				     mov si, 10d		     ; ax/10 ->	ax &		 |
1   584	031D  F7 F6				     div si			     ; & ax%10 -> dx		 | !!! dx < 10
1   585										     ;				 |
1   586	031F  8B F2				     mov si, dx			     ; dl -> si			 |
1   587										     ;				 |
1   588	0321  8A 94 0000r			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
1   589										     ;				 |
1   590	0325  8A F5				     mov dh, ch			     ; Restore dh from ch	 |
1   591	0327  B5 00				     mov ch, 0			     ; ^			 |
1   592										     ;				 |
1   593	0329  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   594										     ;				 |
1   595	032C  4B				     dec bx			     ; Next digit		 |
1   596	032D  4B				     dec bx			     ; ^			 |
1   597										     ;				 |
1   598										     ;				 |
1   599	032E  E2 E5				     loop @@PrintDigit		     ; >-------------------------/
1   600
1   601	0330  C3				     ret
1   602
1   603	0331			     PrintNDec	     endp
1   604
1   605				     ;------------------------------------------------
1   606				     ;------------------------------------------------
1   607
    608				     include ..\LianLib\MScnNDec.asm
1   609				     ;------------------------------------------------
1   610				     ; Scans number as decimal from string in memory
1   611				     ;------------------------------------------------
1   612				     ; Entry:	     DS:SI = memory ptr
1   613				     ;
1   614				     ; Expects:	     BX	= 0
1   615				     ;		     DL	= terminator char 1
1   616				     ;		     DH	= terminator char 2 (TerminatorEnd)
1   617				     ;		     DF	= 0 (CLD) [or backward]
1   618				     ;
1   619				     ; Exit:	     BX	= scanned number
1   620				     ;		     SI	to next	word
1   621				     ;		     AX	= 0 if terminator, 1 if	TerminatorEnd
1   622				     ;
1   623				     ; Destroys:     None
1   624				     ;------------------------------------------------
1   625				     ;------------------------------------------------
1   626	0331			     MScnNDec	     proc
1   627
Turbo Assembler	 Version 4.1	    03/03/23 24:33:19	    Page 12
probox.asm



1   628	0331			     @@ScanDigit:				     ; <-------------------------\
1   629										     ;				 |
1   630						     ; mov ah, 01h		     ; getc -> al		 |
1   631						     ; int 21h			     ; ^			 |
1   632	0331  AC				     lodsb			     ; char -> al		 |
1   633										     ;				 |
1   634						     ; cmp al, 13d		     ; Stop scan if enter	 |
1   635	0332  3A C2				     cmp al, dl			     ; Stop scan if terminator	 |
1   636	0334  74 19				     je	@@TermScanDigit		     ; >>========================|=======\\
1   637	0336  3A C6				     cmp al, dh			     ;				 |	 ||
1   638	0338  74 1B				     je	@@TerminatorEndScanDigit     ; >>========================|===========\\
1   639										     ;				 |	 ||  ||
1   640						     ; mov cl, al		     ; Store al	to cl		 |	 ||  ||
1   641	033A  50				     push ax			     ; Store ax			 |	 ||  ||
1   642	033B  52				     push dx			     ; Store dx			 |	 ||  ||
1   643										     ;				 |	 ||  ||
1   644	033C  8B C3				     mov ax, bx			     ; bx *= 10			 |	 ||  ||
1   645	033E  BA 000A				     mov dx, 10d		     ; ^			 |	 ||  ||
1   646	0341  F7 E2				     mul dx			     ; ^			 |	 ||  ||
1   647	0343  8B D8				     mov bx, ax			     ; ^			 |	 ||  ||
1   648										     ;				 |	 ||  ||
1   649	0345  5A				     pop dx			     ; Restore dx		 |	 ||  ||
1   650	0346  58				     pop ax			     ; Restore ax		 |	 ||  ||
1   651						     ; mov al, cl		     ; Restore al from cl	 |	 ||  ||
1   652										     ;				 |	 ||  ||
1   653	0347  2C 30				     sub al, "0"		     ; ASCII "0" offset		 |	 ||  ||
1   654										     ;				 |	 ||  ||
1   655	0349  B4 00				     mov ah, 0d			     ; bx += al			 |	 ||  ||
1   656	034B  03 D8				     add bx, ax			     ; ^			 |	 ||  ||
1   657										     ;				 |	 ||  ||
1   658	034D  EB E2				     jmp @@ScanDigit		     ; >-------------------------/	 ||  ||
1   659										     ;					 ||  ||
1   660	034F			     @@TermScanDigit:				     ; <<================================//  ||
1   661	034F  B8 0000				     mov ax, 0			     ;					     ||
1   662	0352  EB 04 90				     jmp @@EndProc		     ; >-----\				     ||
1   663	0355			     @@TerminatorEndScanDigit:			     ; <<====|===============================//
1   664	0355  B8 0001				     mov ax, 1			     ;	     |
1   665	0358			     @@EndProc:					     ; <-----/
1   666	0358  C3				     ret
1   667
1   668	0359			     MScnNDec	     endp
1   669
1   670				     ;------------------------------------------------
1   671				     ;------------------------------------------------
1   672
    673				     include ..\LianLib\MScnNHex.asm
1   674				     ;------------------------------------------------
1   675				     ; Scans number as hexagen from string in memory
1   676				     ;------------------------------------------------
1   677				     ; Entry:	     DS:SI = memory ptr
1   678				     ;
1   679				     ; Expects:	     BX	= 0
1   680				     ;		     DL	= terminator char 1
1   681				     ;		     DH	= terminator char 2 (TerminatorEnd)
1   682				     ;		     DF	= 0 (CLD) [or backward]
1   683				     ;
1   684				     ; Exit:	     BX	= scanned number
Turbo Assembler	 Version 4.1	    03/03/23 24:33:19	    Page 13
probox.asm



1   685				     ;		     SI	to next	word
1   686				     ;		     AX	= 0 if terminator, 1 if	TerminatorEnd
1   687				     ;
1   688				     ; Destroys:     None
1   689				     ;------------------------------------------------
1   690				     ;------------------------------------------------
1   691	0359			     MScnNHex	     proc
1   692
1   693	0359			     @@ScanDigit:				     ; <-------------------------\
1   694										     ;				 |
1   695						     ; mov ah, 01h		     ; getc -> al		 |
1   696						     ; int 21h			     ; ^			 |
1   697	0359  AC				     lodsb			     ; char -> al		 |
1   698										     ;				 |
1   699						     ; cmp al, 13d		     ; Stop scan if enter	 |
1   700	035A  3A C2				     cmp al, dl			     ; Stop scan if terminator	 |
1   701	035C  74 43				     je	@@TermScanDigit		     ; >>========================|=======\\
1   702	035E  3A C6				     cmp al, dh			     ;				 |	 ||
1   703	0360  74 45				     je	@@TerminatorEndScanDigit     ; >>========================|===========\\
1   704										     ;				 |	 ||  ||
1   705										     ;				 |	 ||  ||
1   706	0362  C1 E3 04				     shl bx, 4d			     ; bx *= 16			 |	 ||  ||
1   707										     ;				 |	 ||  ||
1   708										     ;				 |	 ||  ||
1   709	0365  53				     push bx			     ; Store bx			 |	 ||  ||
1   710										     ;				 |	 ||  ||
1   711	0366  BB 0061				     mov bx, "a"		     ;				 |	 ||  ||
1   712	0369  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   713	036B  7C 0B				     jl	@@Nextaf		     ;				 |	 ||  ||
1   714	036D  BB 0066				     mov bx, "f"		     ;				 |	 ||  ||
1   715	0370  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   716	0372  7F 04				     jg	@@Nextaf		     ;				 |	 ||  ||
1   717	0374  2C 61				     sub al, "a"		     ; ASCII "0" offset		 |	 ||  ||
1   718	0376  04 0A				     add al, 0ah		     ; ^			 |	 ||  ||
1   719	0378			     @@Nextaf:					     ;				 |	 ||  ||
1   720	0378  BB 0041				     mov bx, "A"		     ;				 |	 ||  ||
1   721	037B  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   722	037D  7C 0B				     jl	@@NextAFCAPS		     ;				 |	 ||  ||
1   723	037F  BB 0046				     mov bx, "F"		     ;				 |	 ||  ||
1   724	0382  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   725	0384  7F 04				     jg	@@NextAFCAPS		     ;				 |	 ||  ||
1   726	0386  2C 41				     sub al, "A"		     ; ASCII "0" offset		 |	 ||  ||
1   727	0388  04 0A				     add al, 0Ah		     ; ^			 |	 ||  ||
1   728	038A			     @@NextAFCAPS:				     ;				 |	 ||  ||
1   729	038A  BB 0030				     mov bx, "0"		     ;				 |	 ||  ||
1   730	038D  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   731	038F  7C 09				     jl	@@Next09		     ;				 |	 ||  ||
1   732	0391  BB 0039				     mov bx, "9"		     ;				 |	 ||  ||
1   733	0394  3A C3				     cmp al, bl			     ;				 |	 ||  ||
1   734	0396  7F 02				     jg	@@Next09		     ;				 |	 ||  ||
1   735	0398  2C 30				     sub al, "0"		     ; ASCII "0" offset		 |	 ||  ||
1   736						     ; add al, 0		     ; ^			 |	 ||  ||
1   737	039A			     @@Next09:					     ;				 |	 ||  ||
1   738										     ;				 |	 ||  ||
1   739	039A  5B				     pop bx			     ; Restore bx		 |	 ||  ||
1   740										     ;				 |	 ||  ||
1   741	039B  B4 00				     mov ah, 0d			     ; bx += al			 |	 ||  ||
Turbo Assembler	 Version 4.1	    03/03/23 24:33:19	    Page 14
probox.asm



1   742	039D  03 D8				     add bx, ax			     ; ^			 |	 ||  ||
1   743										     ;				 |	 ||  ||
1   744	039F  EB B8				     jmp @@ScanDigit		     ; >-------------------------/	 ||  ||
1   745										     ;					 ||  ||
1   746	03A1			     @@TermScanDigit:				     ; <<================================//  ||
1   747	03A1  B8 0000				     mov ax, 0			     ;					     ||
1   748	03A4  EB 04 90				     jmp @@EndProc		     ; >-----\				     ||
1   749	03A7			     @@TerminatorEndScanDigit:			     ; <<====|===============================//
1   750	03A7  B8 0001				     mov ax, 1			     ;	     |
1   751	03AA			     @@EndProc:					     ; <-----/
1   752	03AA  C3				     ret
1   753
1   754	03AB			     MScnNHex	     endp
1   755
1   756				     ;------------------------------------------------
1   757				     ;------------------------------------------------
1   758
    759
    760				     include ..\LianLib\ProBox.asm
1   761				     ;------------------------------------------------
1   762				     ; Draws cool box on the screen
1   763				     ;------------------------------------------------
1   764				     ; Entry:	     BX	= start	addr to	draw
1   765				     ;		     CH	= height of box	(without frame)
1   766				     ;		     CL	= width	of box (without	frame)
1   767				     ;
1   768				     ; Expects:	     ES	-> Video segment
1   769				     ;
1   770				     ; Exit:	     None
1   771				     ;
1   772				     ; Destroys:     AX	BX (CX)	DX DI
1   773				     ;------------------------------------------------
1   774				     ; Stack frame:
1   775				     ;		     ...
1   776				     ;		     LU	char	 [bp + 20]   //	H - color attr
1   777				     ;		     _U	char	 [bp + 18]   //	L - symb attr
1   778				     ;		     RU	char	 [bp + 16]   //
1   779				     ;		     R_	char	 [bp + 14]   //
1   780				     ;		     RB	char	 [bp + 12]   //
1   781				     ;		     _B	char	 [bp + 10]   //
1   782				     ;		     LB	char	 [bp + 8]    //
1   783				     ;		     L_	char	 [bp + 6]    //
1   784				     ;		     FI	char	 [bp + 4]    //
1   785				     ;		     retAddr	 [bp + 2]
1   786				     ;		     stored BP	 [bp]
1   787				     ;		     stored CX	 [bp - 2]    //	size
1   788				     ;		     ...
1   789				     ;------------------------------------------------
1   790
1   791	03AB			     DrawBox	     proc
1   792	03AB  55				     push bp
1   793	03AC  8B EC				     mov bp, sp			     ; Complete	stack frame
1   794	03AE  51				     push cx
1   795
1   796										     ;-------------------------------------------
1   797										     ; Upper line
1   798	03AF  8B FB				     mov di, bx
Turbo Assembler	 Version 4.1	    03/03/23 24:33:19	    Page 15
probox.asm



1   799	03B1  8B 4E FE				     mov cx, [bp - 2]
1   800	03B4  B5 00				     mov ch, 0
1   801	03B6  FF 76 14				     push [bp +	20]
1   802	03B9  FF 76 12				     push [bp +	18]
1   803	03BC  FF 76 10				     push [bp +	16]
1   804	03BF  E8 0044				     call DrawLine
1   805	03C2  83 C4 06				     add sp, 2*3d
1   806										     ;-------------------------------------------
1   807										     ; Middle line
1   808	03C5  8B 4E FE				     mov cx, [bp - 2]
1   809	03C8  B6 00				     mov dh, 0
1   810	03CA  8A D5				     mov dl, ch
1   811	03CC			     @@MiddleStep:				     ; <-----------------\
1   812										     ;			 |
1   813	03CC  81 C3 00A0			     add bx, 160d		     ;			 |
1   814	03D0  8B FB				     mov di, bx			     ;			 |
1   815	03D2  8B 4E FE				     mov cx, [bp - 2]		     ;			 |
1   816	03D5  B5 00				     mov ch, 0			     ;			 |
1   817	03D7  FF 76 06				     push [bp +	6]		     ;			 |
1   818	03DA  FF 76 04				     push [bp +	4]		     ;			 |
1   819	03DD  FF 76 0E				     push [bp +	14]		     ;			 |
1   820	03E0  E8 0023				     call DrawLine		     ;			 |
1   821	03E3  83 C4 06				     add sp, 2*3d		     ;			 |
1   822	03E6  4A				     dec dx			     ;			 |
1   823	03E7  75 E3				     jnz @@MiddleStep		     ; >-----------------/
1   824										     ;-------------------------------------------
1   825										     ; Bottom line
1   826	03E9  81 C3 00A0			     add bx, 160d
1   827	03ED  8B FB				     mov di, bx
1   828	03EF  8B 4E FE				     mov cx, [bp - 2]
1   829	03F2  B5 00				     mov ch, 0
1   830	03F4  FF 76 08				     push [bp +	8]
1   831	03F7  FF 76 0A				     push [bp +	10]
1   832	03FA  FF 76 0C				     push [bp +	12]
1   833	03FD  E8 0006				     call DrawLine
1   834	0400  83 C4 06				     add sp, 2*3d
1   835										     ;-------------------------------------------
1   836
1   837	0403  59				     pop cx
1   838	0404  5D				     pop bp			     ; Stack frame
1   839	0405  C3				     ret
1   840	0406			     DrawBox	     endp
1   841
1   842				     ;------------------------------------------------
1   843				     ;------------------------------------------------
1   844
1   845				     ; needs <include ?\LianLib\DrawLine.asm>
1   846
    847				     include ..\LianLib\DrawLine.asm
1   848				     ;------------------------------------------------
1   849				     ; Draws line on the screen	(Pattern ABB~BBC)
1   850				     ;------------------------------------------------
1   851				     ; Entry:	     DI	= start	addr to	draw
1   852				     ;		     CX	= width	of line	(without A&C)
1   853				     ;
1   854				     ; Expects:	     ES	-> Video segment
1   855				     ;		     DF	= 0 (CLD)
Turbo Assembler	 Version 4.1	    03/03/23 24:33:19	    Page 16
probox.asm



1   856				     ;
1   857				     ; Exit:	     None
1   858				     ;
1   859				     ; Destroys:     AX	CX DI
1   860				     ;------------------------------------------------
1   861				     ; Stack frame:
1   862				     ;		     ...
1   863				     ;		     'A' char	 [bp + 8]    //	H - color attr
1   864				     ;		     'B' char	 [bp + 6]    //	L - symb attr
1   865				     ;		     'C' char	 [bp + 4]    //
1   866				     ;		     retAddr	 [bp + 2]
1   867				     ;		     stored BP	 [bp]
1   868				     ;		     ...
1   869				     ;------------------------------------------------
1   870				     ;Направление просмотра	 зависит	 от флага		    +
    871				     направления DF,	значение  которого  можно	менять  с    +
    872				     помощью команд CLD (DF:=0) и	STD (DF:=1).
1   873
1   874	0406			     DrawLine	     proc
1   875	0406  55				     push bp
1   876	0407  8B EC				     mov bp, sp			     ; Complete	stack frame
1   877
1   878	0409  8B 46 08				     mov ax, [bp + 8]
1   879	040C  AB				     stosw
1   880
1   881	040D  8B 46 06				     mov ax, [bp + 6]
1   882	0410  F3> AB				     rep stosw
1   883
1   884	0412  8B 46 04				     mov ax, [bp + 4]
1   885	0415  AB				     stosw
1   886
1   887	0416  5D				     pop bp			     ; Stack frame
1   888	0417  C3				     ret
1   889	0418			     DrawLine	     endp
1   890
1   891				     ;------------------------------------------------
1   892				     ;------------------------------------------------
1   893
    894
    895	0418			     .data
    896				     include ..\LianLib\Alphabet.asm
1   897	0000  30 31 32 33 34 35	36+  Alphabet:	     db	"0123456789ABCDEF"	     ; Alphabet	for printing (Thanks Ilya)
    898	      37 38 39 41 42 43	44+
    899	      45 46
1   900	0010  C9 CD BB BA BC C8	     BoxSymbols:     db	0c9h, 0cdh, 0bbh, 0bah,	0bch, 0c8h ; "╔═╗║╝╚"
1   901
1   902	0016			     BoxAssetStart:
1   903	0016  20 DA C9 00	     BoxAssetLU:     db	020h, 0dah, 0c9h, 000h
1   904	001A			     BoxAssetStep:
1   905	001A  20 C4 CD 00	     BoxAsset_U:     db	020h, 0c4h, 0cdh, 000h
1   906	001E  20 BF BB 00	     BoxAssetRU:     db	020h, 0bfh, 0bbh, 000h
1   907	0022  20 B3 BA 00	     BoxAssetR_:     db	020h, 0b3h, 0bah, 000h
1   908	0026  20 D9 BC 00	     BoxAssetRB:     db	020h, 0d9h, 0bch, 000h
1   909	002A  20 C4 CD 00	     BoxAsset_B:     db	020h, 0c4h, 0cdh, 000h
1   910	002E  20 C0 C8 00	     BoxAssetLB:     db	020h, 0c0h, 0c8h, 000h
1   911	0032  20 B3 BA 00	     BoxAssetL_:     db	020h, 0b3h, 0bah, 000h
1   912	0036  20 20 20 00	     BoxAssetFI:     db	020h, 020h, 020h, 000h
Turbo Assembler	 Version 4.1	    03/03/23 24:33:19	    Page 17
probox.asm



1   913	003A			     BoxAssetEnd:
1   914
1   915				     ; 0:    1:┌─┐ 2:╔═╗ 3:usr
1   916				     ;	       │ │	 ║ ║   chr
1   917				     ;	       └─┘   ╚═╝
1   918
    919
    920	003A  ??		     boxHeightPos:   db	?
    921	003B  ??		     boxWidthPos:    db	?
    922	003C  ??		     boxHeight:	     db	?
    923	003D  ??		     boxWidth:	     db	?
    924	003E  ??		     boxTheme:	     db	?
    925	003F  0A		     boxColor:	     db	00Ah
    926
    927				     end	     Start
Turbo Assembler	 Version 4.1	    03/03/23 24:33:19	    Page 18
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/03/23"
??FILENAME			  Text	 "probox  "
??TIME				  Text	 "24:33:18"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CONTINUEHERE1			  Near	 DGROUP:0115
@@CONTINUEHERE1			  Near	 DGROUP:01B5
@@CONTINUEHERE10		  Near	 DGROUP:0259
@@CONTINUEHERE11		  Near	 DGROUP:0265
@@CONTINUEHERE2			  Near	 DGROUP:01CD
@@CONTINUEHERE3			  Near	 DGROUP:01DE
@@CONTINUEHERE4			  Near	 DGROUP:01EF
@@CONTINUEHERE5			  Near	 DGROUP:0200
@@CONTINUEHERE6			  Near	 DGROUP:023B
@@COUNTSTEP			  Near	 DGROUP:02BF
@@ENDPROC			  Near	 DGROUP:0358
@@ENDPROC			  Near	 DGROUP:03AA
@@ENDSCANDIGIT			  Near	 DGROUP:02E2
@@HASTEXT			  Near	 DGROUP:0281
@@LASTARG			  Near	 DGROUP:0272
@@MIDDLESTEP			  Near	 DGROUP:03CC
@@NEXT09			  Near	 DGROUP:039A
@@NEXTAF			  Near	 DGROUP:0378
@@NEXTAFCAPS			  Near	 DGROUP:038A
@@ONECHAR			  Near	 DGROUP:0196
@@ONESTEP			  Near	 DGROUP:0234
@@PRINTDIGIT			  Near	 DGROUP:02E6
@@PRINTDIGIT			  Near	 DGROUP:02FA
@@PRINTDIGIT			  Near	 DGROUP:0315
@@PROCEND			  Near	 DGROUP:02AB
@@SCANDIGIT			  Near	 DGROUP:02C5
@@SCANDIGIT			  Near	 DGROUP:0331
@@SCANDIGIT			  Near	 DGROUP:0359
@@SETCOLOR			  Near	 DGROUP:025E
@@SETERRORBADTHEME		  Near	 DGROUP:029D
@@SETERRORNOARG			  Near	 DGROUP:028C
@@TERMINATORENDSCANDIGIT	  Near	 DGROUP:0355
@@TERMINATORENDSCANDIGIT	  Near	 DGROUP:03A7
@@TERMSCANDIGIT			  Near	 DGROUP:034F
@@TERMSCANDIGIT			  Near	 DGROUP:03A1
@@THEME02			  Near	 DGROUP:0222
@@THEMEC			  Near	 DGROUP:024F
@@THEMEF			  Near	 DGROUP:0225
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 PROBOX
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
Turbo Assembler	 Version 4.1	    03/03/23 24:33:19	    Page 19
Symbol Table



ALPHABET			  Near	 DGROUP:0000
ARGCOUNT			  Near	 DGROUP:0080
ARGS				  Near	 DGROUP:0081
BOXASSETEND			  Near	 DGROUP:003A
BOXASSETFI			  Near	 DGROUP:0036
BOXASSETLB			  Near	 DGROUP:002E
BOXASSETLU			  Near	 DGROUP:0016
BOXASSETL_			  Near	 DGROUP:0032
BOXASSETRB			  Near	 DGROUP:0026
BOXASSETRU			  Near	 DGROUP:001E
BOXASSETR_			  Near	 DGROUP:0022
BOXASSETSTART			  Near	 DGROUP:0016
BOXASSETSTEP			  Near	 DGROUP:001A
BOXASSET_B			  Near	 DGROUP:002A
BOXASSET_U			  Near	 DGROUP:001A
BOXCOLOR			  Near	 DGROUP:003F
BOXHEIGHT			  Near	 DGROUP:003C
BOXHEIGHTPOS			  Near	 DGROUP:003A
BOXSYMBOLS			  Near	 DGROUP:0010
BOXTHEME			  Near	 DGROUP:003E
BOXWIDTH			  Near	 DGROUP:003D
BOXWIDTHPOS			  Near	 DGROUP:003B
CALCULATEVIDMEMPOS		  Near	 DGROUP:02AD
DRAWBOX				  Near	 DGROUP:03AB
DRAWLINE			  Near	 DGROUP:0406
GETARGS				  Near	 DGROUP:01A3
MSCNNDEC			  Near	 DGROUP:0331
MSCNNHEX			  Near	 DGROUP:0359
PRINTNBIN			  Near	 DGROUP:02E3
PRINTNDEC			  Near	 DGROUP:0312
PRINTNHEX			  Near	 DGROUP:02F7
PRINTTEXT			  Near	 DGROUP:0172
RETURNPROGRAM			  Near	 DGROUP:016D
SCANNDEC			  Near	 DGROUP:02C5
START				  Near	 DGROUP:0100
STRLEN				  Near	 DGROUP:02BB

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0040 Word	  Public  DATA
  _TEXT				  16  0418 Word	  Public  CODE
