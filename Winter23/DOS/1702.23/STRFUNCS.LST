Turbo Assembler	 Version 4.1	    03/02/23 21:01:16	    Page 1
strfuncs.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     locals @@
      4
      5				     org 80h
      6	0080  ??		     ArgCount:	     db	?
      7	0081  ??		     Args:	     db	?
      8
      9				     org 100h
     10
     11	0100			     Start:
     12	0100  BF 0031r				     mov di, offset String
     13	0103  E8 0020				     call StrLen
     14	0106  8B D1				     mov dx, cx
     15
     16	0108  B8 B800				     mov ax, 0b800h		     ; адрес сегмента с		    +
     17				     видеопамятью -> es
     18	010B  8E C0				     mov es, ax			     ;
     19
     20						     ; mov ax, ss		       ; Segment with stack, code, etc.
     21						     ; mov ds, ax		       ;
     22
     23						     ; mov ah, 00001010b	       ; Light green on	black
     24						     ; mov bx, 160d*18 + 160d/2	- 18d*2	+ 4d; Середина строчки
     25						     ; mov ch, 5		       ; Height
     26						     ; mov cl, 18		       ; Width
     27						     ; call DrawBox
     28	010D  BF 0B70				     mov di, 160d*18 + 160d/2 -	18d*2 +	4d; Середина строчки
     29	0110  B9 0020				     mov cx, 32			      ;	Width
     30	0113  B0 DA				     mov al, 0DAh
     31	0115  E8 001C				     call MemSet
     32
     33
     34	0118  8B C2				     mov ax, dx
     35	011A  B6 02				     mov dh, 02h
     36	011C  8B DF				     mov bx, di
     37	011E  E8 0068				     call PrintNDec
     38
     39						     ; mov dh, 00000010b	       ; Dark green on black
     40						     ; pop ax			       ; Scanned number
     41						     ; push ax			       ;
     42
     43						     ; call PrintNBin
     44
     45	0121  B8 4C00				     mov ax, 4c00h		     ; exit(0)
     46	0124  CD 21				     int 21h
     47
     48
     49
     50				     ;------------------------------------------------
     51				     ; Count the length	of the null-terminated string (str)
     52				     ;------------------------------------------------
     53				     ; Entry:	     ES:DI = str
     54				     ;
     55				     ; Expects:	     DF	= 0 (CLD)
     56				     ;
     57				     ; Exit:	     CX	= length
Turbo Assembler	 Version 4.1	    03/02/23 21:01:16	    Page 2
strfuncs.asm



     58				     ;
     59				     ; Destroys:     AL	DI
     60				     ;------------------------------------------------
     61				     ; Stack frame:
     62				     ;		     ...
     63				     ;		     retAddr	 []
     64				     ;		     ...
     65				     ;------------------------------------------------
     66				     ;Направление просмотра	 зависит	 от флага		    +
     67				     направления DF,	значение  которого  можно	менять  с    +
     68				     помощью команд CLD (DF:=0) и	STD (DF:=1).
     69
     70	0126			     StrLen	     proc
     71						     ; push bp
     72						     ; mov bp, sp		       ; Complete stack	frame
     73
     74	0126  32 C0				     xor al, al			     ; AL = 0
     75	0128  33 C9				     xor cx, cx			     ; CX = 0
     76
     77	012A			     @@CountStep:				     ; <-------------------------\
     78	012A  AE				     scasb			     ;				 |
     79	012B  74 03				     je	@@CountEnd		     ; >>===\\			 |
     80	012D  41				     inc cx			     ;	    ||			 |
     81	012E  EB FA				     jmp @@CountStep		     ; >----++-------------------/
     82	0130			     @@CountEnd:				     ; <<===//
     83
     84						     ; pop bp			       ; Stack frame
     85	0130  C3				     ret
     86	0131			     StrLen	     endp
     87
     88				     ;------------------------------------------------
     89				     ;------------------------------------------------
     90
     91				     ;------------------------------------------------
     92				     ; Copies the (num)	bytes from (src) to (dst)
     93				     ;------------------------------------------------
     94				     ; Entry:	     CX	= num
     95				     ;		     DS:SI = src
     96				     ;		     ES:DI = dst
     97				     ;
     98				     ; Expects:	     DF	= 0 (CLD)
     99				     ;
    100				     ; Exit:	     None
    101				     ;
    102				     ; Destroys:     CX	DI
    103				     ;------------------------------------------------
    104				     ; Stack frame:
    105				     ;		     ...
    106				     ;		     retAddr	 []
    107				     ;		     ...
    108				     ;------------------------------------------------
    109				     ;Направление просмотра	 зависит	 от флага		    +
    110				     направления DF,	значение  которого  можно	менять  с    +
    111				     помощью команд CLD (DF:=0) и	STD (DF:=1).
    112
    113	0131			     MemCpy	     proc
    114						     ; push bp
Turbo Assembler	 Version 4.1	    03/02/23 21:01:16	    Page 3
strfuncs.asm



    115						     ; mov bp, sp		       ; Complete stack	frame
    116
    117	0131  F3> A4				     rep movsb
    118
    119						     ; pop bp			       ; Stack frame
    120	0133  C3				     ret
    121	0134			     MemCpy	     endp
    122
    123				     ;------------------------------------------------
    124				     ;------------------------------------------------
    125
    126				     ;------------------------------------------------
    127				     ; Sets (num) bytes	of the memory pointed by (ptr) to the specified	(value)
    128				     ;------------------------------------------------
    129				     ; Entry:	     CX	= num
    130				     ;		     AL	= value
    131				     ;		     ES:DI = ptr
    132				     ;
    133				     ; Expects:	     DF	= 0 (CLD)
    134				     ;
    135				     ; Exit:	     None
    136				     ;
    137				     ; Destroys:     CX	DI
    138				     ;------------------------------------------------
    139				     ; Stack frame:
    140				     ;		     ...
    141				     ;		     retAddr	 []
    142				     ;		     ...
    143				     ;------------------------------------------------
    144				     ;Направление просмотра	 зависит	 от флага		    +
    145				     направления DF,	значение  которого  можно	менять  с    +
    146				     помощью команд CLD (DF:=0) и	STD (DF:=1).
    147
    148	0134			     MemSet	     proc
    149						     ; push bp
    150						     ; mov bp, sp		       ; Complete stack	frame
    151
    152	0134  F3> AA				     rep stosb
    153
    154						     ; pop bp			       ; Stack frame
    155	0136  C3				     ret
    156	0137			     MemSet	     endp
    157
    158				     ;------------------------------------------------
    159				     ;------------------------------------------------
    160
    161				     include ..\LianLib\ScanNDec.asm
1   162				     ;------------------------------------------------
1   163				     ; Scans number as decimal
1   164				     ;------------------------------------------------
1   165				     ; Entry:	     none
1   166				     ;
1   167				     ; Expects:	     BX	= 0
1   168				     ;
1   169				     ; Exit:	     BX	= number to print
1   170				     ;
1   171				     ; Destroys:     AX	CL Si
Turbo Assembler	 Version 4.1	    03/02/23 21:01:16	    Page 4
strfuncs.asm



1   172				     ;------------------------------------------------
1   173				     ;------------------------------------------------
1   174	0137			     ScanNDec	     proc
1   175
1   176	0137			     @@ScanDigit:				     ; <??????????????????????????
1   177										     ;				 ?
1   178	0137  B4 01				     mov ah, 01h		     ; getc -> al		 ?
1   179	0139  CD 21				     int 21h			     ; ^			 ?
1   180										     ;				 ?
1   181	013B  3C 0D				     cmp al, 13d		     ; Stop scan if enter	 ?
1   182	013D  74 15				     je	@@EndScanDigit		     ; >>?????????????????????????????????
1   183										     ;				 ?	 ?
1   184	013F  8A C8				     mov cl, al			     ; Store al	to cl		 ?	 ?
1   185										     ;				 ?	 ?
1   186	0141  8B C3				     mov ax, bx			     ; bx *= 10			 ?	 ?
1   187	0143  BE 000A				     mov si, 10d		     ; ^			 ?	 ?
1   188	0146  F7 E6				     mul si			     ; ^			 ?	 ?
1   189	0148  8B D8				     mov bx, ax			     ; ^			 ?	 ?
1   190										     ;				 ?	 ?
1   191	014A  8A C1				     mov al, cl			     ; Retore al from cl	 ?	 ?
1   192										     ;				 ?	 ?
1   193	014C  2C 30				     sub al, "0"		     ; ASCII "0" offset		 ?	 ?
1   194										     ;				 ?	 ?
1   195	014E  B4 00				     mov ah, 0d			     ; bx += al			 ?	 ?
1   196	0150  03 D8				     add bx, ax			     ; ^			 ?	 ?
1   197										     ;				 ?	 ?
1   198	0152  EB E3				     jmp @@ScanDigit		     ; >??????????????????????????	 ?
1   199										     ;					 ?
1   200	0154			     @@EndScanDigit:				     ; <<?????????????????????????????????
1   201	0154  C3				     ret
1   202
1   203	0155			     ScanNDec	     endp
1   204
1   205				     ;------------------------------------------------
1   206				     ;------------------------------------------------
1   207
    208				     include ..\LianLib\PrntNBin.asm
1   209				     ;------------------------------------------------
1   210				     ; Prints number as	binary to vidmem
1   211				     ;------------------------------------------------
1   212				     ; Entry:	     AX	= number to print
1   213				     ;		     BX	= start	addr to	print
1   214				     ;
1   215				     ; Expects:	     ES	-> Video segment
1   216				     ;		     DH	= color	code
1   217				     ;
1   218				     ; Exit:	     None
1   219				     ;
1   220				     ; Destroys:     AX	BX CX DL
1   221				     ;------------------------------------------------
1   222				     ;------------------------------------------------
1   223	0155			     PrintNBin	     proc
1   224
1   225	0155  B9 0010				     mov cx, 16d		     ; 16 bit in 2 byte	in ax
1   226
1   227	0158			     @@PrintDigit:				     ; <-------------------------\
1   228										     ;				 |
Turbo Assembler	 Version 4.1	    03/02/23 21:01:16	    Page 5
strfuncs.asm



1   229	0158  B2 01				     mov dl, 00000001b		     ; Mask			 |
1   230	015A  22 D0				     and dl, al			     ;				 |
1   231	015C  80 C2 30				     add dl, 30h		     ; ASCII "0" offset		 |
1   232										     ;				 |
1   233	015F  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   234										     ;				 |
1   235	0162  4B				     dec bx			     ; Next digit		 |
1   236	0163  4B				     dec bx			     ; ^			 |
1   237										     ;				 |
1   238	0164  D1 E8				     shr ax, 1d			     ; ax >> 1			 |
1   239										     ;				 |
1   240	0166  E2 F0				     loop @@PrintDigit		     ; >-------------------------/
1   241
1   242	0168  C3				     ret
1   243
1   244	0169			     PrintNBin	     endp
1   245
1   246				     ;------------------------------------------------
1   247				     ;------------------------------------------------
1   248
    249				     include ..\LianLib\PrntNHex.asm
1   250				     ;------------------------------------------------
1   251				     ; Prints number as	hexagen	to vidmem
1   252				     ;------------------------------------------------
1   253				     ; Entry:	     AX	= number to print
1   254				     ;		     BX	= start	addr to	print
1   255				     ;
1   256				     ; Expects:	     ES	-> Video segment
1   257				     ;		     DH	= color	code
1   258				     ;
1   259				     ; Exit:	     None
1   260				     ;
1   261				     ; Destroys:     AX	BX CX DL Si
1   262				     ;------------------------------------------------
1   263				     ;------------------------------------------------
1   264	0169			     PrintNHex	     proc
1   265
1   266	0169  B9 0004				     mov cx, 4d			     ; 4 digits	in 2 byte in ax
1   267
1   268	016C			     @@PrintDigit:				     ; <-------------------------\
1   269										     ;				 |
1   270	016C  B2 0F				     mov dl, 00001111b		     ; Mask			 |
1   271	016E  22 D0				     and dl, al			     ;				 |
1   272										     ;				 |
1   273	0170  8B F2				     mov si, dx			     ; dl -> si			 |
1   274	0172  83 E6 0F				     and si, 0Fh		     ;				 |
1   275										     ;				 |
1   276	0175  8A 94 0000r			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
1   277										     ;				 |
1   278	0179  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   279										     ;				 |
1   280	017C  4B				     dec bx			     ; Next digit		 |
1   281	017D  4B				     dec bx			     ; ^			 |
1   282										     ;				 |
1   283	017E  D1 E8 D1 E8 D1 E8	D1+		     shr ax, 4d			     ; ax >> 4			 |
    284	      E8
1   285										     ;				 |
Turbo Assembler	 Version 4.1	    03/02/23 21:01:16	    Page 6
strfuncs.asm



1   286	0186  E2 E4				     loop @@PrintDigit		     ; >-------------------------/
1   287
1   288	0188  C3				     ret
1   289
1   290	0189			     PrintNHex	     endp
1   291
1   292				     ;------------------------------------------------
1   293				     ;------------------------------------------------
1   294
    295				     include ..\LianLib\PrntNDec.asm
1   296				     ;------------------------------------------------
1   297				     ; Prints number as	decimal	to vidmem
1   298				     ;------------------------------------------------
1   299				     ; Entry:	     AX	= number to print
1   300				     ;		     BX	= start	addr to	print
1   301				     ;
1   302				     ; Expects:	     ES	-> Video segment
1   303				     ;		     DH	= color	code
1   304				     ;
1   305				     ; Exit:	     None
1   306				     ;
1   307				     ; Destroys:     AX	BX CX DL Si
1   308				     ;------------------------------------------------
1   309				     ;------------------------------------------------
1   310	0189			     PrintNDec	     proc
1   311
1   312	0189  B9 0005				     mov cx, 5d			     ; 5 digits	in 2 byte in ax
1   313
1   314	018C			     @@PrintDigit:				     ; <-------------------------\
1   315	018C  8A EE				     mov ch, dh			     ; Store dh	to ch		 |
1   316										     ;				 |
1   317	018E  BA 0000				     mov dx, 0d			     ; for division		 |
1   318	0191  BE 000A				     mov si, 10d		     ; ax/10 ->	ax &		 |
1   319	0194  F7 F6				     div si			     ; & ax%10 -> dx		 | !!! dx < 10
1   320										     ;				 |
1   321	0196  8B F2				     mov si, dx			     ; dl -> si			 |
1   322										     ;				 |
1   323	0198  8A 94 0000r			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
1   324										     ;				 |
1   325	019C  8A F5				     mov dh, ch			     ; Restore dh from ch	 |
1   326	019E  B5 00				     mov ch, 0			     ; ^			 |
1   327										     ;				 |
1   328	01A0  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   329										     ;				 |
1   330	01A3  4B				     dec bx			     ; Next digit		 |
1   331	01A4  4B				     dec bx			     ; ^			 |
1   332										     ;				 |
1   333										     ;				 |
1   334	01A5  E2 E5				     loop @@PrintDigit		     ; >-------------------------/
1   335
1   336	01A7  C3				     ret
1   337
1   338	01A8			     PrintNDec	     endp
1   339
1   340				     ;------------------------------------------------
1   341				     ;------------------------------------------------
1   342
Turbo Assembler	 Version 4.1	    03/02/23 21:01:16	    Page 7
strfuncs.asm



    343
    344				     include ..\LianLib\DrawLine.asm
1   345				     ;------------------------------------------------
1   346				     ; Draws line on the screen	(Pattern ABB~BBC)
1   347				     ;------------------------------------------------
1   348				     ; Entry:	     DI	= start	addr to	draw
1   349				     ;		     CX	= width	of line	(without A&C)
1   350				     ;
1   351				     ; Expects:	     ES	-> Video segment
1   352				     ;		     DF	= 0 (CLD)
1   353				     ;
1   354				     ; Exit:	     None
1   355				     ;
1   356				     ; Destroys:     AX	CX DI
1   357				     ;------------------------------------------------
1   358				     ; Stack frame:
1   359				     ;		     ...
1   360				     ;		     'A' char	 [bp + 8]    //	H - color attr
1   361				     ;		     'B' char	 [bp + 6]    //	L - symb attr
1   362				     ;		     'C' char	 [bp + 4]    //
1   363				     ;		     retAddr	 [bp + 2]
1   364				     ;		     stored BP	 [bp]
1   365				     ;		     ...
1   366				     ;------------------------------------------------
1   367				     ;Направление просмотра	 зависит	 от флага		    +
    368				     направления DF,	значение  которого  можно	менять  с    +
    369				     помощью команд CLD (DF:=0) и	STD (DF:=1).
1   370
1   371	01A8			     DrawLine	     proc
1   372	01A8  55				     push bp
1   373	01A9  8B EC				     mov bp, sp			     ; Complete	stack frame
1   374
1   375	01AB  8B 46 08				     mov ax, [bp + 8]
1   376	01AE  AB				     stosw
1   377
1   378	01AF  8B 46 06				     mov ax, [bp + 6]
1   379	01B2  F3> AB				     rep stosw
1   380
1   381	01B4  8B 46 04				     mov ax, [bp + 4]
1   382	01B7  AB				     stosw
1   383
1   384	01B8  5D				     pop bp			     ; Stack frame
1   385	01B9  C3				     ret
1   386	01BA			     DrawLine	     endp
1   387
1   388				     ;------------------------------------------------
1   389				     ;------------------------------------------------
1   390
    391
    392	01BA			     .data
    393				     include ..\LianLib\Alphabet.asm
1   394	0000  30 31 32 33 34 35	36+  Alphabet:	     db	"0123456789ABCDEF"	     ; Alphabet	for printing (Thanks Ilya)
    395	      37 38 39 41 42 43	44+
    396	      45 46
1   397	0010  C9 CD BB BA BC C8	     BoxSymbols:     db	0c9h, 0cdh, 0bbh, 0bah,	0bch, 0c8h ; "╔═╗║╝╚"
1   398
1   399	0016  20 DA C9		     BoxAssetLU:     db	020h, 0dah, 0c9h
Turbo Assembler	 Version 4.1	    03/02/23 21:01:16	    Page 8
strfuncs.asm



1   400	0019  20 C4 CD		     BoxAsset_U:     db	020h, 0c4h, 0cdh
1   401	001C  20 BF BB		     BoxAssetRU:     db	020h, 0bfh, 0bbh
1   402	001F  20 B3 BA		     BoxAssetR_:     db	020h, 0b3h, 0bah
1   403	0022  20 D9 BC		     BoxAssetRB:     db	020h, 0d9h, 0bch
1   404	0025  20 C4 CD		     BoxAsset_B:     db	020h, 0c4h, 0cdh
1   405	0028  20 C0 C8		     BoxAssetLB:     db	020h, 0c0h, 0c8h
1   406	002B  20 B3 BA		     BoxAssetL_:     db	020h, 0b3h, 0bah
1   407	002E  20 20 20		     BoxAssetFI:     db	020h, 020h, 020h
1   408
1   409				     ; 0:    1:┌─┐ 2:╔═╗
1   410				     ;	       │ │	 ║ ║
1   411				     ;	       └─┘   ╚═╝
1   412
    413	0031  31 32 33 34 35 36	37+  String:	 db "123456789", 0h
    414	      38 39 00
    415
    416				     end	     Start
Turbo Assembler	 Version 4.1	    03/02/23 21:01:16	    Page 9
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/02/23"
??FILENAME			  Text	 "strfuncs"
??TIME				  Text	 "21:01:16"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@COUNTEND			  Near	 DGROUP:0130
@@COUNTSTEP			  Near	 DGROUP:012A
@@ENDSCANDIGIT			  Near	 DGROUP:0154
@@PRINTDIGIT			  Near	 DGROUP:0158
@@PRINTDIGIT			  Near	 DGROUP:016C
@@PRINTDIGIT			  Near	 DGROUP:018C
@@SCANDIGIT			  Near	 DGROUP:0137
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 STRFUNCS
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ALPHABET			  Near	 DGROUP:0000
ARGCOUNT			  Near	 DGROUP:0080
ARGS				  Near	 DGROUP:0081
BOXASSETFI			  Near	 DGROUP:002E
BOXASSETLB			  Near	 DGROUP:0028
BOXASSETLU			  Near	 DGROUP:0016
BOXASSETL_			  Near	 DGROUP:002B
BOXASSETRB			  Near	 DGROUP:0022
BOXASSETRU			  Near	 DGROUP:001C
BOXASSETR_			  Near	 DGROUP:001F
BOXASSET_B			  Near	 DGROUP:0025
BOXASSET_U			  Near	 DGROUP:0019
BOXSYMBOLS			  Near	 DGROUP:0010
DRAWLINE			  Near	 DGROUP:01A8
MEMCPY				  Near	 DGROUP:0131
MEMSET				  Near	 DGROUP:0134
PRINTNBIN			  Near	 DGROUP:0155
PRINTNDEC			  Near	 DGROUP:0189
PRINTNHEX			  Near	 DGROUP:0169
SCANNDEC			  Near	 DGROUP:0137
START				  Near	 DGROUP:0100
STRING				  Near	 DGROUP:0031
STRLEN				  Near	 DGROUP:0126

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  003B Word	  Public  DATA
  _TEXT				  16  01BA Word	  Public  CODE
