Turbo Assembler	 Version 4.1	    03/08/23 02:57:00	    Page 1
reghunt.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     .286
      4				     locals @@
      5				     org 100h
      6
      7	0100  E9 0136		     Start:	     jmp Main
      8
      9				     ;------------------------------------------------
     10				     ; Keyboard	intterupt handler
     11				     ;------------------------------------------------
     12				     ;
     13				     ;	 Catches control keys &	sets (State) variable
     14				     ;
     15				     ;------------------------------------------------
     16
     17	0103			     New09Int	     proc
     18	0103  50				     push ax		     ; Stored regs
     19						     ; mov ax, cs
     20						     ; mov ds, ax
     21
     22	0104  E4 60				     in	al, 60h		     ; Catch key code
     23
     24	0106  3C 1D				     cmp al, 01Dh	     ; ctrl is pressed
     25	0108  74 07				     je	@@ControlKey1
     26	010A  3C 9D				     cmp al, 09Dh	     ; ctrl is released
     27	010C  74 0C				     je	@@ControlKey2
     28
     29	010E  EB 0D 90				     jmp @@NotControlKey
     30	0111					 @@ControlKey1:
     31									     ; Invert State variable
     32	0111  2E: 80 36	0164r 01		     xor byte ptr cs:[State], 01b
     33
     34	0117  EB 04 90				     jmp @@NotControlKey
     35	011A					 @@ControlKey2:
     36									     ; Invert State variable
     37
     38	011A  EB 01 90				     jmp @@NotControlKey
     39	011D					 @@NotControlKey:
     40
     41	011D  E4 61				     in	al, 61h		     ; Set interruptor free
     42	011F  0C 80				     or	al, 80h
     43	0121  E6 61				     out 61h, al
     44	0123  24 7F				     and al, not 80h
     45	0125  E6 61				     out 61h, al
     46
     47	0127  B0 20				     mov al, 20h	     ; Set interruptor free
     48	0129  E6 20				     out 20h, al
     49
     50
     51	012B  58				     pop ax		     ; Stored regs
     52	012C  9C				     pushf
     53	012D  9A				     db	09Ah		     ; CALL FAR
     54	012E  0000		     Old09Ofs	     dw	0		     ; call old	09 interruption
     55	0130  0000		     Old09Seg	     dw	0
     56
     57	0132  CF				     iret
Turbo Assembler	 Version 4.1	    03/08/23 02:57:00	    Page 2
reghunt.asm



     58	0133					     endp
     59
     60				     ;------------------------------------------------
     61				     ;------------------------------------------------
     62
     63
     64				     ;------------------------------------------------
     65				     ; Timer intterupt handler
     66				     ;------------------------------------------------
     67				     ;
     68				     ;	 Draws
     69				     ;
     70				     ;------------------------------------------------
     71
     72	0133			     New08Int	     proc
     73	0133  50 53 51 52 1E 06	56+		     push ax bx	cx dx ds es si di    ; Stored regs
     74	      57
     75
     76	013B  BB B800				     mov bx, 0b800h		     ; ES -> vidmem segment
     77	013E  8E C3				     mov es, bx
     78	0140  8C CB				     mov bx, cs			     ; DS -> datasegment
     79	0142  8E DB				     mov ds, bx
     80
     81
     82						     ; mov al, byte ptr	[State]
     83						     ; mov byte	ptr es:[bx], al
     84
     85
     86						     ; push ds
     87
     88						     ; sub bx, 2d
     89						     ; mov ah, 0d
     90						     ; call PrintNHex
     91
     92						     ; cmp byte	ptr [State], 011b
     93	0144  F6 06 0164r 01			     test byte ptr [State], 01b
     94	0149  74 06				     jz	@@DoNotDraw
     95
     96						     ; xor byte	ptr [State], 01b
     97
     98	014B  E8 007E				     call DrawRegBox
     99
    100	014E  EB 01 90				     jmp @@DoNotDrawEnd
    101	0151					 @@DoNotDraw:
    102
    103						     ; mov byte	ptr es:[bx], 62d
    104
    105	0151					 @@DoNotDrawEnd:
    106
    107	0151  B0 20				     mov al, 20h	     ; Set interruptor free
    108	0153  E6 20				     out 20h, al
    109
    110	0155  5F 5E 07 1F 5A 59	5B+		     pop di si es ds dx	cx bx ax     ; Stored regs
    111	      58
    112
    113
    114	015D  9C				     pushf
Turbo Assembler	 Version 4.1	    03/08/23 02:57:00	    Page 3
reghunt.asm



    115	015E  9A				     db	09Ah		     ; CALL FAR
    116	015F  0000		     Old08Ofs	     dw	0		     ; call old	08 interruption
    117	0161  0000		     Old08Seg	     dw	0
    118
    119	0163  CF				     iret
    120	0164					     endp
    121
    122				     ;------------------------------------------------
    123				     ;------------------------------------------------
    124
    125				     ; .data
    126	0164  01		     State:	     db	001h
    127				     include ..\LianLib\Alphabet.asm
1   128	0165  30 31 32 33 34 35	36+  Alphabet:	     db	"0123456789ABCDEF"	     ; Alphabet	for printing (Thanks Ilya)
    129	      37 38 39 41 42 43	44+
    130	      45 46
1   131	0175  C9 CD BB BA BC C8	     BoxSymbols:     db	0c9h, 0cdh, 0bbh, 0bah,	0bch, 0c8h ; "╔═╗║╝╚"
1   132
1   133	017B			     BoxAssetStart:
1   134	017B  20 DA C9 00	     BoxAssetLU:     db	020h, 0dah, 0c9h, 000h
1   135	017F			     BoxAssetStep:
1   136	017F  20 C4 CD 00	     BoxAsset_U:     db	020h, 0c4h, 0cdh, 000h
1   137	0183  20 BF BB 00	     BoxAssetRU:     db	020h, 0bfh, 0bbh, 000h
1   138	0187  20 B3 BA 00	     BoxAssetR_:     db	020h, 0b3h, 0bah, 000h
1   139	018B  20 D9 BC 00	     BoxAssetRB:     db	020h, 0d9h, 0bch, 000h
1   140	018F  20 C4 CD 00	     BoxAsset_B:     db	020h, 0c4h, 0cdh, 000h
1   141	0193  20 C0 C8 00	     BoxAssetLB:     db	020h, 0c0h, 0c8h, 000h
1   142	0197  20 B3 BA 00	     BoxAssetL_:     db	020h, 0b3h, 0bah, 000h
1   143	019B  20 20 20 00	     BoxAssetFI:     db	020h, 020h, 020h, 000h
1   144	019F			     BoxAssetEnd:
1   145
1   146				     ; 0:    1:┌─┐ 2:╔═╗ 3:usr
1   147				     ;	       │ │	 ║ ║   chr
1   148				     ;	       └─┘   ╚═╝
1   149
    150				     ; .code
    151
    152				     include ..\LianLib\PrntNHex.asm
1   153				     ;------------------------------------------------
1   154				     ; Prints number as	hexagen	to vidmem
1   155				     ;------------------------------------------------
1   156				     ; Entry:	     AX	= number to print
1   157				     ;		     BX	= start	addr to	print
1   158				     ;
1   159				     ; Expects:	     ES	-> Video segment
1   160				     ;		     DH	= color	code
1   161				     ;
1   162				     ; Exit:	     None
1   163				     ;
1   164				     ; Destroys:     AX	BX CX DL Si
1   165				     ;------------------------------------------------
1   166				     ;------------------------------------------------
1   167	019F			     PrintNHex	     proc
1   168
1   169	019F  B9 0004				     mov cx, 4d			     ; 4 digits	in 2 byte in ax
1   170
1   171	01A2			     @@PrintDigit:				     ; <-------------------------\
Turbo Assembler	 Version 4.1	    03/08/23 02:57:00	    Page 4
reghunt.asm



1   172										     ;				 |
1   173	01A2  B2 0F				     mov dl, 00001111b		     ; Mask			 |
1   174	01A4  22 D0				     and dl, al			     ;				 |
1   175										     ;				 |
1   176	01A6  8B F2				     mov si, dx			     ; dl -> si			 |
1   177	01A8  83 E6 0F				     and si, 0Fh		     ;				 |
1   178										     ;				 |
1   179	01AB  8A 94 0165r			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
1   180										     ;				 |
1   181	01AF  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   182										     ;				 |
1   183	01B2  4B				     dec bx			     ; Next digit		 |
1   184	01B3  4B				     dec bx			     ; ^			 |
1   185										     ;				 |
1   186	01B4  C1 E8 04				     shr ax, 4d			     ; ax >> 4			 |
1   187										     ;				 |
1   188	01B7  E2 E9				     loop @@PrintDigit		     ; >-------------------------/
1   189
1   190	01B9  C3				     ret
1   191
1   192	01BA			     PrintNHex	     endp
1   193
1   194				     ;------------------------------------------------
1   195				     ;------------------------------------------------
1   196
    197				     ; include ..\LianLib\ProBox.asm
    198				     include ..\LianLib\DrawLine.asm
1   199				     ;------------------------------------------------
1   200				     ; Draws line on the screen	(Pattern ABB~BBC)
1   201				     ;------------------------------------------------
1   202				     ; Entry:	     DI	= start	addr to	draw
1   203				     ;		     CX	= width	of line	(without A&C)
1   204				     ;
1   205				     ; Expects:	     ES	-> Video segment
1   206				     ;		     DF	= 0 (CLD)
1   207				     ;
1   208				     ; Exit:	     None
1   209				     ;
1   210				     ; Destroys:     AX	CX DI
1   211				     ;------------------------------------------------
1   212				     ; Stack frame:
1   213				     ;		     ...
1   214				     ;		     'A' char	 [bp + 8]    //	H - color attr
1   215				     ;		     'B' char	 [bp + 6]    //	L - symb attr
1   216				     ;		     'C' char	 [bp + 4]    //
1   217				     ;		     retAddr	 [bp + 2]
1   218				     ;		     stored BP	 [bp]
1   219				     ;		     ...
1   220				     ;------------------------------------------------
1   221				     ;Направление просмотра	 зависит	 от флага		    +
    222				     направления DF,	значение  которого  можно	менять  с    +
    223				     помощью команд CLD (DF:=0) и	STD (DF:=1).
1   224
1   225	01BA			     DrawLine	     proc
1   226	01BA  55				     push bp
1   227	01BB  8B EC				     mov bp, sp			     ; Complete	stack frame
1   228
Turbo Assembler	 Version 4.1	    03/08/23 02:57:00	    Page 5
reghunt.asm



1   229	01BD  8B 46 08				     mov ax, [bp + 8]
1   230	01C0  AB				     stosw
1   231
1   232	01C1  8B 46 06				     mov ax, [bp + 6]
1   233	01C4  F3> AB				     rep stosw
1   234
1   235	01C6  8B 46 04				     mov ax, [bp + 4]
1   236	01C9  AB				     stosw
1   237
1   238	01CA  5D				     pop bp			     ; Stack frame
1   239	01CB  C3				     ret
1   240	01CC			     DrawLine	     endp
1   241
1   242				     ;------------------------------------------------
1   243				     ;------------------------------------------------
1   244
    245
    246
    247				     ;------------------------------------------------
    248				     ; Draws box for registers on the screen
    249				     ;------------------------------------------------
    250				     ; Entry:	     ...
    251				     ;
    252				     ; Expects:	     ES	-> Video segment
    253				     ;		     DS	-> Data	segment
    254				     ;
    255				     ; Exit:	     None
    256				     ;
    257				     ; Destroys:     AX	BX CX DX DI
    258				     ;		     BX	= start	addr to	draw
    259				     ;		     CH	= height of box	(without frame)
    260				     ;		     CL	= width	of box (without	frame)
    261				     ;------------------------------------------------
    262				     ; Stack frame:
    263				     ;		     ...
    264				     ;		     retAddr	 [bp + 2]
    265				     ;		     stored BP	 [bp]
    266				     ;		     stored CX	 [bp - 2]    //	size
    267				     ;		     ...
    268				     ;------------------------------------------------
    269
    270	01CC			     DrawRegBox	     proc
    271	01CC  55				     push bp
    272	01CD  8B EC				     mov bp, sp			     ; Complete	stack frame
    273
    274	01CF  BB 0000				     mov bx, 0d			     ; box position
    275	01D2  B1 0A				     mov cl, 10d		     ; box width
    276	01D4  B5 0C				     mov ch, 12d		     ; box height
    277
    278	01D6  51				     push cx
    279
    280	01D7  B4 0E				     mov ah, 00Eh		     ; box color
    281
    282										     ;-------------------------------------------
    283										     ; Upper line
    284	01D9  8B FB				     mov di, bx
    285	01DB  8B 4E FE				     mov cx, [bp - 2]
Turbo Assembler	 Version 4.1	    03/08/23 02:57:00	    Page 6
reghunt.asm



    286	01DE  B5 00				     mov ch, 0
    287	01E0  A0 017Dr				     mov al, byte ptr [BoxAssetLU + 2]
    288	01E3  50				     push ax
    289	01E4  A0 0181r				     mov al, byte ptr [BoxAsset_U + 2]
    290	01E7  50				     push ax
    291	01E8  A0 0185r				     mov al, byte ptr [BoxAssetRU + 2]
    292	01EB  50				     push ax
    293	01EC  E8 FFCB				     call DrawLine
    294	01EF  83 C4 06				     add sp, 2*3d
    295										     ;-------------------------------------------
    296										     ; Middle line
    297	01F2  8B 4E FE				     mov cx, [bp - 2]
    298	01F5  B6 00				     mov dh, 0
    299	01F7  8A D5				     mov dl, ch
    300	01F9			     @@MiddleStep:				     ; <-----------------\
    301										     ;			 |
    302	01F9  81 C3 00A0			     add bx, 160d		     ;			 |
    303	01FD  8B FB				     mov di, bx			     ;			 |
    304	01FF  8B 4E FE				     mov cx, [bp - 2]		     ;			 |
    305	0202  B5 00				     mov ch, 0			     ;			 |
    306	0204  A0 0199r				     mov al, byte ptr [BoxAssetL_ + 2];			 |
    307	0207  50				     push ax			     ;			 |
    308	0208  A0 019Dr				     mov al, byte ptr [BoxAssetFI + 2];			 |
    309	020B  50				     push ax			     ;			 |
    310	020C  A0 0189r				     mov al, byte ptr [BoxAssetR_ + 2];			 |
    311	020F  50				     push ax			     ;			 |
    312	0210  E8 FFA7				     call DrawLine		     ;			 |
    313	0213  83 C4 06				     add sp, 2*3d		     ;			 |
    314	0216  4A				     dec dx			     ;			 |
    315	0217  75 E0				     jnz @@MiddleStep		     ; >-----------------/
    316										     ;-------------------------------------------
    317										     ; Bottom line
    318	0219  81 C3 00A0			     add bx, 160d
    319	021D  8B FB				     mov di, bx
    320	021F  8B 4E FE				     mov cx, [bp - 2]
    321	0222  B5 00				     mov ch, 0
    322	0224  A0 0195r				     mov al, byte ptr [BoxAssetLB + 2]
    323	0227  50				     push ax
    324	0228  A0 0191r				     mov al, byte ptr [BoxAsset_B + 2]
    325	022B  50				     push ax
    326	022C  A0 018Dr				     mov al, byte ptr [BoxAssetRB + 2]
    327	022F  50				     push ax
    328	0230  E8 FF87				     call DrawLine
    329	0233  83 C4 06				     add sp, 2*3d
    330										     ;-------------------------------------------
    331
    332	0236  59				     pop cx
    333	0237  5D				     pop bp			     ; Stack frame
    334	0238  C3				     ret
    335	0239			     DrawRegBox	     endp
    336
    337				     ;------------------------------------------------
    338				     ;------------------------------------------------
    339
    340
    341	0239			     InterruptorMemEnd:
    342
Turbo Assembler	 Version 4.1	    03/08/23 02:57:00	    Page 7
reghunt.asm



    343	0239			     Main:
    344	0239  FA				     cli
    345	023A  BB 0000				     mov bx, 0
    346	023D  8E C3				     mov es, bx
    347	023F  BB 0024				     mov bx, 9*4			 ; DOS interruption address offset
    348
    349	0242  26: 8B 07				     mov ax, es:[bx]			 ; Old interrupt-09 handler
    350	0245  A3 012Er				     mov Old09Ofs, ax
    351	0248  26: 8B 47	02			     mov ax, es:[bx+2]
    352	024C  A3 0130r				     mov Old09Seg, ax
    353
    354	024F  26: C7 07	0103r			     mov es:[bx], offset New09Int	 ; Set my interrupt-09 handler
    355	0254  8C C8				     mov ax, cs
    356	0256  26: 89 47	02			     mov es:[bx+2], ax
    357
    358
    359	025A  BB 0020				     mov bx, 8*4			 ; DOS interruption address offset
    360
    361	025D  26: 8B 07				     mov ax, es:[bx]			 ; Old interrupt-08 handler
    362	0260  A3 015Fr				     mov Old08Ofs, ax
    363	0263  26: 8B 47	02			     mov ax, es:[bx+2]
    364	0267  A3 0161r				     mov Old08Seg, ax
    365
    366	026A  26: C7 07	0133r			     mov es:[bx], offset New08Int	 ; Set my interrupt-08 handler
    367	026F  8C C8				     mov ax, cs
    368	0271  26: 89 47	02			     mov es:[bx+2], ax
    369	0275  FB				     sti
    370
    371
    372
    373						     ; mov bx, 0b800h
    374						     ; mov es, bx
    375						     ; mov bx, 342d
    376
    377						     ; push ds ss cs
    378
    379						     ; mov dx, 00D00h
    380						     ; pop ax
    381						     ; call PrintNHex
    382						     ; pop ax
    383						     ; call PrintNHex
    384						     ; pop ax
    385						     ; call PrintNHex
    386
    387
    388	0276  B8 3100				     mov ax, 3100h
    389	0279  BA 0239r				     mov dx, offset InterruptorMemEnd	 ; Размер	необходимой	    +
    390				     памяти
    391	027C  C1 EA 04				     shr dx, 4				 ; В параграфе 16 байт
    392	027F  42				     inc dx				 ; С округлением вверх
    393
    394	0280  CD 21				     int 21h
    395
    396				     end	     Start
Turbo Assembler	 Version 4.1	    03/08/23 02:57:00	    Page 8
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/08/23"
??FILENAME			  Text	 "reghunt "
??TIME				  Text	 "02:57:00"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CONTROLKEY1			  Near	 DGROUP:0111
@@CONTROLKEY2			  Near	 DGROUP:011A
@@DONOTDRAW			  Near	 DGROUP:0151
@@DONOTDRAWEND			  Near	 DGROUP:0151
@@MIDDLESTEP			  Near	 DGROUP:01F9
@@NOTCONTROLKEY			  Near	 DGROUP:011D
@@PRINTDIGIT			  Near	 DGROUP:01A2
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 REGHUNT
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ALPHABET			  Near	 DGROUP:0165
BOXASSETEND			  Near	 DGROUP:019F
BOXASSETFI			  Near	 DGROUP:019B
BOXASSETLB			  Near	 DGROUP:0193
BOXASSETLU			  Near	 DGROUP:017B
BOXASSETL_			  Near	 DGROUP:0197
BOXASSETRB			  Near	 DGROUP:018B
BOXASSETRU			  Near	 DGROUP:0183
BOXASSETR_			  Near	 DGROUP:0187
BOXASSETSTART			  Near	 DGROUP:017B
BOXASSETSTEP			  Near	 DGROUP:017F
BOXASSET_B			  Near	 DGROUP:018F
BOXASSET_U			  Near	 DGROUP:017F
BOXSYMBOLS			  Near	 DGROUP:0175
DRAWLINE			  Near	 DGROUP:01BA
DRAWREGBOX			  Near	 DGROUP:01CC
INTERRUPTORMEMEND		  Near	 DGROUP:0239
MAIN				  Near	 DGROUP:0239
NEW08INT			  Near	 DGROUP:0133
NEW09INT			  Near	 DGROUP:0103
OLD08OFS			  Word	 DGROUP:015F
OLD08SEG			  Word	 DGROUP:0161
OLD09OFS			  Word	 DGROUP:012E
OLD09SEG			  Word	 DGROUP:0130
PRINTNHEX			  Near	 DGROUP:019F
START				  Near	 DGROUP:0100
STATE				  Near	 DGROUP:0164
Turbo Assembler	 Version 4.1	    03/08/23 02:57:00	    Page 9
Symbol Table




Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0282 Word	  Public  CODE
