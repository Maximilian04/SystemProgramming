Turbo Assembler	 Version 4.1	    03/10/23 01:22:09	    Page 1
reghunt.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     .286
      4				     locals @@
      5				     org 100h
      6
      7	      =000A		     boxWidth  = 10d
      8	      =000C		     boxHeight = 12d
      9	      =0002		     boxTheme  = 2
     10	      =000E		     boxColor  = 00Eh
     11
     12	0100  E9 04D2		     Start:	     jmp Main
     13
     14				     ;------------------------------------------------
     15				     ; Keyboard	intterupt handler
     16				     ;------------------------------------------------
     17				     ;
     18				     ;	 Catches control keys &	sets (State) variable
     19				     ;
     20				     ;------------------------------------------------
     21
     22	0103			     New09Int	     proc
     23	0103  50				     push ax		     ; Stored regs
     24						     ; mov ax, cs
     25						     ; mov ds, ax
     26
     27	0104  E4 60				     in	al, 60h		     ; Catch key code
     28
     29	0106  3C 1D				     cmp al, 01Dh	     ; ctrl is pressed
     30	0108  74 07				     je	@@ControlKey1
     31	010A  3C 9D				     cmp al, 09Dh	     ; ctrl is released
     32	010C  74 0C				     je	@@ControlKey2
     33
     34	010E  EB 0D 90				     jmp @@NotControlKey
     35	0111					 @@ControlKey1:
     36									     ; Invert State variable
     37	0111  2E: 80 36	01DAr 01		     xor byte ptr cs:[State], 01b
     38
     39	0117  EB 04 90				     jmp @@NotControlKey
     40	011A					 @@ControlKey2:
     41									     ; Invert State variable
     42
     43	011A  EB 01 90				     jmp @@NotControlKey
     44	011D					 @@NotControlKey:
     45
     46	011D  E4 61				     in	al, 61h		     ; Set interruptor free
     47	011F  0C 80				     or	al, 80h
     48	0121  E6 61				     out 61h, al
     49	0123  24 7F				     and al, not 80h
     50	0125  E6 61				     out 61h, al
     51
     52	0127  B0 20				     mov al, 20h	     ; Set interruptor free
     53	0129  E6 20				     out 20h, al
     54
     55
     56	012B  58				     pop ax		     ; Stored regs
     57	012C  9C				     pushf
Turbo Assembler	 Version 4.1	    03/10/23 01:22:09	    Page 2
reghunt.asm



     58	012D  9A				     db	09Ah		     ; CALL FAR
     59	012E  0000		     Old09Ofs	     dw	0		     ; call old	09 interruption
     60	0130  0000		     Old09Seg	     dw	0
     61
     62	0132  CF				     iret
     63	0133					     endp
     64
     65				     ;------------------------------------------------
     66				     ;------------------------------------------------
     67
     68
     69				     ;------------------------------------------------
     70				     ; Timer intterupt handler
     71				     ;------------------------------------------------
     72				     ;
     73				     ;	 Draws
     74				     ;
     75				     ;------------------------------------------------
     76
     77	0133			     New08Int	     proc
     78	0133  50 53 51 52 1E 06	56+		     push ax bx	cx dx ds es si di    ; Stored regs
     79	      57
     80
     81	013B  BB B800				     mov bx, 0b800h		     ; ES -> vidmem segment
     82	013E  8E C3				     mov es, bx
     83	0140  8C CB				     mov bx, cs			     ; DS -> datasegment
     84	0142  8E DB				     mov ds, bx
     85
     86
     87						     ; mov al, byte ptr	[State]
     88						     ; mov byte	ptr es:[bx], al
     89
     90
     91						     ; push ds
     92
     93						     ; sub bx, 2d
     94						     ; mov ah, 0d
     95						     ; call PrintNHex
     96
     97	0144  2E: F6 06	01DAr 01		     test byte ptr cs:[State], 01b
     98	014A  74 2E				     jz	@@DoNotDraw		     ; >-----------------\
     99	014C  F6 06 01DAr 02			     test byte ptr [State], 10b	     ;			 |
    100	0151  74 0F				     jz	@@RedrawOn		     ; >-----------------\
    101										     ;			 |
    102										     ;			 |
    103	0153  E8 0430				     call SaveScreenDiffs	     ;			 |   < drawing ON, prev. was+
    104				     ON
    105	0156  E8 034F				     call DrawRegBox		     ;			 |
    106	0159  BE 032Br				     mov si, offset buffer2	     ;			 |
    107	015C  E8 03B6				     call SaveScreen		     ;			 |
    108										     ;			 |
    109										     ;			 |
    110	015F  EB 2C 90				     jmp @@DoNotDrawEnd		     ; >>========\\	 |
    111	0162					 @@RedrawOn:			     ;		 ||	 |
    112	0162  2E: 80 0E	01DAr 02		     or	byte ptr cs:[State], 10b     ;		 ||	 |
    113										     ;		 ||	 |
    114										     ;		 ||	 |
Turbo Assembler	 Version 4.1	    03/10/23 01:22:09	    Page 3
reghunt.asm



    115	0168  BE 01DBr				     mov si, offset buffer1	     ;		 ||	 |   < drawing ON, prev. was+
    116				     OFF
    117	016B  E8 03A7				     call SaveScreen		     ;		 ||	 |
    118	016E  E8 0337				     call DrawRegBox		     ;		 ||	 |
    119	0171  BE 032Br				     mov si, offset buffer2	     ;		 ||	 |
    120	0174  E8 039E				     call SaveScreen		     ;		 ||	 |
    121										     ;		 ||	 |
    122										     ;		 ||	 |
    123	0177  EB 14 90				     jmp @@DoNotDrawEnd		     ; >>========\\	 |
    124	017A				     @@DoNotDraw:			     ; <---------++------/
    125	017A  F6 06 01DAr 02			     test byte ptr [State], 10b	     ;		 ||
    126	017F  74 0C				     jz	@@DoNotRedrawOff	     ; >---------++------\
    127	0181  2E: 80 26	01DAr FD		     and byte ptr cs:[State], not 10b;		 ||	 |
    128										     ;		 ||	 |
    129										     ;		 ||	 |
    130	0187  E8 03C2				     call RestoreScreen		     ;		 ||	 |   < drawing OFF, prev.   +
    131				     was ON
    132										     ;		 ||	 |
    133										     ;		 ||	 |
    134	018A  EB 01 90				     jmp @@DoNotDrawEnd		     ; >>========\\	 |
    135	018D					 @@DoNotRedrawOff:		     ; <---------++------/
    136										     ;		 ||
    137										     ;		 ||	     < drawing OFF, prev.   +
    138				     was OFF
    139										     ;		 ||
    140										     ;		 ||
    141	018D				     @@DoNotDrawEnd:			     ; <<========//
    142
    143	018D  B0 20				     mov al, 20h	     ; Set interruptor free
    144	018F  E6 20				     out 20h, al
    145
    146	0191  5F 5E 07 1F 5A 59	5B+		     pop di si es ds dx	cx bx ax     ; Stored regs
    147	      58
    148
    149
    150	0199  9C				     pushf
    151	019A  9A				     db	09Ah		     ; CALL FAR
    152	019B  0000		     Old08Ofs	     dw	0		     ; call old	08 interruption
    153	019D  0000		     Old08Seg	     dw	0
    154
    155	019F  CF				     iret
    156	01A0					     endp
    157
    158				     ;------------------------------------------------
    159				     ;------------------------------------------------
    160
    161				     ; .data
    162				     include ..\LianLib\Alphabet.asm
1   163	01A0  30 31 32 33 34 35	36+  Alphabet:	     db	"0123456789ABCDEF"	     ; Alphabet	for printing (Thanks Ilya)
    164	      37 38 39 41 42 43	44+
    165	      45 46
1   166	01B0  C9 CD BB BA BC C8	     BoxSymbols:     db	0c9h, 0cdh, 0bbh, 0bah,	0bch, 0c8h ; "╔═╗║╝╚"
1   167
1   168	01B6			     BoxAssetStart:
1   169	01B6  20 DA C9 00	     BoxAssetLU:     db	020h, 0dah, 0c9h, 000h
1   170	01BA			     BoxAssetStep:
1   171	01BA  20 C4 CD 00	     BoxAsset_U:     db	020h, 0c4h, 0cdh, 000h
Turbo Assembler	 Version 4.1	    03/10/23 01:22:09	    Page 4
reghunt.asm



1   172	01BE  20 BF BB 00	     BoxAssetRU:     db	020h, 0bfh, 0bbh, 000h
1   173	01C2  20 B3 BA 00	     BoxAssetR_:     db	020h, 0b3h, 0bah, 000h
1   174	01C6  20 D9 BC 00	     BoxAssetRB:     db	020h, 0d9h, 0bch, 000h
1   175	01CA  20 C4 CD 00	     BoxAsset_B:     db	020h, 0c4h, 0cdh, 000h
1   176	01CE  20 C0 C8 00	     BoxAssetLB:     db	020h, 0c0h, 0c8h, 000h
1   177	01D2  20 B3 BA 00	     BoxAssetL_:     db	020h, 0b3h, 0bah, 000h
1   178	01D6  20 20 20 00	     BoxAssetFI:     db	020h, 020h, 020h, 000h
1   179	01DA			     BoxAssetEnd:
1   180
1   181				     ; 0:    1:┌─┐ 2:╔═╗ 3:usr
1   182				     ;	       │ │	 ║ ║   chr
1   183				     ;	       └─┘   ╚═╝
1   184
    185					 ;   State variable:
    186					 ; mask	| meaning
    187					 ; -----+---------
    188					 ; 0001	| Box is on (1)	/ off (0)
    189					 ; 0010	| Box was on (1) / off (0) last	timer intr
    190	01DA  01		     State:	     db	001h
    191	01DB  A8*(????)		     Buffer1:	     dw	((boxHeight + 2) * (boxWidth + 2)) DUP(?)    ; Info to restore (modified    +
    192				     first screen)
    193	032B  A8*(????)		     Buffer2:	     dw	((boxHeight + 2) * (boxWidth + 2)) DUP(?)    ; Info to compare (previous    +
    194				     screen)
    195				     ; .code
    196
    197				     include ..\LianLib\PrntNHex.asm
1   198				     ;------------------------------------------------
1   199				     ; Prints number as	hexagen	to vidmem
1   200				     ;------------------------------------------------
1   201				     ; Entry:	     AX	= number to print
1   202				     ;		     BX	= start	addr to	print
1   203				     ;
1   204				     ; Expects:	     ES	-> Video segment
1   205				     ;		     DH	= color	code
1   206				     ;
1   207				     ; Exit:	     None
1   208				     ;
1   209				     ; Destroys:     AX	BX CX DL Si
1   210				     ;------------------------------------------------
1   211				     ;------------------------------------------------
1   212	047B			     PrintNHex	     proc
1   213
1   214	047B  B9 0004				     mov cx, 4d			     ; 4 digits	in 2 byte in ax
1   215
1   216	047E			     @@PrintDigit:				     ; <-------------------------\
1   217										     ;				 |
1   218	047E  B2 0F				     mov dl, 00001111b		     ; Mask			 |
1   219	0480  22 D0				     and dl, al			     ;				 |
1   220										     ;				 |
1   221	0482  8B F2				     mov si, dx			     ; dl -> si			 |
1   222	0484  83 E6 0F				     and si, 0Fh		     ;				 |
1   223										     ;				 |
1   224	0487  8A 94 01A0r			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
1   225										     ;				 |
1   226	048B  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   227										     ;				 |
1   228	048E  4B				     dec bx			     ; Next digit		 |
Turbo Assembler	 Version 4.1	    03/10/23 01:22:09	    Page 5
reghunt.asm



1   229	048F  4B				     dec bx			     ; ^			 |
1   230										     ;				 |
1   231	0490  C1 E8 04				     shr ax, 4d			     ; ax >> 4			 |
1   232										     ;				 |
1   233	0493  E2 E9				     loop @@PrintDigit		     ; >-------------------------/
1   234
1   235	0495  C3				     ret
1   236
1   237	0496			     PrintNHex	     endp
1   238
1   239				     ;------------------------------------------------
1   240				     ;------------------------------------------------
1   241
    242				     ; include ..\LianLib\ProBox.asm
    243				     include ..\LianLib\DrawLine.asm
1   244				     ;------------------------------------------------
1   245				     ; Draws line on the screen	(Pattern ABB~BBC)
1   246				     ;------------------------------------------------
1   247				     ; Entry:	     DI	= start	addr to	draw
1   248				     ;		     CX	= width	of line	(without A&C)
1   249				     ;
1   250				     ; Expects:	     ES	-> Video segment
1   251				     ;		     DF	= 0 (CLD)
1   252				     ;
1   253				     ; Exit:	     None
1   254				     ;
1   255				     ; Destroys:     AX	CX DI
1   256				     ;------------------------------------------------
1   257				     ; Stack frame:
1   258				     ;		     ...
1   259				     ;		     'A' char	 [bp + 8]    //	H - color attr
1   260				     ;		     'B' char	 [bp + 6]    //	L - symb attr
1   261				     ;		     'C' char	 [bp + 4]    //
1   262				     ;		     retAddr	 [bp + 2]
1   263				     ;		     stored BP	 [bp]
1   264				     ;		     ...
1   265				     ;------------------------------------------------
1   266				     ;Направление просмотра	 зависит	 от флага		    +
    267				     направления DF,	значение  которого  можно	менять  с    +
    268				     помощью команд CLD (DF:=0) и	STD (DF:=1).
1   269
1   270	0496			     DrawLine	     proc
1   271	0496  55				     push bp
1   272	0497  8B EC				     mov bp, sp			     ; Complete	stack frame
1   273
1   274	0499  8B 46 08				     mov ax, [bp + 8]
1   275	049C  AB				     stosw
1   276
1   277	049D  8B 46 06				     mov ax, [bp + 6]
1   278	04A0  F3> AB				     rep stosw
1   279
1   280	04A2  8B 46 04				     mov ax, [bp + 4]
1   281	04A5  AB				     stosw
1   282
1   283	04A6  5D				     pop bp			     ; Stack frame
1   284	04A7  C3				     ret
1   285	04A8			     DrawLine	     endp
Turbo Assembler	 Version 4.1	    03/10/23 01:22:09	    Page 6
reghunt.asm



1   286
1   287				     ;------------------------------------------------
1   288				     ;------------------------------------------------
1   289
    290
    291
    292				     ;------------------------------------------------
    293				     ; Draws box for registers on the screen
    294				     ;------------------------------------------------
    295				     ; Entry:	     ...
    296				     ;
    297				     ; Expects:	     ES	-> Video segment
    298				     ;		     DS	-> Data	segment
    299				     ;
    300				     ; Exit:	     None
    301				     ;
    302				     ; Destroys:     AX	BX CX DX DI
    303				     ;		     BX	= start	addr to	draw
    304				     ;		     CH	= height of box	(without frame)
    305				     ;		     CL	= width	of box (without	frame)
    306				     ;------------------------------------------------
    307				     ; Stack frame:
    308				     ;		     ...
    309				     ;		     retAddr	 [bp + 2]
    310				     ;		     stored BP	 [bp]
    311				     ;		     stored CX	 [bp - 2]    //	size
    312				     ;		     ...
    313				     ;------------------------------------------------
    314
    315	04A8			     DrawRegBox	     proc
    316	04A8  55				     push bp
    317	04A9  8B EC				     mov bp, sp			     ; Complete	stack frame
    318
    319	04AB  BB 0000				     mov bx, 0d			     ; box position
    320	04AE  B1 0A				     mov cl, boxWidth		     ; box width
    321	04B0  B5 0C				     mov ch, boxHeight		     ; box height
    322
    323	04B2  51				     push cx
    324
    325	04B3  B4 0E				     mov ah, boxColor		     ; box color
    326
    327										     ;-------------------------------------------
    328										     ; Upper line
    329	04B5  8B FB				     mov di, bx
    330	04B7  8B 4E FE				     mov cx, [bp - 2]
    331	04BA  B5 00				     mov ch, 0
    332	04BC  A0 01B8r				     mov al, byte ptr [BoxAssetLU + boxTheme]
    333	04BF  50				     push ax
    334	04C0  A0 01BCr				     mov al, byte ptr [BoxAsset_U + boxTheme]
    335	04C3  50				     push ax
    336	04C4  A0 01C0r				     mov al, byte ptr [BoxAssetRU + boxTheme]
    337	04C7  50				     push ax
    338	04C8  E8 FFCB				     call DrawLine
    339	04CB  83 C4 06				     add sp, 2*3d
    340										     ;-------------------------------------------
    341										     ; Middle line
    342	04CE  8B 4E FE				     mov cx, [bp - 2]
Turbo Assembler	 Version 4.1	    03/10/23 01:22:09	    Page 7
reghunt.asm



    343	04D1  B6 00				     mov dh, 0
    344	04D3  8A D5				     mov dl, ch
    345	04D5			     @@MiddleStep:				     ; <-----------------\
    346										     ;			 |
    347	04D5  81 C3 00A0			     add bx, 160d		     ;			 |
    348	04D9  8B FB				     mov di, bx			     ;			 |
    349	04DB  8B 4E FE				     mov cx, [bp - 2]		     ;			 |
    350	04DE  B5 00				     mov ch, 0			     ;			 |
    351	04E0  A0 01D4r				     mov al, byte ptr [BoxAssetL_ + boxTheme];		 |
    352	04E3  50				     push ax			     ;			 |
    353	04E4  A0 01D8r				     mov al, byte ptr [BoxAssetFI + boxTheme];		 |
    354	04E7  50				     push ax			     ;			 |
    355	04E8  A0 01C4r				     mov al, byte ptr [BoxAssetR_ + boxTheme];		 |
    356	04EB  50				     push ax			     ;			 |
    357	04EC  E8 FFA7				     call DrawLine		     ;			 |
    358	04EF  83 C4 06				     add sp, 2*3d		     ;			 |
    359	04F2  4A				     dec dx			     ;			 |
    360	04F3  75 E0				     jnz @@MiddleStep		     ; >-----------------/
    361										     ;-------------------------------------------
    362										     ; Bottom line
    363	04F5  81 C3 00A0			     add bx, 160d
    364	04F9  8B FB				     mov di, bx
    365	04FB  8B 4E FE				     mov cx, [bp - 2]
    366	04FE  B5 00				     mov ch, 0
    367	0500  A0 01D0r				     mov al, byte ptr [BoxAssetLB + boxTheme]
    368	0503  50				     push ax
    369	0504  A0 01CCr				     mov al, byte ptr [BoxAsset_B + boxTheme]
    370	0507  50				     push ax
    371	0508  A0 01C8r				     mov al, byte ptr [BoxAssetRB + boxTheme]
    372	050B  50				     push ax
    373	050C  E8 FF87				     call DrawLine
    374	050F  83 C4 06				     add sp, 2*3d
    375										     ;-------------------------------------------
    376
    377	0512  59				     pop cx
    378	0513  5D				     pop bp			     ; Stack frame
    379	0514  C3				     ret
    380	0515			     DrawRegBox	     endp
    381
    382				     ;------------------------------------------------
    383				     ;------------------------------------------------
    384
    385
    386				     ;------------------------------------------------
    387				     ; Save screen into	various	buffer
    388				     ;------------------------------------------------
    389				     ; Entry:	     SI	= offset of the	bufffer
    390				     ;
    391				     ; Expects:	     ES	-> Video segment
    392				     ;
    393				     ; Exit:	     None
    394				     ;
    395				     ; Destroys:     AX	BX CX DX DI SI
    396				     ;		     BX	= start	addr to	draw
    397				     ;		     CH	= height of box	(with frame)
    398				     ;		     CL	= width	of box (with frame)
    399				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    03/10/23 01:22:09	    Page 8
reghunt.asm



    400				     ; Stack frame:
    401				     ;		     ...
    402				     ;		     retAddr	 [bp + 2]
    403				     ;		     stored BP	 [bp]
    404				     ;		     stored CX	 [bp - 2]    //	size
    405				     ;		     ...
    406				     ;------------------------------------------------
    407
    408	0515			     SaveScreen	     proc
    409	0515  55				     push bp
    410	0516  8B EC				     mov bp, sp			     ; Complete	stack frame
    411
    412	0518  BB 0000				     mov bx, 0d			     ; box position
    413	051B  B1 0A				     mov cl, boxWidth		     ; box area	width
    414	051D  80 C1 02				     add cl, 2d
    415	0520  B5 0C				     mov ch, boxHeight		     ; box area	height
    416	0522  80 C5 02				     add ch, 2d
    417
    418	0525  51				     push cx
    419
    420	0526  8B 4E FE				     mov cx, [bp - 2]
    421	0529  B6 00				     mov dh, 0
    422	052B  8A D5				     mov dl, ch
    423	052D			     @@OneLine:					     ; <-----------------\
    424										     ;			 |
    425	052D  8B FB				     mov di, bx			     ;			 |
    426	052F  8B 4E FE				     mov cx, [bp - 2]		     ;			 |
    427	0532  B5 00				     mov ch, 0			     ;			 |
    428										     ;			 |
    429	0534					 @@OneWord:			     ; <-----\		 |
    430										     ;	     |		 |
    431	0534  26: 8B 05				     mov ax, word ptr es:[di]	     ;	     |		 |
    432	0537  2E: 89 04				     mov word ptr cs:[si], ax	     ;	     |		 |
    433	053A  83 C7 02				     add di, 2d			     ;	     |		 |
    434	053D  83 C6 02				     add si, 2d			     ;	     |		 |
    435										     ;	     |		 |
    436	0540  E2 F2				     loop @@OneWord		     ; >-----/		 |
    437										     ;			 |
    438	0542  81 C3 00A0			     add bx, 160d		     ;			 |
    439										     ;			 |
    440	0546  4A				     dec dx			     ;			 |
    441	0547  75 E4				     jnz @@OneLine		     ; >-----------------/
    442
    443	0549  59				     pop cx
    444	054A  5D				     pop bp			     ; Stack frame
    445	054B  C3				     ret
    446	054C			     SaveScreen	     endp
    447
    448				     ;------------------------------------------------
    449				     ;------------------------------------------------
    450
    451
    452				     ;------------------------------------------------
    453				     ; Restore screen from buffer1
    454				     ;------------------------------------------------
    455				     ; Entry:	     ...
    456				     ;
Turbo Assembler	 Version 4.1	    03/10/23 01:22:09	    Page 9
reghunt.asm



    457				     ; Expects:	     ES	-> Video segment
    458				     ;
    459				     ; Exit:	     None
    460				     ;
    461				     ; Destroys:     AX	BX CX DX DI SI
    462				     ;		     BX	= start	addr to	draw
    463				     ;		     CH	= height of box	(with frame)
    464				     ;		     CL	= width	of box (with frame)
    465				     ;------------------------------------------------
    466				     ; Stack frame:
    467				     ;		     ...
    468				     ;		     retAddr	 [bp + 2]
    469				     ;		     stored BP	 [bp]
    470				     ;		     stored CX	 [bp - 2]    //	size
    471				     ;		     ...
    472				     ;------------------------------------------------
    473
    474	054C			     RestoreScreen   proc
    475	054C  55				     push bp
    476	054D  8B EC				     mov bp, sp			     ; Complete	stack frame
    477
    478	054F  BB 0000				     mov bx, 0d			     ; box position
    479	0552  B1 0A				     mov cl, boxWidth		     ; box area	width
    480	0554  80 C1 02				     add cl, 2d
    481	0557  B5 0C				     mov ch, boxHeight		     ; box area	height
    482	0559  80 C5 02				     add ch, 2d
    483
    484	055C  51				     push cx
    485
    486
    487	055D  BE 01DBr				     mov si, offset buffer1
    488
    489	0560  8B 4E FE				     mov cx, [bp - 2]
    490	0563  B6 00				     mov dh, 0
    491	0565  8A D5				     mov dl, ch
    492	0567			     @@OneLine:					     ; <-----------------\
    493										     ;			 |
    494	0567  8B FB				     mov di, bx			     ;			 |
    495	0569  8B 4E FE				     mov cx, [bp - 2]		     ;			 |
    496	056C  B5 00				     mov ch, 0			     ;			 |
    497										     ;			 |
    498	056E					 @@OneWord:			     ; <-----\		 |
    499										     ;	     |		 |
    500	056E  2E: 8B 04				     mov ax, word ptr cs:[si]	     ;	     |		 |
    501	0571  26: 89 05				     mov word ptr es:[di], ax	     ;	     |		 |
    502	0574  83 C7 02				     add di, 2d			     ;	     |		 |
    503	0577  83 C6 02				     add si, 2d			     ;	     |		 |
    504										     ;	     |		 |
    505	057A  E2 F2				     loop @@OneWord		     ; >-----/		 |
    506										     ;			 |
    507	057C  81 C3 00A0			     add bx, 160d		     ;			 |
    508										     ;			 |
    509	0580  4A				     dec dx			     ;			 |
    510	0581  75 E4				     jnz @@OneLine		     ; >-----------------/
    511
    512	0583  59				     pop cx
    513	0584  5D				     pop bp			     ; Stack frame
Turbo Assembler	 Version 4.1	    03/10/23 01:22:09	    Page 10
reghunt.asm



    514	0585  C3				     ret
    515	0586			     RestoreScreen   endp
    516
    517				     ;------------------------------------------------
    518				     ;------------------------------------------------
    519
    520
    521				     ;------------------------------------------------
    522				     ; Update saved screen in buffer1
    523				     ;------------------------------------------------
    524				     ; Entry:	     SI	= offset of the	bufffer
    525				     ;
    526				     ; Expects:	     ES	-> Video segment
    527				     ;
    528				     ; Exit:	     None
    529				     ;
    530				     ; Destroys:     AX	BX CX DX DI SI
    531				     ;		     BX	= start	addr to	draw
    532				     ;		     CH	= height of box	(with frame)
    533				     ;		     CL	= width	of box (with frame)
    534				     ;------------------------------------------------
    535				     ; Stack frame:
    536				     ;		     ...
    537				     ;		     retAddr	 [bp + 2]
    538				     ;		     stored BP	 [bp]
    539				     ;		     stored CX	 [bp - 2]    //	size
    540				     ;		     ...
    541				     ;------------------------------------------------
    542
    543	0586			     SaveScreenDiffs proc
    544	0586  55				     push bp
    545	0587  8B EC				     mov bp, sp			     ; Complete	stack frame
    546
    547	0589  BB 0000				     mov bx, 0d			     ; box position
    548	058C  B1 0A				     mov cl, boxWidth		     ; box area	width
    549	058E  80 C1 02				     add cl, 2d
    550	0591  B5 0C				     mov ch, boxHeight		     ; box area	height
    551	0593  80 C5 02				     add ch, 2d
    552
    553	0596  51				     push cx
    554
    555	0597  BE 032Br				     mov si, offset buffer2
    556
    557	059A  8B 4E FE				     mov cx, [bp - 2]
    558	059D  B6 00				     mov dh, 0
    559	059F  8A D5				     mov dl, ch
    560	05A1			     @@OneLine:					     ; <-----------------\
    561										     ;			 |
    562	05A1  8B FB				     mov di, bx			     ;			 |
    563	05A3  8B 4E FE				     mov cx, [bp - 2]		     ;			 |
    564	05A6  B5 00				     mov ch, 0			     ;			 |
    565										     ;			 |
    566	05A8					 @@OneWord:			     ; <-----\		 |
    567										     ;	     |		 |
    568	05A8  26: 8B 05				     mov ax, word ptr es:[di]	     ;	     |		 |
    569	05AB  2E: 39 04				     cmp word ptr cs:[si], ax	     ;	     |		 |
    570	05AE  74 13				     je	@@NoUpdate		     ; <<=\\ |		 |
Turbo Assembler	 Version 4.1	    03/10/23 01:22:09	    Page 11
reghunt.asm



    571										     ;	  || |		 |
    572	05B0  81 EE 032Br			     sub si, offset buffer2	     ;	  || |		 |
    573	05B4  81 C6 01DBr			     add si, offset buffer1	     ;	  || |		 |
    574	05B8  2E: 89 04				     mov word ptr cs:[si], ax	     ;	  || |		 |
    575	05BB  81 EE 01DBr			     sub si, offset buffer1	     ;	  || |		 |
    576	05BF  81 C6 032Br			     add si, offset buffer2	     ;	  || |		 |
    577										     ;	  || |		 |
    578	05C3					     @@NoUpdate:		     ; >>=// |		 |
    579	05C3  83 C7 02				     add di, 2d			     ;	     |		 |
    580	05C6  83 C6 02				     add si, 2d			     ;	     |		 |
    581										     ;	     |		 |
    582	05C9  E2 DD				     loop @@OneWord		     ; >-----/		 |
    583										     ;			 |
    584	05CB  81 C3 00A0			     add bx, 160d		     ;			 |
    585										     ;			 |
    586	05CF  4A				     dec dx			     ;			 |
    587	05D0  75 CF				     jnz @@OneLine		     ; >-----------------/
    588
    589	05D2  59				     pop cx
    590	05D3  5D				     pop bp			     ; Stack frame
    591	05D4  C3				     ret
    592	05D5			     SaveScreenDiffs endp
    593
    594				     ;------------------------------------------------
    595				     ;------------------------------------------------
    596
    597
    598	05D5			     InterruptorMemEnd:
    599
    600	05D5			     Main:
    601	05D5  FA				     cli
    602	05D6  BB 0000				     mov bx, 0
    603	05D9  8E C3				     mov es, bx
    604	05DB  BB 0024				     mov bx, 9*4			 ; DOS interruption address offset
    605
    606	05DE  26: 8B 07				     mov ax, es:[bx]			 ; Old interrupt-09 handler
    607	05E1  A3 012Er				     mov Old09Ofs, ax
    608	05E4  26: 8B 47	02			     mov ax, es:[bx+2]
    609	05E8  A3 0130r				     mov Old09Seg, ax
    610
    611	05EB  26: C7 07	0103r			     mov es:[bx], offset New09Int	 ; Set my interrupt-09 handler
    612	05F0  8C C8				     mov ax, cs
    613	05F2  26: 89 47	02			     mov es:[bx+2], ax
    614
    615
    616	05F6  BB 0020				     mov bx, 8*4			 ; DOS interruption address offset
    617
    618	05F9  26: 8B 07				     mov ax, es:[bx]			 ; Old interrupt-08 handler
    619	05FC  A3 019Br				     mov Old08Ofs, ax
    620	05FF  26: 8B 47	02			     mov ax, es:[bx+2]
    621	0603  A3 019Dr				     mov Old08Seg, ax
    622
    623	0606  26: C7 07	0133r			     mov es:[bx], offset New08Int	 ; Set my interrupt-08 handler
    624	060B  8C C8				     mov ax, cs
    625	060D  26: 89 47	02			     mov es:[bx+2], ax
    626	0611  FB				     sti
    627
Turbo Assembler	 Version 4.1	    03/10/23 01:22:09	    Page 12
reghunt.asm



    628
    629
    630						     ; mov bx, 0b800h
    631						     ; mov es, bx
    632						     ; mov bx, 342d
    633
    634						     ; push ds ss cs
    635
    636						     ; mov dx, 00D00h
    637						     ; pop ax
    638						     ; call PrintNHex
    639						     ; pop ax
    640						     ; call PrintNHex
    641						     ; pop ax
    642						     ; call PrintNHex
    643
    644
    645	0612  B8 3100				     mov ax, 3100h
    646	0615  BA 05D5r				     mov dx, offset InterruptorMemEnd	 ; Размер	необходимой	    +
    647				     памяти
    648	0618  C1 EA 04				     shr dx, 4				 ; В параграфе 16 байт
    649	061B  42				     inc dx				 ; С округлением вверх
    650
    651	061C  CD 21				     int 21h
    652
    653				     end	     Start
Turbo Assembler	 Version 4.1	    03/10/23 01:22:09	    Page 13
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/10/23"
??FILENAME			  Text	 "reghunt "
??TIME				  Text	 "01:22:09"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CONTROLKEY1			  Near	 DGROUP:0111
@@CONTROLKEY2			  Near	 DGROUP:011A
@@DONOTDRAW			  Near	 DGROUP:017A
@@DONOTDRAWEND			  Near	 DGROUP:018D
@@DONOTREDRAWOFF		  Near	 DGROUP:018D
@@MIDDLESTEP			  Near	 DGROUP:04D5
@@NOTCONTROLKEY			  Near	 DGROUP:011D
@@NOUPDATE			  Near	 DGROUP:05C3
@@ONELINE			  Near	 DGROUP:052D
@@ONELINE			  Near	 DGROUP:0567
@@ONELINE			  Near	 DGROUP:05A1
@@ONEWORD			  Near	 DGROUP:0534
@@ONEWORD			  Near	 DGROUP:056E
@@ONEWORD			  Near	 DGROUP:05A8
@@PRINTDIGIT			  Near	 DGROUP:047E
@@REDRAWON			  Near	 DGROUP:0162
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 REGHUNT
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ALPHABET			  Near	 DGROUP:01A0
BOXASSETEND			  Near	 DGROUP:01DA
BOXASSETFI			  Near	 DGROUP:01D6
BOXASSETLB			  Near	 DGROUP:01CE
BOXASSETLU			  Near	 DGROUP:01B6
BOXASSETL_			  Near	 DGROUP:01D2
BOXASSETRB			  Near	 DGROUP:01C6
BOXASSETRU			  Near	 DGROUP:01BE
BOXASSETR_			  Near	 DGROUP:01C2
BOXASSETSTART			  Near	 DGROUP:01B6
BOXASSETSTEP			  Near	 DGROUP:01BA
BOXASSET_B			  Near	 DGROUP:01CA
BOXASSET_U			  Near	 DGROUP:01BA
BOXCOLOR			  Number 000E
BOXHEIGHT			  Number 000C
BOXSYMBOLS			  Near	 DGROUP:01B0
BOXTHEME			  Number 0002
BOXWIDTH			  Number 000A
BUFFER1				  Near	 DGROUP:01DB
BUFFER2				  Near	 DGROUP:032B
DRAWLINE			  Near	 DGROUP:0496
DRAWREGBOX			  Near	 DGROUP:04A8
Turbo Assembler	 Version 4.1	    03/10/23 01:22:09	    Page 14
Symbol Table



INTERRUPTORMEMEND		  Near	 DGROUP:05D5
MAIN				  Near	 DGROUP:05D5
NEW08INT			  Near	 DGROUP:0133
NEW09INT			  Near	 DGROUP:0103
OLD08OFS			  Word	 DGROUP:019B
OLD08SEG			  Word	 DGROUP:019D
OLD09OFS			  Word	 DGROUP:012E
OLD09SEG			  Word	 DGROUP:0130
PRINTNHEX			  Near	 DGROUP:047B
RESTORESCREEN			  Near	 DGROUP:054C
SAVESCREEN			  Near	 DGROUP:0515
SAVESCREENDIFFS			  Near	 DGROUP:0586
START				  Near	 DGROUP:0100
STATE				  Near	 DGROUP:01DA

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  061E Word	  Public  CODE
