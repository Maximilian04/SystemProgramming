Turbo Assembler	 Version 4.1	    03/14/23 22:42:04	    Page 1
reghunt.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     .286
      4				     locals @@
      5				     org 100h
      6
      7	      =000A		     boxWidth  = 10d
      8	      =000D		     boxHeight = 13d
      9	      =0002		     boxTheme  = 2
     10	      =000E		     boxColor  = 00Eh
     11
     12	0100  E9 05CD		     Start:	     jmp Main
     13						     ; mov ax, word ptr	ss:[bx]	    ~~ 368B 07
     14						     ; mov ax, word ptr	ss:[bx + 2] ~~ 368B 4702
     15						     ; mov ax, word ptr	ss:[bx + 4] ~~ 368B 4704
     16						     ; mov ax, word ptr	cs:[Ptr1]  ~~ 2E A1 2F01
     17						     ;	 Ptr1 =	012F
     18						     ; mov word	ptr cs:[Ptr1], ax ~~ 2E	A3 2F01
     19						     ; mov word	ptr cs:[Ptr1], bx ~~ 2E	89 1E 2F01
     20						     ; mov word	ptr cs:[Ptr1], cx ~~ 2E	89 0E 2F01
     21						     ; mov word	ptr cs:[Ptr1], dx ~~ 2E	89 16 2F01
     22						     ; mov word	ptr cs:[Ptr1], si ~~ 2E	89 36 2F01
     23						     ; mov word	ptr cs:[Ptr1], di ~~ 2E	89 3E 2F01
     24						     ; mov word	ptr cs:[Ptr1], bp ~~ 2E	89 2E 2F01
     25						     ; mov word	ptr cs:[Ptr1], sp ~~ 2E	89 26 2F01
     26						     ; mov word	ptr cs:[Ptr1], ds ~~ 2E	8C 1E 2F01
     27						     ; mov word	ptr cs:[Ptr1], es ~~ 2E	8C 06 2F01
     28						     ; mov word	ptr cs:[Ptr1], ss ~~ 2E	8C 16 2F01
     29	0103  90		     Ptr1:	     db	90h
     30	0104  90				     db	90h
     31						     ; mov ax, 239h		   ~~ B8 39 02
     32						     ; mov bx, 349h		   ~~ BB 49 03
     33
     34				     ;------------------------------------------------
     35				     ; Keyboard	intterupt handler
     36				     ;------------------------------------------------
     37				     ;
     38				     ;	 Catches control keys &	sets (State) variable
     39				     ;
     40				     ;------------------------------------------------
     41
     42	0105			     New09Int	     proc
     43	0105  50				     push ax		     ; Stored regs
     44						     ; mov ax, cs
     45						     ; mov ds, ax
     46
     47	0106  E4 60				     in	al, 60h		     ; Catch key code
     48
     49	0108  3C 1D				     cmp al, 01Dh	     ; ctrl is pressed
     50	010A  74 07				     je	@@ControlKey1
     51	010C  3C 9D				     cmp al, 09Dh	     ; ctrl is released
     52	010E  74 0C				     je	@@ControlKey2
     53
     54	0110  EB 0D 90				     jmp @@NotControlKey
     55	0113					 @@ControlKey1:
     56									     ; Invert State variable
     57	0113  2E: 80 36	0224r 01		     xor byte ptr cs:[State], 01b
Turbo Assembler	 Version 4.1	    03/14/23 22:42:04	    Page 2
reghunt.asm



     58
     59	0119  EB 04 90				     jmp @@NotControlKey
     60	011C					 @@ControlKey2:
     61									     ; Invert State variable
     62
     63	011C  EB 01 90				     jmp @@NotControlKey
     64	011F					 @@NotControlKey:
     65
     66	011F  E4 61				     in	al, 61h		     ; Set interruptor free
     67	0121  0C 80				     or	al, 80h
     68	0123  E6 61				     out 61h, al
     69	0125  24 7F				     and al, not 80h
     70	0127  E6 61				     out 61h, al
     71
     72	0129  B0 20				     mov al, 20h	     ; Set interruptor free
     73	012B  E6 20				     out 20h, al
     74
     75
     76	012D  58				     pop ax		     ; Stored regs
     77	012E  9C				     pushf
     78	012F  9A				     db	09Ah		     ; CALL FAR
     79	0130  0000		     Old09Ofs	     dw	0		     ; call old	09 interruption
     80	0132  0000		     Old09Seg	     dw	0
     81
     82	0134  CF				     iret
     83	0135					     endp
     84
     85				     ;------------------------------------------------
     86				     ;------------------------------------------------
     87
     88
     89				     ;------------------------------------------------
     90				     ; Timer intterupt handler
     91				     ;------------------------------------------------
     92				     ;
     93				     ;	 Draws
     94				     ;
     95				     ;------------------------------------------------
     96
     97	0135			     New08Int	     proc
     98	0135  50 53 51 52 1E 06	56+		     push ax bx	cx dx ds es si di    ; Stored regs
     99	      57
    100
    101						     ; mov word	ptr cs:[Ptr1], ax ~~ 2E	A3 2F01
    102	013D  A32E				     dw	0A32Eh
    103	013F  04F5r				     dw	offset RegAX
    104						     ; mov word	ptr cs:[Ptr1], bx ~~ 2E	89 1E 2F01
    105	0141  892E				     dw	0892Eh
    106	0143  1E				     db	01Eh
    107	0144  04FAr				     dw	offset RegBX
    108						     ; mov word	ptr cs:[Ptr1], cx ~~ 2E	89 0E 2F01
    109	0146  892E				     dw	0892Eh
    110	0148  0E				     db	00Eh
    111	0149  04FFr				     dw	offset RegCX
    112						     ; mov word	ptr cs:[Ptr1], dx ~~ 2E	89 16 2F01
    113	014B  892E				     dw	0892Eh
    114	014D  16				     db	016h
Turbo Assembler	 Version 4.1	    03/14/23 22:42:04	    Page 3
reghunt.asm



    115	014E  0504r				     dw	offset RegDX
    116						     ; mov word	ptr cs:[Ptr1], si ~~ 2E	89 36 2F01
    117	0150  892E				     dw	0892Eh
    118	0152  36				     db	036h
    119	0153  0509r				     dw	offset RegSI
    120						     ; mov word	ptr cs:[Ptr1], di ~~ 2E	89 3E 2F01
    121	0155  892E				     dw	0892Eh
    122	0157  3E				     db	03Eh
    123	0158  050Er				     dw	offset RegDI
    124						     ; mov word	ptr cs:[Ptr1], bp ~~ 2E	89 2E 2F01
    125	015A  892E				     dw	0892Eh
    126	015C  2E				     db	02Eh
    127	015D  0513r				     dw	offset RegBP
    128						     ; mov word	ptr cs:[Ptr1], sp ~~ 2E	89 26 2F01
    129	015F  892E				     dw	0892Eh
    130	0161  26				     db	026h
    131	0162  0518r				     dw	offset RegSP
    132						     ; mov word	ptr cs:[Ptr1], ds ~~ 2E	8C 1E 2F01
    133	0164  8C2E				     dw	08C2Eh
    134	0166  1E				     db	01Eh
    135	0167  051Dr				     dw	offset RegDS
    136						     ; mov word	ptr cs:[Ptr1], es ~~ 2E	8C 06 2F01
    137	0169  8C2E				     dw	08C2Eh
    138	016B  06				     db	006h
    139	016C  0522r				     dw	offset RegES
    140						     ; mov word	ptr cs:[Ptr1], ss ~~ 2E	8C 16 2F01
    141	016E  8C2E				     dw	08C2Eh
    142	0170  16				     db	016h
    143	0171  0527r				     dw	offset RegSS
    144
    145	0173  8B DC				     mov bx, sp
    146
    147	0175  36: 8B 47	12			     mov ax, word ptr ss:[bx + 18]
    148						     ; mov word	ptr cs:[Ptr1], ax ~~ 2E	A3 2F01
    149	0179  A32E				     dw	0A32Eh
    150	017B  052Cr				     dw	offset RegCS
    151	017D  36: 8B 47	10			     mov ax, word ptr ss:[bx + 16]
    152						     ; mov word	ptr cs:[Ptr1], ax ~~ 2E	A3 2F01
    153	0181  A32E				     dw	0A32Eh
    154	0183  0531r				     dw	offset RegIP
    155
    156	0185  BB B800				     mov bx, 0b800h		     ; ES -> vidmem segment
    157	0188  8E C3				     mov es, bx
    158	018A  8C CB				     mov bx, cs			     ; DS -> datasegment
    159	018C  8E DB				     mov ds, bx
    160
    161
    162						     ; mov al, byte ptr	[State]
    163						     ; mov byte	ptr es:[bx], al
    164
    165
    166						     ; push ds
    167
    168						     ; sub bx, 2d
    169						     ; mov ah, 0d
    170						     ; call PrintNHex
    171
Turbo Assembler	 Version 4.1	    03/14/23 22:42:04	    Page 4
reghunt.asm



    172	018E  2E: F6 06	0224r 01		     test byte ptr cs:[State], 01b
    173	0194  74 2E				     jz	@@DoNotDraw		     ; >-----------------\
    174	0196  F6 06 0224r 02			     test byte ptr [State], 10b	     ;			 |
    175	019B  74 0F				     jz	@@RedrawOn		     ; >-----------------\
    176										     ;			 |
    177										     ;			 |
    178	019D  E8 04E1				     call SaveScreenDiffs	     ;			 |   < drawing ON, prev. was+
    179				     ON
    180	01A0  E8 03C0				     call DrawRegBox		     ;			 |
    181	01A3  BE 038Dr				     mov si, offset buffer2	     ;			 |
    182	01A6  E8 0467				     call SaveScreen		     ;			 |
    183										     ;			 |
    184										     ;			 |
    185	01A9  EB 2C 90				     jmp @@DoNotDrawEnd		     ; >>========\\	 |
    186	01AC					 @@RedrawOn:			     ;		 ||	 |
    187	01AC  2E: 80 0E	0224r 02		     or	byte ptr cs:[State], 10b     ;		 ||	 |
    188										     ;		 ||	 |
    189										     ;		 ||	 |
    190	01B2  BE 0225r				     mov si, offset buffer1	     ;		 ||	 |   < drawing ON, prev. was+
    191				     OFF
    192	01B5  E8 0458				     call SaveScreen		     ;		 ||	 |
    193	01B8  E8 03A8				     call DrawRegBox		     ;		 ||	 |
    194	01BB  BE 038Dr				     mov si, offset buffer2	     ;		 ||	 |
    195	01BE  E8 044F				     call SaveScreen		     ;		 ||	 |
    196										     ;		 ||	 |
    197										     ;		 ||	 |
    198	01C1  EB 14 90				     jmp @@DoNotDrawEnd		     ; >>========\\	 |
    199	01C4				     @@DoNotDraw:			     ; <---------++------/
    200	01C4  F6 06 0224r 02			     test byte ptr [State], 10b	     ;		 ||
    201	01C9  74 0C				     jz	@@DoNotRedrawOff	     ; >---------++------\
    202	01CB  2E: 80 26	0224r FD		     and byte ptr cs:[State], not 10b;		 ||	 |
    203										     ;		 ||	 |
    204										     ;		 ||	 |
    205	01D1  E8 0473				     call RestoreScreen		     ;		 ||	 |   < drawing OFF, prev.   +
    206				     was ON
    207										     ;		 ||	 |
    208										     ;		 ||	 |
    209	01D4  EB 01 90				     jmp @@DoNotDrawEnd		     ; >>========\\	 |
    210	01D7					 @@DoNotRedrawOff:		     ; <---------++------/
    211										     ;		 ||
    212										     ;		 ||	     < drawing OFF, prev.   +
    213				     was OFF
    214										     ;		 ||
    215										     ;		 ||
    216	01D7				     @@DoNotDrawEnd:			     ; <<========//
    217
    218	01D7  B0 20				     mov al, 20h	     ; Set interruptor free
    219	01D9  E6 20				     out 20h, al
    220
    221	01DB  5F 5E 07 1F 5A 59	5B+		     pop di si es ds dx	cx bx ax     ; Stored regs
    222	      58
    223
    224
    225	01E3  9C				     pushf
    226	01E4  9A				     db	09Ah		     ; CALL FAR
    227	01E5  0000		     Old08Ofs	     dw	0		     ; call old	08 interruption
    228	01E7  0000		     Old08Seg	     dw	0
Turbo Assembler	 Version 4.1	    03/14/23 22:42:04	    Page 5
reghunt.asm



    229
    230	01E9  CF				     iret
    231	01EA					     endp
    232
    233				     ;------------------------------------------------
    234				     ;------------------------------------------------
    235
    236				     ; .data
    237				     include ..\LianLib\Alphabet.asm
1   238	01EA  30 31 32 33 34 35	36+  Alphabet:	     db	"0123456789ABCDEF"	     ; Alphabet	for printing (Thanks Ilya)
    239	      37 38 39 41 42 43	44+
    240	      45 46
1   241	01FA  C9 CD BB BA BC C8	     BoxSymbols:     db	0c9h, 0cdh, 0bbh, 0bah,	0bch, 0c8h ; "╔═╗║╝╚"
1   242
1   243	0200			     BoxAssetStart:
1   244	0200  20 DA C9 00	     BoxAssetLU:     db	020h, 0dah, 0c9h, 000h
1   245	0204			     BoxAssetStep:
1   246	0204  20 C4 CD 00	     BoxAsset_U:     db	020h, 0c4h, 0cdh, 000h
1   247	0208  20 BF BB 00	     BoxAssetRU:     db	020h, 0bfh, 0bbh, 000h
1   248	020C  20 B3 BA 00	     BoxAssetR_:     db	020h, 0b3h, 0bah, 000h
1   249	0210  20 D9 BC 00	     BoxAssetRB:     db	020h, 0d9h, 0bch, 000h
1   250	0214  20 C4 CD 00	     BoxAsset_B:     db	020h, 0c4h, 0cdh, 000h
1   251	0218  20 C0 C8 00	     BoxAssetLB:     db	020h, 0c0h, 0c8h, 000h
1   252	021C  20 B3 BA 00	     BoxAssetL_:     db	020h, 0b3h, 0bah, 000h
1   253	0220  20 20 20 00	     BoxAssetFI:     db	020h, 020h, 020h, 000h
1   254	0224			     BoxAssetEnd:
1   255
1   256				     ; 0:    1:┌─┐ 2:╔═╗ 3:usr
1   257				     ;	       │ │	 ║ ║   chr
1   258				     ;	       └─┘   ╚═╝
1   259
    260					 ;   State variable:
    261					 ; mask	| meaning
    262					 ; -----+---------
    263					 ; 0001	| Box is on (1)	/ off (0)
    264					 ; 0010	| Box was on (1) / off (0) last	timer intr
    265	0224  01		     State:	     db	001h
    266	0225  B4*(????)		     Buffer1:	     dw	((boxHeight + 2) * (boxWidth + 2)) DUP(?)    ; Info to restore (modified    +
    267				     first screen)
    268	038D  B4*(????)		     Buffer2:	     dw	((boxHeight + 2) * (boxWidth + 2)) DUP(?)    ; Info to compare (previous    +
    269				     screen)
    270				     ; .code
    271
    272	04F5  0000		     RegAX:	 dw 0h
    273	04F7  72 61 78				 db "rax"
    274	04FA  0000		     RegBX:	 dw 0h
    275	04FC  72 62 78				 db "rbx"
    276	04FF  0000		     RegCX:	 dw 0h
    277	0501  72 63 78				 db "rcx"
    278	0504  0000		     RegDX:	 dw 0h
    279	0506  72 64 78				 db "rdx"
    280	0509  0000		     RegSI:	 dw 0h
    281	050B  20 73 69				 db " si"
    282	050E  0000		     RegDI:	 dw 0h
    283	0510  20 64 69				 db " di"
    284	0513  0000		     RegBP:	 dw 0h
    285	0515  20 62 70				 db " bp"
Turbo Assembler	 Version 4.1	    03/14/23 22:42:04	    Page 6
reghunt.asm



    286	0518  0000		     RegSP:	 dw 0h
    287	051A  20 73 70				 db " sp"
    288	051D  0000		     RegDS:	 dw 0h
    289	051F  20 64 73				 db " ds"
    290	0522  0000		     RegES:	 dw 0h
    291	0524  20 65 73				 db " es"
    292	0527  0000		     RegSS:	 dw 0h
    293	0529  20 73 73				 db " ss"
    294	052C  0000		     RegCS:	 dw 0h
    295	052E  20 63 73				 db " cs"
    296	0531  0000		     RegIP:	 dw 0h
    297	0533  20 69 70				 db " ip"
    298	0536			     RegEnding:
    299
    300				     include ..\LianLib\PrntNHex.asm
1   301				     ;------------------------------------------------
1   302				     ; Prints number as	hexagen	to vidmem
1   303				     ;------------------------------------------------
1   304				     ; Entry:	     AX	= number to print
1   305				     ;		     BX	= start	addr to	print
1   306				     ;
1   307				     ; Expects:	     ES	-> Video segment
1   308				     ;		     DH	= color	code
1   309				     ;
1   310				     ; Exit:	     None
1   311				     ;
1   312				     ; Destroys:     AX	BX CX DL Si
1   313				     ;------------------------------------------------
1   314				     ;------------------------------------------------
1   315	0536			     PrintNHex	     proc
1   316
1   317	0536  B9 0004				     mov cx, 4d			     ; 4 digits	in 2 byte in ax
1   318
1   319	0539			     @@PrintDigit:				     ; <-------------------------\
1   320										     ;				 |
1   321	0539  B2 0F				     mov dl, 00001111b		     ; Mask			 |
1   322	053B  22 D0				     and dl, al			     ;				 |
1   323										     ;				 |
1   324	053D  8B F2				     mov si, dx			     ; dl -> si			 |
1   325	053F  83 E6 0F				     and si, 0Fh		     ;				 |
1   326										     ;				 |
1   327	0542  8A 94 01EAr			     mov dl, byte ptr [Alphabet]+si  ; ASCII "0" offset		 |
1   328										     ;				 |
1   329	0546  26: 89 17				     mov word ptr es:[bx], dx	     ; Print dl	on position bx	 |
1   330										     ;				 |
1   331	0549  4B				     dec bx			     ; Next digit		 |
1   332	054A  4B				     dec bx			     ; ^			 |
1   333										     ;				 |
1   334	054B  C1 E8 04				     shr ax, 4d			     ; ax >> 4			 |
1   335										     ;				 |
1   336	054E  E2 E9				     loop @@PrintDigit		     ; >-------------------------/
1   337
1   338	0550  C3				     ret
1   339
1   340	0551			     PrintNHex	     endp
1   341
1   342				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    03/14/23 22:42:04	    Page 7
reghunt.asm



1   343				     ;------------------------------------------------
1   344
    345				     ; include ..\LianLib\ProBox.asm
    346				     include ..\LianLib\DrawLine.asm
1   347				     ;------------------------------------------------
1   348				     ; Draws line on the screen	(Pattern ABB~BBC)
1   349				     ;------------------------------------------------
1   350				     ; Entry:	     DI	= start	addr to	draw
1   351				     ;		     CX	= width	of line	(without A&C)
1   352				     ;
1   353				     ; Expects:	     ES	-> Video segment
1   354				     ;		     DF	= 0 (CLD)
1   355				     ;
1   356				     ; Exit:	     None
1   357				     ;
1   358				     ; Destroys:     AX	CX DI
1   359				     ;------------------------------------------------
1   360				     ; Stack frame:
1   361				     ;		     ...
1   362				     ;		     'A' char	 [bp + 8]    //	H - color attr
1   363				     ;		     'B' char	 [bp + 6]    //	L - symb attr
1   364				     ;		     'C' char	 [bp + 4]    //
1   365				     ;		     retAddr	 [bp + 2]
1   366				     ;		     stored BP	 [bp]
1   367				     ;		     ...
1   368				     ;------------------------------------------------
1   369				     ;Направление просмотра	 зависит	 от флага		    +
    370				     направления DF,	значение  которого  можно	менять  с    +
    371				     помощью команд CLD (DF:=0) и	STD (DF:=1).
1   372
1   373	0551			     DrawLine	     proc
1   374	0551  55				     push bp
1   375	0552  8B EC				     mov bp, sp			     ; Complete	stack frame
1   376
1   377	0554  8B 46 08				     mov ax, [bp + 8]
1   378	0557  AB				     stosw
1   379
1   380	0558  8B 46 06				     mov ax, [bp + 6]
1   381	055B  F3> AB				     rep stosw
1   382
1   383	055D  8B 46 04				     mov ax, [bp + 4]
1   384	0560  AB				     stosw
1   385
1   386	0561  5D				     pop bp			     ; Stack frame
1   387	0562  C3				     ret
1   388	0563			     DrawLine	     endp
1   389
1   390				     ;------------------------------------------------
1   391				     ;------------------------------------------------
1   392
    393
    394
    395				     ;------------------------------------------------
    396				     ; Draws box for registers on the screen
    397				     ;------------------------------------------------
    398				     ; Entry:	     ...
    399				     ;
Turbo Assembler	 Version 4.1	    03/14/23 22:42:04	    Page 8
reghunt.asm



    400				     ; Expects:	     ES	-> Video segment
    401				     ;		     DS	-> Data	segment
    402				     ;
    403				     ; Exit:	     None
    404				     ;
    405				     ; Destroys:     AX	BX CX DX DI
    406				     ;		     BX	= start	addr to	draw
    407				     ;		     CH	= height of box	(without frame)
    408				     ;		     CL	= width	of box (without	frame)
    409				     ;------------------------------------------------
    410				     ; Stack frame:
    411				     ;		     ...
    412				     ;		     retAddr	 [bp + 2]
    413				     ;		     stored BP	 [bp]
    414				     ;		     stored CX	 [bp - 2]    //	size
    415				     ;		     ...
    416				     ;------------------------------------------------
    417
    418	0563			     DrawRegBox	     proc
    419	0563  55				     push bp
    420	0564  8B EC				     mov bp, sp			     ; Complete	stack frame
    421
    422	0566  BB 0000				     mov bx, 0d			     ; box position
    423	0569  B1 0A				     mov cl, boxWidth		     ; box width
    424	056B  B5 0D				     mov ch, boxHeight		     ; box height
    425
    426	056D  51				     push cx
    427
    428	056E  B4 0E				     mov ah, boxColor		     ; box color
    429
    430										     ;-------------------------------------------
    431										     ; Upper line
    432	0570  8B FB				     mov di, bx
    433	0572  8B 4E FE				     mov cx, [bp - 2]
    434	0575  B5 00				     mov ch, 0
    435	0577  A0 0202r				     mov al, byte ptr [BoxAssetLU + boxTheme]
    436	057A  50				     push ax
    437	057B  A0 0206r				     mov al, byte ptr [BoxAsset_U + boxTheme]
    438	057E  50				     push ax
    439	057F  A0 020Ar				     mov al, byte ptr [BoxAssetRU + boxTheme]
    440	0582  50				     push ax
    441	0583  E8 FFCB				     call DrawLine
    442	0586  83 C4 06				     add sp, 2*3d
    443										     ;-------------------------------------------
    444										     ; Middle line
    445	0589  8B 4E FE				     mov cx, [bp - 2]
    446	058C  B6 00				     mov dh, 0
    447	058E  8A D5				     mov dl, ch
    448	0590			     @@MiddleStep:				     ; <-----------------\
    449										     ;			 |
    450	0590  81 C3 00A0			     add bx, 160d		     ;			 |
    451	0594  8B FB				     mov di, bx			     ;			 |
    452	0596  8B 4E FE				     mov cx, [bp - 2]		     ;			 |
    453	0599  B5 00				     mov ch, 0			     ;			 |
    454	059B  A0 021Er				     mov al, byte ptr [BoxAssetL_ + boxTheme];		 |
    455	059E  50				     push ax			     ;			 |
    456	059F  A0 0222r				     mov al, byte ptr [BoxAssetFI + boxTheme];		 |
Turbo Assembler	 Version 4.1	    03/14/23 22:42:04	    Page 9
reghunt.asm



    457	05A2  50				     push ax			     ;			 |
    458	05A3  A0 020Er				     mov al, byte ptr [BoxAssetR_ + boxTheme];		 |
    459	05A6  50				     push ax			     ;			 |
    460	05A7  E8 FFA7				     call DrawLine		     ;			 |
    461	05AA  83 C4 06				     add sp, 2*3d		     ;			 |
    462	05AD  4A				     dec dx			     ;			 |
    463	05AE  75 E0				     jnz @@MiddleStep		     ; >-----------------/
    464										     ;-------------------------------------------
    465										     ; Bottom line
    466	05B0  81 C3 00A0			     add bx, 160d
    467	05B4  8B FB				     mov di, bx
    468	05B6  8B 4E FE				     mov cx, [bp - 2]
    469	05B9  B5 00				     mov ch, 0
    470	05BB  A0 021Ar				     mov al, byte ptr [BoxAssetLB + boxTheme]
    471	05BE  50				     push ax
    472	05BF  A0 0216r				     mov al, byte ptr [BoxAsset_B + boxTheme]
    473	05C2  50				     push ax
    474	05C3  A0 0212r				     mov al, byte ptr [BoxAssetRB + boxTheme]
    475	05C6  50				     push ax
    476	05C7  E8 FF87				     call DrawLine
    477	05CA  83 C4 06				     add sp, 2*3d
    478										     ;-------------------------------------------
    479										     ;-------------------------------------------
    480										     ; Printing	regs
    481
    482	05CD  BB 000A				     mov bx, 10d		     ; start position
    483	05D0  B6 0E				     mov dh, boxColor		     ; color
    484
    485	05D2  BF 04F5r				     mov di, offset RegAX
    486
    487	05D5				     @@OneRegister:			     ; <-----------------\
    488	05D5  81 C3 00A0			     add bx, 160d		     ;			 |
    489	05D9  83 EB 06				     sub bx, 06d		     ;			 |
    490										     ;			 |
    491	05DC  83 C7 02				     add di, 2d			     ;			 |
    492										     ;			 |
    493	05DF  B9 0003				     mov cx, 3d			     ;			 |
    494	05E2					 @@OneChar:			     ; <-----\		 |
    495										     ;	     |		 |
    496	05E2  2E: 8A 15				     mov dl, cs:[di]		     ;	     |		 |
    497	05E5  26: 89 17				     mov es:[bx], dx		     ;	     |		 |
    498										     ;	     |		 |
    499	05E8  47				     inc di			     ;	     |		 |
    500	05E9  83 C3 02				     add bx, 2			     ;	     |		 |
    501	05EC  E2 F4				     loop @@OneChar		     ; >-----/		 |
    502										     ;			 |
    503	05EE  B2 3D				     mov dl, "="		     ;			 |
    504	05F0  26: 89 17				     mov es:[bx], dx		     ;			 |
    505										     ;			 |
    506	05F3  83 EF 05				     sub di, 5d			     ;			 |
    507										     ;			 |
    508	05F6  83 C3 08				     add bx, 08d		     ;			 |
    509										     ;			 |
    510	05F9  2E: 8B 05				     mov ax, word ptr cs:[di]	     ;			 |
    511	05FC  E8 FF37				     call PrintNHex		     ;			 |
    512										     ;			 |
    513	05FF  81 EF 04F5r			     sub di, offset RegAX	     ;			 |
Turbo Assembler	 Version 4.1	    03/14/23 22:42:04	    Page 10
reghunt.asm



    514	0603  81 C7 04FAr			     add di, offset RegBX	     ;			 |
    515										     ;			 |
    516	0607  81 FF 0536r			     cmp di, offset RegEnding	     ;			 |
    517	060B  7C C8				     jl	@@OneRegister		     ; >-----------------/
    518
    519
    520	060D  59				     pop cx
    521	060E  5D				     pop bp			     ; Stack frame
    522	060F  C3				     ret
    523	0610			     DrawRegBox	     endp
    524
    525				     ;------------------------------------------------
    526				     ;------------------------------------------------
    527
    528
    529				     ;------------------------------------------------
    530				     ; Save screen into	various	buffer
    531				     ;------------------------------------------------
    532				     ; Entry:	     SI	= offset of the	bufffer
    533				     ;
    534				     ; Expects:	     ES	-> Video segment
    535				     ;
    536				     ; Exit:	     None
    537				     ;
    538				     ; Destroys:     AX	BX CX DX DI SI
    539				     ;		     BX	= start	addr to	draw
    540				     ;		     CH	= height of box	(with frame)
    541				     ;		     CL	= width	of box (with frame)
    542				     ;------------------------------------------------
    543				     ; Stack frame:
    544				     ;		     ...
    545				     ;		     retAddr	 [bp + 2]
    546				     ;		     stored BP	 [bp]
    547				     ;		     stored CX	 [bp - 2]    //	size
    548				     ;		     ...
    549				     ;------------------------------------------------
    550
    551	0610			     SaveScreen	     proc
    552	0610  55				     push bp
    553	0611  8B EC				     mov bp, sp			     ; Complete	stack frame
    554
    555	0613  BB 0000				     mov bx, 0d			     ; box position
    556	0616  B1 0A				     mov cl, boxWidth		     ; box area	width
    557	0618  80 C1 02				     add cl, 2d
    558	061B  B5 0D				     mov ch, boxHeight		     ; box area	height
    559	061D  80 C5 02				     add ch, 2d
    560
    561	0620  51				     push cx
    562
    563	0621  8B 4E FE				     mov cx, [bp - 2]
    564	0624  B6 00				     mov dh, 0
    565	0626  8A D5				     mov dl, ch
    566	0628			     @@OneLine:					     ; <-----------------\
    567										     ;			 |
    568	0628  8B FB				     mov di, bx			     ;			 |
    569	062A  8B 4E FE				     mov cx, [bp - 2]		     ;			 |
    570	062D  B5 00				     mov ch, 0			     ;			 |
Turbo Assembler	 Version 4.1	    03/14/23 22:42:04	    Page 11
reghunt.asm



    571										     ;			 |
    572	062F					 @@OneWord:			     ; <-----\		 |
    573										     ;	     |		 |
    574	062F  26: 8B 05				     mov ax, word ptr es:[di]	     ;	     |		 |
    575	0632  2E: 89 04				     mov word ptr cs:[si], ax	     ;	     |		 |
    576	0635  83 C7 02				     add di, 2d			     ;	     |		 |
    577	0638  83 C6 02				     add si, 2d			     ;	     |		 |
    578										     ;	     |		 |
    579	063B  E2 F2				     loop @@OneWord		     ; >-----/		 |
    580										     ;			 |
    581	063D  81 C3 00A0			     add bx, 160d		     ;			 |
    582										     ;			 |
    583	0641  4A				     dec dx			     ;			 |
    584	0642  75 E4				     jnz @@OneLine		     ; >-----------------/
    585
    586	0644  59				     pop cx
    587	0645  5D				     pop bp			     ; Stack frame
    588	0646  C3				     ret
    589	0647			     SaveScreen	     endp
    590
    591				     ;------------------------------------------------
    592				     ;------------------------------------------------
    593
    594
    595				     ;------------------------------------------------
    596				     ; Restore screen from buffer1
    597				     ;------------------------------------------------
    598				     ; Entry:	     ...
    599				     ;
    600				     ; Expects:	     ES	-> Video segment
    601				     ;
    602				     ; Exit:	     None
    603				     ;
    604				     ; Destroys:     AX	BX CX DX DI SI
    605				     ;		     BX	= start	addr to	draw
    606				     ;		     CH	= height of box	(with frame)
    607				     ;		     CL	= width	of box (with frame)
    608				     ;------------------------------------------------
    609				     ; Stack frame:
    610				     ;		     ...
    611				     ;		     retAddr	 [bp + 2]
    612				     ;		     stored BP	 [bp]
    613				     ;		     stored CX	 [bp - 2]    //	size
    614				     ;		     ...
    615				     ;------------------------------------------------
    616
    617	0647			     RestoreScreen   proc
    618	0647  55				     push bp
    619	0648  8B EC				     mov bp, sp			     ; Complete	stack frame
    620
    621	064A  BB 0000				     mov bx, 0d			     ; box position
    622	064D  B1 0A				     mov cl, boxWidth		     ; box area	width
    623	064F  80 C1 02				     add cl, 2d
    624	0652  B5 0D				     mov ch, boxHeight		     ; box area	height
    625	0654  80 C5 02				     add ch, 2d
    626
    627	0657  51				     push cx
Turbo Assembler	 Version 4.1	    03/14/23 22:42:04	    Page 12
reghunt.asm



    628
    629
    630	0658  BE 0225r				     mov si, offset buffer1
    631
    632	065B  8B 4E FE				     mov cx, [bp - 2]
    633	065E  B6 00				     mov dh, 0
    634	0660  8A D5				     mov dl, ch
    635	0662			     @@OneLine:					     ; <-----------------\
    636										     ;			 |
    637	0662  8B FB				     mov di, bx			     ;			 |
    638	0664  8B 4E FE				     mov cx, [bp - 2]		     ;			 |
    639	0667  B5 00				     mov ch, 0			     ;			 |
    640										     ;			 |
    641	0669					 @@OneWord:			     ; <-----\		 |
    642										     ;	     |		 |
    643	0669  2E: 8B 04				     mov ax, word ptr cs:[si]	     ;	     |		 |
    644	066C  26: 89 05				     mov word ptr es:[di], ax	     ;	     |		 |
    645	066F  83 C7 02				     add di, 2d			     ;	     |		 |
    646	0672  83 C6 02				     add si, 2d			     ;	     |		 |
    647										     ;	     |		 |
    648	0675  E2 F2				     loop @@OneWord		     ; >-----/		 |
    649										     ;			 |
    650	0677  81 C3 00A0			     add bx, 160d		     ;			 |
    651										     ;			 |
    652	067B  4A				     dec dx			     ;			 |
    653	067C  75 E4				     jnz @@OneLine		     ; >-----------------/
    654
    655	067E  59				     pop cx
    656	067F  5D				     pop bp			     ; Stack frame
    657	0680  C3				     ret
    658	0681			     RestoreScreen   endp
    659
    660				     ;------------------------------------------------
    661				     ;------------------------------------------------
    662
    663
    664				     ;------------------------------------------------
    665				     ; Update saved screen in buffer1
    666				     ;------------------------------------------------
    667				     ; Entry:	     SI	= offset of the	bufffer
    668				     ;
    669				     ; Expects:	     ES	-> Video segment
    670				     ;
    671				     ; Exit:	     None
    672				     ;
    673				     ; Destroys:     AX	BX CX DX DI SI
    674				     ;		     BX	= start	addr to	draw
    675				     ;		     CH	= height of box	(with frame)
    676				     ;		     CL	= width	of box (with frame)
    677				     ;------------------------------------------------
    678				     ; Stack frame:
    679				     ;		     ...
    680				     ;		     retAddr	 [bp + 2]
    681				     ;		     stored BP	 [bp]
    682				     ;		     stored CX	 [bp - 2]    //	size
    683				     ;		     ...
    684				     ;------------------------------------------------
Turbo Assembler	 Version 4.1	    03/14/23 22:42:04	    Page 13
reghunt.asm



    685
    686	0681			     SaveScreenDiffs proc
    687	0681  55				     push bp
    688	0682  8B EC				     mov bp, sp			     ; Complete	stack frame
    689
    690	0684  BB 0000				     mov bx, 0d			     ; box position
    691	0687  B1 0A				     mov cl, boxWidth		     ; box area	width
    692	0689  80 C1 02				     add cl, 2d
    693	068C  B5 0D				     mov ch, boxHeight		     ; box area	height
    694	068E  80 C5 02				     add ch, 2d
    695
    696	0691  51				     push cx
    697
    698	0692  BE 038Dr				     mov si, offset buffer2
    699
    700	0695  8B 4E FE				     mov cx, [bp - 2]
    701	0698  B6 00				     mov dh, 0
    702	069A  8A D5				     mov dl, ch
    703	069C			     @@OneLine:					     ; <-----------------\
    704										     ;			 |
    705	069C  8B FB				     mov di, bx			     ;			 |
    706	069E  8B 4E FE				     mov cx, [bp - 2]		     ;			 |
    707	06A1  B5 00				     mov ch, 0			     ;			 |
    708										     ;			 |
    709	06A3					 @@OneWord:			     ; <-----\		 |
    710										     ;	     |		 |
    711	06A3  26: 8B 05				     mov ax, word ptr es:[di]	     ;	     |		 |
    712	06A6  2E: 39 04				     cmp word ptr cs:[si], ax	     ;	     |		 |
    713	06A9  74 13				     je	@@NoUpdate		     ; <<=\\ |		 |
    714										     ;	  || |		 |
    715	06AB  81 EE 038Dr			     sub si, offset buffer2	     ;	  || |		 |
    716	06AF  81 C6 0225r			     add si, offset buffer1	     ;	  || |		 |
    717	06B3  2E: 89 04				     mov word ptr cs:[si], ax	     ;	  || |		 |
    718	06B6  81 EE 0225r			     sub si, offset buffer1	     ;	  || |		 |
    719	06BA  81 C6 038Dr			     add si, offset buffer2	     ;	  || |		 |
    720										     ;	  || |		 |
    721	06BE					     @@NoUpdate:		     ; >>=// |		 |
    722	06BE  83 C7 02				     add di, 2d			     ;	     |		 |
    723	06C1  83 C6 02				     add si, 2d			     ;	     |		 |
    724										     ;	     |		 |
    725	06C4  E2 DD				     loop @@OneWord		     ; >-----/		 |
    726										     ;			 |
    727	06C6  81 C3 00A0			     add bx, 160d		     ;			 |
    728										     ;			 |
    729	06CA  4A				     dec dx			     ;			 |
    730	06CB  75 CF				     jnz @@OneLine		     ; >-----------------/
    731
    732	06CD  59				     pop cx
    733	06CE  5D				     pop bp			     ; Stack frame
    734	06CF  C3				     ret
    735	06D0			     SaveScreenDiffs endp
    736
    737				     ;------------------------------------------------
    738				     ;------------------------------------------------
    739
    740
    741	06D0			     InterruptorMemEnd:
Turbo Assembler	 Version 4.1	    03/14/23 22:42:04	    Page 14
reghunt.asm



    742
    743	06D0			     Main:
    744	06D0  FA				     cli
    745	06D1  BB 0000				     mov bx, 0
    746	06D4  8E C3				     mov es, bx
    747	06D6  BB 0024				     mov bx, 9*4			 ; DOS interruption address offset
    748
    749	06D9  26: 8B 07				     mov ax, es:[bx]			 ; Old interrupt-09 handler
    750	06DC  A3 0130r				     mov Old09Ofs, ax
    751	06DF  26: 8B 47	02			     mov ax, es:[bx+2]
    752	06E3  A3 0132r				     mov Old09Seg, ax
    753
    754	06E6  26: C7 07	0105r			     mov es:[bx], offset New09Int	 ; Set my interrupt-09 handler
    755	06EB  8C C8				     mov ax, cs
    756	06ED  26: 89 47	02			     mov es:[bx+2], ax
    757
    758
    759	06F1  BB 0020				     mov bx, 8*4			 ; DOS interruption address offset
    760
    761	06F4  26: 8B 07				     mov ax, es:[bx]			 ; Old interrupt-08 handler
    762	06F7  A3 01E5r				     mov Old08Ofs, ax
    763	06FA  26: 8B 47	02			     mov ax, es:[bx+2]
    764	06FE  A3 01E7r				     mov Old08Seg, ax
    765
    766	0701  26: C7 07	0135r			     mov es:[bx], offset New08Int	 ; Set my interrupt-08 handler
    767	0706  8C C8				     mov ax, cs
    768	0708  26: 89 47	02			     mov es:[bx+2], ax
    769	070C  FB				     sti
    770
    771
    772
    773						     ; mov bx, 0b800h
    774						     ; mov es, bx
    775						     ; mov bx, 342d
    776
    777						     ; push ds ss cs
    778
    779						     ; mov dx, 00D00h
    780						     ; pop ax
    781						     ; call PrintNHex
    782						     ; pop ax
    783						     ; call PrintNHex
    784						     ; pop ax
    785						     ; call PrintNHex
    786
    787
    788	070D  B8 3100				     mov ax, 3100h
    789	0710  BA 06D0r				     mov dx, offset InterruptorMemEnd	 ; Размер	необходимой	    +
    790				     памяти
    791	0713  C1 EA 04				     shr dx, 4				 ; В параграфе 16 байт
    792	0716  42				     inc dx				 ; С округлением вверх
    793
    794	0717  CD 21				     int 21h
    795
    796				     end	     Start
Turbo Assembler	 Version 4.1	    03/14/23 22:42:04	    Page 15
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/14/23"
??FILENAME			  Text	 "reghunt "
??TIME				  Text	 "22:42:04"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CONTROLKEY1			  Near	 DGROUP:0113
@@CONTROLKEY2			  Near	 DGROUP:011C
@@DONOTDRAW			  Near	 DGROUP:01C4
@@DONOTDRAWEND			  Near	 DGROUP:01D7
@@DONOTREDRAWOFF		  Near	 DGROUP:01D7
@@MIDDLESTEP			  Near	 DGROUP:0590
@@NOTCONTROLKEY			  Near	 DGROUP:011F
@@NOUPDATE			  Near	 DGROUP:06BE
@@ONECHAR			  Near	 DGROUP:05E2
@@ONELINE			  Near	 DGROUP:0628
@@ONELINE			  Near	 DGROUP:0662
@@ONELINE			  Near	 DGROUP:069C
@@ONEREGISTER			  Near	 DGROUP:05D5
@@ONEWORD			  Near	 DGROUP:062F
@@ONEWORD			  Near	 DGROUP:0669
@@ONEWORD			  Near	 DGROUP:06A3
@@PRINTDIGIT			  Near	 DGROUP:0539
@@REDRAWON			  Near	 DGROUP:01AC
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 REGHUNT
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ALPHABET			  Near	 DGROUP:01EA
BOXASSETEND			  Near	 DGROUP:0224
BOXASSETFI			  Near	 DGROUP:0220
BOXASSETLB			  Near	 DGROUP:0218
BOXASSETLU			  Near	 DGROUP:0200
BOXASSETL_			  Near	 DGROUP:021C
BOXASSETRB			  Near	 DGROUP:0210
BOXASSETRU			  Near	 DGROUP:0208
BOXASSETR_			  Near	 DGROUP:020C
BOXASSETSTART			  Near	 DGROUP:0200
BOXASSETSTEP			  Near	 DGROUP:0204
BOXASSET_B			  Near	 DGROUP:0214
BOXASSET_U			  Near	 DGROUP:0204
BOXCOLOR			  Number 000E
BOXHEIGHT			  Number 000D
BOXSYMBOLS			  Near	 DGROUP:01FA
BOXTHEME			  Number 0002
BOXWIDTH			  Number 000A
BUFFER1				  Near	 DGROUP:0225
BUFFER2				  Near	 DGROUP:038D
Turbo Assembler	 Version 4.1	    03/14/23 22:42:04	    Page 16
Symbol Table



DRAWLINE			  Near	 DGROUP:0551
DRAWREGBOX			  Near	 DGROUP:0563
INTERRUPTORMEMEND		  Near	 DGROUP:06D0
MAIN				  Near	 DGROUP:06D0
NEW08INT			  Near	 DGROUP:0135
NEW09INT			  Near	 DGROUP:0105
OLD08OFS			  Word	 DGROUP:01E5
OLD08SEG			  Word	 DGROUP:01E7
OLD09OFS			  Word	 DGROUP:0130
OLD09SEG			  Word	 DGROUP:0132
PRINTNHEX			  Near	 DGROUP:0536
PTR1				  Near	 DGROUP:0103
REGAX				  Near	 DGROUP:04F5
REGBP				  Near	 DGROUP:0513
REGBX				  Near	 DGROUP:04FA
REGCS				  Near	 DGROUP:052C
REGCX				  Near	 DGROUP:04FF
REGDI				  Near	 DGROUP:050E
REGDS				  Near	 DGROUP:051D
REGDX				  Near	 DGROUP:0504
REGENDING			  Near	 DGROUP:0536
REGES				  Near	 DGROUP:0522
REGIP				  Near	 DGROUP:0531
REGSI				  Near	 DGROUP:0509
REGSP				  Near	 DGROUP:0518
REGSS				  Near	 DGROUP:0527
RESTORESCREEN			  Near	 DGROUP:0647
SAVESCREEN			  Near	 DGROUP:0610
SAVESCREENDIFFS			  Near	 DGROUP:0681
START				  Near	 DGROUP:0100
STATE				  Near	 DGROUP:0224

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0719 Word	  Public  CODE
